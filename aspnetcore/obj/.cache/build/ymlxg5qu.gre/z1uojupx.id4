<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Key storage providers </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Key storage providers ">
    <meta name="generator" content="docfx 2.24.0.0">
    
    <link rel="shortcut icon" href="../../../favicon.ico">
    <link rel="stylesheet" href="../../../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../../../styles/docfx.css">
    <link rel="stylesheet" href="../../../styles/main.css">
    <meta property="docfx:navrel" content="/foo">
    <meta property="docfx:tocrel" content="../../../toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../../../index.html">
                <img id="logo" class="svg" src="../../../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="security/data-protection/implementation/key-storage-providers">
<h1 id="key-storage-providers" sourcefile="security/data-protection/implementation/key-storage-providers.md" sourcestartlinenumber="15" sourceendlinenumber="15">Key storage providers</h1>

<p sourcefile="security/data-protection/implementation/key-storage-providers.md" sourcestartlinenumber="17" sourceendlinenumber="17"><a name="data-protection-implementation-key-storage-providers"></a></p>
<p sourcefile="security/data-protection/implementation/key-storage-providers.md" sourcestartlinenumber="19" sourceendlinenumber="19">By default the data protection system <a href="../configuration/default-settings.html#data-protection-default-settings" data-raw-source="[employs a heuristic](../configuration/default-settings.md#data-protection-default-settings)" sourcefile="security/data-protection/implementation/key-storage-providers.md" sourcestartlinenumber="19" sourceendlinenumber="19">employs a heuristic</a> to determine where cryptographic key material should be persisted. The developer can override the heuristic and manually specify the location.</p>
<div class="NOTE" sourcefile="security/data-protection/implementation/key-storage-providers.md" sourcestartlinenumber="21" sourceendlinenumber="21"><h5>Note</h5><p sourcefile="security/data-protection/implementation/key-storage-providers.md" sourcestartlinenumber="22" sourceendlinenumber="22">If you specify an explicit key persistence location, the data protection system will deregister the default key encryption at rest mechanism that the heuristic provided, so keys will no longer be encrypted at rest. It is recommended that you additionally <a href="key-encryption-at-rest.html#data-protection-implementation-key-encryption-at-rest-providers" data-raw-source="[specify an explicit key encryption mechanism](key-encryption-at-rest.md#data-protection-implementation-key-encryption-at-rest-providers)" sourcefile="security/data-protection/implementation/key-storage-providers.md" sourcestartlinenumber="22" sourceendlinenumber="22">specify an explicit key encryption mechanism</a> for production applications.</p>
</div>
<p sourcefile="security/data-protection/implementation/key-storage-providers.md" sourcestartlinenumber="24" sourceendlinenumber="24">The data protection system ships with several in-box key storage providers.</p>
<h2 id="file-system" sourcefile="security/data-protection/implementation/key-storage-providers.md" sourcestartlinenumber="26" sourceendlinenumber="26">File system</h2>
<p sourcefile="security/data-protection/implementation/key-storage-providers.md" sourcestartlinenumber="28" sourceendlinenumber="28">We anticipate that many apps will use a file system-based key repository. To configure this, call the <a href="https://github.com/aspnet/DataProtection/blob/rel/1.1.0/src/Microsoft.AspNetCore.DataProtection/DataProtectionBuilderExtensions.cs" data-raw-source="[PersistKeysToFileSystem](https://github.com/aspnet/DataProtection/blob/rel/1.1.0/src/Microsoft.AspNetCore.DataProtection/DataProtectionBuilderExtensions.cs)" sourcefile="security/data-protection/implementation/key-storage-providers.md" sourcestartlinenumber="28" sourceendlinenumber="28">PersistKeysToFileSystem</a> configuration routine as shown below. Provide a <code>DirectoryInfo</code> pointing to the repository where keys should be stored.</p>
<pre sourcefile="security/data-protection/implementation/key-storage-providers.md" sourcestartlinenumber="30" sourceendlinenumber="34"><code class="lang-csharp">sc.AddDataProtection()
       // persist keys to a specific directory
       .PersistKeysToFileSystem(new DirectoryInfo(@&quot;c:\temp-keys\&quot;));
</code></pre><p sourcefile="security/data-protection/implementation/key-storage-providers.md" sourcestartlinenumber="36" sourceendlinenumber="36">The <code>DirectoryInfo</code> can point to a directory on the local machine, or it can point to a folder on a network share. If pointing to a directory on the local machine (and the scenario is that only applications on the local machine will need to use this repository), consider using <a href="key-encryption-at-rest.html#data-protection-implementation-key-encryption-at-rest" data-raw-source="[Windows DPAPI](key-encryption-at-rest.md#data-protection-implementation-key-encryption-at-rest)" sourcefile="security/data-protection/implementation/key-storage-providers.md" sourcestartlinenumber="36" sourceendlinenumber="36">Windows DPAPI</a> to encrypt the keys at rest. Otherwise consider using an <a href="key-encryption-at-rest.html#data-protection-implementation-key-encryption-at-rest" data-raw-source="[X.509 certificate](key-encryption-at-rest.md#data-protection-implementation-key-encryption-at-rest)" sourcefile="security/data-protection/implementation/key-storage-providers.md" sourcestartlinenumber="36" sourceendlinenumber="36">X.509 certificate</a> to encrypt keys at rest.</p>
<h2 id="azure-and-redis" sourcefile="security/data-protection/implementation/key-storage-providers.md" sourcestartlinenumber="38" sourceendlinenumber="38">Azure and Redis</h2>
<p sourcefile="security/data-protection/implementation/key-storage-providers.md" sourcestartlinenumber="40" sourceendlinenumber="40">The <code>Microsoft.AspNetCore.DataProtection.AzureStorage</code> and <code>Microsoft.AspNetCore.DataProtection.Redis</code> packages allow storing your data protection keys in Azure Storage or a Redis cache. Keys can be shared across several instances of a web app. Your ASP.NET Core app can share authentication cookies or CSRF protection across multiple servers. To configure on Azure, call one of the <a href="https://github.com/aspnet/DataProtection/blob/rel/1.1.0/src/Microsoft.AspNetCore.DataProtection.AzureStorage/AzureDataProtectionBuilderExtensions.cs" data-raw-source="[PersistKeysToAzureBlobStorage](https://github.com/aspnet/DataProtection/blob/rel/1.1.0/src/Microsoft.AspNetCore.DataProtection.AzureStorage/AzureDataProtectionBuilderExtensions.cs)" sourcefile="security/data-protection/implementation/key-storage-providers.md" sourcestartlinenumber="40" sourceendlinenumber="40">PersistKeysToAzureBlobStorage</a> overloads as shown below.</p>
<pre sourcefile="security/data-protection/implementation/key-storage-providers.md" sourcestartlinenumber="42" sourceendlinenumber="50"><code>public void ConfigureServices(IServiceCollection services)
{
    services.AddDataProtection()
        .PersistKeysToAzureBlobStorage(new Uri(&quot;&lt;blob URI including SAS token&gt;&quot;));

    services.AddMvc();
}
</code></pre><p sourcefile="security/data-protection/implementation/key-storage-providers.md" sourcestartlinenumber="52" sourceendlinenumber="52">See also the <a href="https://github.com/aspnet/DataProtection/blob/rel/1.1.0/samples/AzureBlob/Program.cs" data-raw-source="[Azure test code](https://github.com/aspnet/DataProtection/blob/rel/1.1.0/samples/AzureBlob/Program.cs)" sourcefile="security/data-protection/implementation/key-storage-providers.md" sourcestartlinenumber="52" sourceendlinenumber="52">Azure test code</a>.</p>
<p sourcefile="security/data-protection/implementation/key-storage-providers.md" sourcestartlinenumber="54" sourceendlinenumber="54">To configure on Redis, call one of the <a href="https://github.com/aspnet/DataProtection/blob/rel/1.1.0/src/Microsoft.AspNetCore.DataProtection.Redis/RedisDataProtectionBuilderExtensions.cs" data-raw-source="[PersistKeysToRedis](https://github.com/aspnet/DataProtection/blob/rel/1.1.0/src/Microsoft.AspNetCore.DataProtection.Redis/RedisDataProtectionBuilderExtensions.cs)" sourcefile="security/data-protection/implementation/key-storage-providers.md" sourcestartlinenumber="54" sourceendlinenumber="54">PersistKeysToRedis</a> overloads as shown below.</p>
<pre sourcefile="security/data-protection/implementation/key-storage-providers.md" sourcestartlinenumber="56" sourceendlinenumber="66"><code>public void ConfigureServices(IServiceCollection services)
{
    // Connect to Redis database.
    var redis = ConnectionMultiplexer.Connect(&quot;&lt;URI&gt;&quot;);
    services.AddDataProtection()
        .PersistKeysToRedis(redis, &quot;DataProtection-Keys&quot;);

    services.AddMvc();
}
</code></pre><p sourcefile="security/data-protection/implementation/key-storage-providers.md" sourcestartlinenumber="68" sourceendlinenumber="68">See the following for more information:</p>
<ul sourcefile="security/data-protection/implementation/key-storage-providers.md" sourcestartlinenumber="70" sourceendlinenumber="72">
<li sourcefile="security/data-protection/implementation/key-storage-providers.md" sourcestartlinenumber="70" sourceendlinenumber="70"><a href="https://github.com/StackExchange/StackExchange.Redis/blob/master/docs/Basics.md" data-raw-source="[StackExchange.Redis ConnectionMultiplexer](https://github.com/StackExchange/StackExchange.Redis/blob/master/docs/Basics.md)" sourcefile="security/data-protection/implementation/key-storage-providers.md" sourcestartlinenumber="70" sourceendlinenumber="70">StackExchange.Redis ConnectionMultiplexer</a></li>
<li sourcefile="security/data-protection/implementation/key-storage-providers.md" sourcestartlinenumber="71" sourceendlinenumber="71"><a href="https://docs.microsoft.com/azure/redis-cache/cache-dotnet-how-to-use-azure-redis-cache#connect-to-the-cache" data-raw-source="[Azure Redis Cache](https://docs.microsoft.com/azure/redis-cache/cache-dotnet-how-to-use-azure-redis-cache#connect-to-the-cache)" sourcefile="security/data-protection/implementation/key-storage-providers.md" sourcestartlinenumber="71" sourceendlinenumber="71">Azure Redis Cache</a></li>
<li sourcefile="security/data-protection/implementation/key-storage-providers.md" sourcestartlinenumber="72" sourceendlinenumber="72"><a href="https://github.com/aspnet/DataProtection/blob/rel/1.1.0/samples/Redis/Program.cs" data-raw-source="[Redis test code](https://github.com/aspnet/DataProtection/blob/rel/1.1.0/samples/Redis/Program.cs)" sourcefile="security/data-protection/implementation/key-storage-providers.md" sourcestartlinenumber="72" sourceendlinenumber="72">Redis test code</a>.</li>
</ul>
<h2 id="registry" sourcefile="security/data-protection/implementation/key-storage-providers.md" sourcestartlinenumber="74" sourceendlinenumber="74">Registry</h2>
<p sourcefile="security/data-protection/implementation/key-storage-providers.md" sourcestartlinenumber="76" sourceendlinenumber="76">Sometimes the app might not have write access to the file system. Consider a scenario where an app is running as a virtual service account (such as w3wp.exe&#39;s app pool identity). In these cases, the administrator may have provisioned a registry key that is appropriate ACLed for the service account identity. Call the <a href="https://github.com/aspnet/DataProtection/blob/rel/1.1.0/src/Microsoft.AspNetCore.DataProtection/DataProtectionBuilderExtensions.cs" data-raw-source="[PersistKeysToRegistry](https://github.com/aspnet/DataProtection/blob/rel/1.1.0/src/Microsoft.AspNetCore.DataProtection/DataProtectionBuilderExtensions.cs)" sourcefile="security/data-protection/implementation/key-storage-providers.md" sourcestartlinenumber="76" sourceendlinenumber="76">PersistKeysToRegistry</a> configuration routine as shown below. Provide a <code>RegistryKey</code> pointing to the location where cryptographic keys/values should be stored.</p>
<pre sourcefile="security/data-protection/implementation/key-storage-providers.md" sourcestartlinenumber="78" sourceendlinenumber="82"><code class="lang-csharp">   sc.AddDataProtection()
       // persist keys to a specific location in the system registry
       .PersistKeysToRegistry(Registry.CurrentUser.OpenSubKey(@&quot;SOFTWARE\Sample\keys&quot;));
</code></pre><p sourcefile="security/data-protection/implementation/key-storage-providers.md" sourcestartlinenumber="84" sourceendlinenumber="84">If you use the system registry as a persistence mechanism, consider using <a href="key-encryption-at-rest.html#data-protection-implementation-key-encryption-at-rest" data-raw-source="[Windows DPAPI](key-encryption-at-rest.md#data-protection-implementation-key-encryption-at-rest)" sourcefile="security/data-protection/implementation/key-storage-providers.md" sourcestartlinenumber="84" sourceendlinenumber="84">Windows DPAPI</a> to encrypt the keys at rest.</p>
<h2 id="custom-key-repository" sourcefile="security/data-protection/implementation/key-storage-providers.md" sourcestartlinenumber="86" sourceendlinenumber="86">Custom key repository</h2>
<p sourcefile="security/data-protection/implementation/key-storage-providers.md" sourcestartlinenumber="88" sourceendlinenumber="88">If the in-box mechanisms are not appropriate, the developer can specify their own key persistence mechanism by providing a custom <code>IXmlRepository</code>.</p>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                  <li>
                    <a href="https://github.com/aspnet/Docs/blob/w/riande/RP-EF/aspnetcore/security/data-protection/implementation/key-storage-providers.md/#L1" class="contribution-link">Improve this Doc</a>
                  </li>
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Copyright © 2015-2017 Microsoft<br>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../../../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../../../styles/docfx.js"></script>
    <script type="text/javascript" src="../../../styles/main.js"></script>
  </body>
</html>
