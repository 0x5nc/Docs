<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>View components </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="View components ">
    <meta name="generator" content="docfx 2.24.0.0">
    
    <link rel="shortcut icon" href="../../favicon.ico">
    <link rel="stylesheet" href="../../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../../styles/docfx.css">
    <link rel="stylesheet" href="../../styles/main.css">
    <meta property="docfx:navrel" content="/foo">
    <meta property="docfx:tocrel" content="../../toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../../index.html">
                <img id="logo" class="svg" src="../../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="mvc/views/view-components">
<h1 id="view-components" sourcefile="mvc/views/view-components.md" sourcestartlinenumber="15" sourceendlinenumber="15">View components</h1>

<p sourcefile="mvc/views/view-components.md" sourcestartlinenumber="17" sourceendlinenumber="17">By <a href="https://twitter.com/RickAndMSFT" data-raw-source="[Rick Anderson](https://twitter.com/RickAndMSFT)" sourcefile="mvc/views/view-components.md" sourcestartlinenumber="17" sourceendlinenumber="17">Rick Anderson</a></p>
<p sourcefile="mvc/views/view-components.md" sourcestartlinenumber="19" sourceendlinenumber="19"><a href="https://github.com/aspnet/Docs/tree/master/aspnetcore/mvc/views/view-components/sample" data-raw-source="[View or download sample code](https://github.com/aspnet/Docs/tree/master/aspnetcore/mvc/views/view-components/sample)" sourcefile="mvc/views/view-components.md" sourcestartlinenumber="19" sourceendlinenumber="19">View or download sample code</a></p>
<h2 id="introducing-view-components" sourcefile="mvc/views/view-components.md" sourcestartlinenumber="21" sourceendlinenumber="21">Introducing view components</h2>
<p sourcefile="mvc/views/view-components.md" sourcestartlinenumber="23" sourceendlinenumber="23">New to ASP.NET Core MVC, view components are similar to partial views, but they are much more powerful. View components donâ€™t use model binding, and only depend on the data you provide when calling into it. A view component:</p>
<ul sourcefile="mvc/views/view-components.md" sourcestartlinenumber="25" sourceendlinenumber="28">
<li sourcefile="mvc/views/view-components.md" sourcestartlinenumber="25" sourceendlinenumber="25">Renders a chunk rather than a whole response</li>
<li sourcefile="mvc/views/view-components.md" sourcestartlinenumber="26" sourceendlinenumber="26">Includes the same separation-of-concerns and testability benefits found between a controller and view</li>
<li sourcefile="mvc/views/view-components.md" sourcestartlinenumber="27" sourceendlinenumber="27">Can have parameters and business logic</li>
<li sourcefile="mvc/views/view-components.md" sourcestartlinenumber="28" sourceendlinenumber="28">Is typically invoked from a layout page</li>
</ul>
<p sourcefile="mvc/views/view-components.md" sourcestartlinenumber="30" sourceendlinenumber="30">View components are intended anywhere you have reusable rendering logic that is too complex for a partial view, such as:</p>
<ul sourcefile="mvc/views/view-components.md" sourcestartlinenumber="32" sourceendlinenumber="38">
<li sourcefile="mvc/views/view-components.md" sourcestartlinenumber="32" sourceendlinenumber="32">Dynamic navigation menus</li>
<li sourcefile="mvc/views/view-components.md" sourcestartlinenumber="33" sourceendlinenumber="33">Tag cloud (where it queries the database)</li>
<li sourcefile="mvc/views/view-components.md" sourcestartlinenumber="34" sourceendlinenumber="34">Login panel</li>
<li sourcefile="mvc/views/view-components.md" sourcestartlinenumber="35" sourceendlinenumber="35">Shopping cart</li>
<li sourcefile="mvc/views/view-components.md" sourcestartlinenumber="36" sourceendlinenumber="36">Recently published articles</li>
<li sourcefile="mvc/views/view-components.md" sourcestartlinenumber="37" sourceendlinenumber="37">Sidebar content on a typical blog</li>
<li sourcefile="mvc/views/view-components.md" sourcestartlinenumber="38" sourceendlinenumber="38">A login panel that would be rendered on every page and show either the links to log out or log in, depending on the log in state of the user</li>
</ul>
<p sourcefile="mvc/views/view-components.md" sourcestartlinenumber="40" sourceendlinenumber="40">A view component consists of two parts: the class (typically derived from <a href="https://docs.microsoft.com/aspnet/core/api/microsoft.aspnetcore.mvc.viewcomponent" data-raw-source="[ViewComponent](https://docs.microsoft.com/aspnet/core/api/microsoft.aspnetcore.mvc.viewcomponent)" sourcefile="mvc/views/view-components.md" sourcestartlinenumber="40" sourceendlinenumber="40">ViewComponent</a>) and the result it returns (typically a view). Like controllers, a view component can be a POCO, but most developers will want to take advantage of the methods and properties available by deriving from <code>ViewComponent</code>.</p>
<h2 id="creating-a-view-component" sourcefile="mvc/views/view-components.md" sourcestartlinenumber="42" sourceendlinenumber="42">Creating a view component</h2>
<p sourcefile="mvc/views/view-components.md" sourcestartlinenumber="44" sourceendlinenumber="44">This section contains the high-level requirements to create a view component. Later in the article, we&#39;ll examine each step in detail and create a view component.</p>
<h3 id="the-view-component-class" sourcefile="mvc/views/view-components.md" sourcestartlinenumber="46" sourceendlinenumber="46">The view component class</h3>
<p sourcefile="mvc/views/view-components.md" sourcestartlinenumber="48" sourceendlinenumber="48">A view component class can be created by any of the following:</p>
<ul sourcefile="mvc/views/view-components.md" sourcestartlinenumber="50" sourceendlinenumber="52">
<li sourcefile="mvc/views/view-components.md" sourcestartlinenumber="50" sourceendlinenumber="50">Deriving from <em>ViewComponent</em></li>
<li sourcefile="mvc/views/view-components.md" sourcestartlinenumber="51" sourceendlinenumber="51">Decorating a class with the <code>[ViewComponent]</code> attribute, or deriving from a class with the <code>[ViewComponent]</code> attribute</li>
<li sourcefile="mvc/views/view-components.md" sourcestartlinenumber="52" sourceendlinenumber="52">Creating a class where the name ends with the suffix <em>ViewComponent</em></li>
</ul>
<p sourcefile="mvc/views/view-components.md" sourcestartlinenumber="54" sourceendlinenumber="54">Like controllers, view components must be public, non-nested, and non-abstract classes. The view component name is the class name with the &quot;ViewComponent&quot; suffix removed. It can also be explicitly specified using the <code>ViewComponentAttribute.Name</code> property.</p>
<p sourcefile="mvc/views/view-components.md" sourcestartlinenumber="56" sourceendlinenumber="56">A view component class:</p>
<ul sourcefile="mvc/views/view-components.md" sourcestartlinenumber="58" sourceendlinenumber="60">
<li sourcefile="mvc/views/view-components.md" sourcestartlinenumber="58" sourceendlinenumber="58"><p sourcefile="mvc/views/view-components.md" sourcestartlinenumber="58" sourceendlinenumber="58">Fully supports constructor <a href="../../fundamentals/dependency-injection.html" data-raw-source="[dependency injection](../../fundamentals/dependency-injection.md)" sourcefile="mvc/views/view-components.md" sourcestartlinenumber="58" sourceendlinenumber="58">dependency injection</a></p>
</li>
<li sourcefile="mvc/views/view-components.md" sourcestartlinenumber="60" sourceendlinenumber="60"><p sourcefile="mvc/views/view-components.md" sourcestartlinenumber="60" sourceendlinenumber="60">Does not take part in the controller lifecycle, which means you can&#39;t use <a href="../controllers/filters.html" data-raw-source="[filters](../controllers/filters.md)" sourcefile="mvc/views/view-components.md" sourcestartlinenumber="60" sourceendlinenumber="60">filters</a> in a view component</p>
</li>
</ul>
<h3 id="view-component-methods" sourcefile="mvc/views/view-components.md" sourcestartlinenumber="62" sourceendlinenumber="62">View component methods</h3>
<p sourcefile="mvc/views/view-components.md" sourcestartlinenumber="64" sourceendlinenumber="64">A view component defines its logic in an <code>InvokeAsync</code> method that returns an <code>IViewComponentResult</code>. Parameters come directly from invocation of the view component, not from model binding. A view component never directly handles a request. Typically, a view component initializes a model and passes it to a view by calling the <code>View</code> method. In summary, view component methods:</p>
<ul sourcefile="mvc/views/view-components.md" sourcestartlinenumber="66" sourceendlinenumber="70">
<li sourcefile="mvc/views/view-components.md" sourcestartlinenumber="66" sourceendlinenumber="66">Define an <code>InvokeAsync</code> method that returns an <code>IViewComponentResult</code></li>
<li sourcefile="mvc/views/view-components.md" sourcestartlinenumber="67" sourceendlinenumber="67">Typically initializes a model and passes it to a view by calling the <code>ViewComponent</code> <code>View</code> method</li>
<li sourcefile="mvc/views/view-components.md" sourcestartlinenumber="68" sourceendlinenumber="68">Parameters come from the calling method, not HTTP, there is no model binding</li>
<li sourcefile="mvc/views/view-components.md" sourcestartlinenumber="69" sourceendlinenumber="69">Are not reachable directly as an HTTP endpoint, they are invoked from your code (usually in a view). A view component never handles a request</li>
<li sourcefile="mvc/views/view-components.md" sourcestartlinenumber="70" sourceendlinenumber="70">Are overloaded on the signature rather than any details from the current HTTP request</li>
</ul>
<h3 id="view-search-path" sourcefile="mvc/views/view-components.md" sourcestartlinenumber="72" sourceendlinenumber="72">View search path</h3>
<p sourcefile="mvc/views/view-components.md" sourcestartlinenumber="74" sourceendlinenumber="74">The runtime searches for the view in the following paths:</p>
<ul sourcefile="mvc/views/view-components.md" sourcestartlinenumber="76" sourceendlinenumber="77">
<li sourcefile="mvc/views/view-components.md" sourcestartlinenumber="76" sourceendlinenumber="76">Views/&lt;controller_name&gt;/Components/&lt;view_component_name&gt;/&lt;view_name&gt;</li>
<li sourcefile="mvc/views/view-components.md" sourcestartlinenumber="77" sourceendlinenumber="77">Views/Shared/Components/&lt;view_component_name&gt;/&lt;view_name&gt;</li>
</ul>
<p sourcefile="mvc/views/view-components.md" sourcestartlinenumber="79" sourceendlinenumber="79">The default view name for a view component is <em>Default</em>, which means your view file will typically be named <em>Default.cshtml</em>. You can specify a different view name when creating the view component result or when calling the <code>View</code> method.</p>
<p sourcefile="mvc/views/view-components.md" sourcestartlinenumber="81" sourceendlinenumber="81">We recommend you name the view file <em>Default.cshtml</em> and use the <em>Views/Shared/Components/&lt;view_component_name&gt;/&lt;view_name&gt;</em> path. The <code>PriorityList</code> view component used in this sample uses <em>Views/Shared/Components/PriorityList/Default.cshtml</em> for the view component view.</p>
<h2 id="invoking-a-view-component" sourcefile="mvc/views/view-components.md" sourcestartlinenumber="83" sourceendlinenumber="83">Invoking a view component</h2>
<p sourcefile="mvc/views/view-components.md" sourcestartlinenumber="85" sourceendlinenumber="85">To use the view component, call the following inside a view:</p>
<pre sourcefile="mvc/views/view-components.md" sourcestartlinenumber="87" sourceendlinenumber="89"><code class="lang-html">@Component.InvokeAsync(&quot;Name of view component&quot;, &lt;anonymous type containing parameters&gt;)
</code></pre><p sourcefile="mvc/views/view-components.md" sourcestartlinenumber="91" sourceendlinenumber="91">The parameters will be passed to the <code>InvokeAsync</code> method. The <code>PriorityList</code> view component developed in the article is invoked from the <em>Views/Todo/Index.cshtml</em> view file. In the following, the <code>InvokeAsync</code> method is called with two parameters:</p>
<pre sourcefile="mvc/views/view-components.md" sourcestartlinenumber="93" sourceendlinenumber="93"><code class="lang-html" name="Main">@await Component.InvokeAsync(&quot;PriorityList&quot;, new { maxPriority = 4, isDone = true })
</code></pre><h2 id="invoking-a-view-component-as-a-tag-helper" sourcefile="mvc/views/view-components.md" sourcestartlinenumber="95" sourceendlinenumber="95">Invoking a view component as a Tag Helper</h2>
<p sourcefile="mvc/views/view-components.md" sourcestartlinenumber="97" sourceendlinenumber="97">For ASP.NET Core 1.1 and higher, you can invoke a view component as a <a class="xref" href="tag-helpers/intro.html" data-raw-source="[Tag Helper](xref:mvc/views/tag-helpers/intro)" sourcefile="mvc/views/view-components.md" sourcestartlinenumber="97" sourceendlinenumber="97">Tag Helper</a>:</p>
<pre sourcefile="mvc/views/view-components.md" sourcestartlinenumber="99" sourceendlinenumber="99"><code class="lang-html" name="Main">&lt;vc:priority-list max-priority=&quot;2&quot; is-done=&quot;false&quot;&gt;
&lt;/vc:priority-list&gt;
</code></pre><p sourcefile="mvc/views/view-components.md" sourcestartlinenumber="101" sourceendlinenumber="101">Pascal-cased class and method parameters for Tag Helpers are translated into their <a href="https://stackoverflow.com/questions/11273282/whats-the-name-for-dash-separated-case/12273101" data-raw-source="[lower kebab case](https://stackoverflow.com/questions/11273282/whats-the-name-for-dash-separated-case/12273101)" sourcefile="mvc/views/view-components.md" sourcestartlinenumber="101" sourceendlinenumber="101">lower kebab case</a>. The Tag Helper to invoke a view component uses the <code>&lt;vc&gt;&lt;/vc&gt;</code> element. The view component is specified as follows:</p>
<pre sourcefile="mvc/views/view-components.md" sourcestartlinenumber="103" sourceendlinenumber="108"><code class="lang-html">&lt;vc:[view-component-name]
  parameter1=&quot;parameter1 value&quot;
  parameter2=&quot;parameter2 value&quot;&gt;
&lt;/vc:[view-component-name]&gt;
</code></pre><p sourcefile="mvc/views/view-components.md" sourcestartlinenumber="110" sourceendlinenumber="110">Note: In order to use a View Component as a Tag Helper, you must register the assembly containing the View Component using the <code>@addTagHelper</code> directive. For example, if your View Component is in an assembly called &quot;MyWebApp&quot;, add the following directive to the <code>_ViewImports.cshtml</code> file:</p>
<pre sourcefile="mvc/views/view-components.md" sourcestartlinenumber="112" sourceendlinenumber="114"><code class="lang-csharp">@addTagHelper *, MyWebApp
</code></pre><p sourcefile="mvc/views/view-components.md" sourcestartlinenumber="116" sourceendlinenumber="116">You can register a View Component as a Tag Helper to any file that references the View Component. See <a class="xref" href="tag-helpers/intro.html#managing-tag-helper-scope" data-raw-source="[Managing Tag Helper Scope](xref:mvc/views/tag-helpers/intro#managing-tag-helper-scope)" sourcefile="mvc/views/view-components.md" sourcestartlinenumber="116" sourceendlinenumber="116">Managing Tag Helper Scope</a> for more information on how to register Tag Helpers.</p>
<p sourcefile="mvc/views/view-components.md" sourcestartlinenumber="118" sourceendlinenumber="118">The <code>InvokeAsync</code> method used in this tutorial:</p>
<pre sourcefile="mvc/views/view-components.md" sourcestartlinenumber="120" sourceendlinenumber="120"><code class="lang-html" name="Main">@await Component.InvokeAsync(&quot;PriorityList&quot;, new { maxPriority = 4, isDone = true })
</code></pre><p sourcefile="mvc/views/view-components.md" sourcestartlinenumber="122" sourceendlinenumber="122">In Tag Helper markup:</p>
<pre sourcefile="mvc/views/view-components.md" sourcestartlinenumber="124" sourceendlinenumber="124"><code class="lang-html" name="Main">&lt;vc:priority-list max-priority=&quot;2&quot; is-done=&quot;false&quot;&gt;
&lt;/vc:priority-list&gt;
</code></pre><p sourcefile="mvc/views/view-components.md" sourcestartlinenumber="126" sourceendlinenumber="126">In the sample above, the <code>PriorityList</code> view component becomes <code>priority-list</code>. The parameters to the view component are passed as attributes in lower kebab case.</p>
<h3 id="invoking-a-view-component-directly-from-a-controller" sourcefile="mvc/views/view-components.md" sourcestartlinenumber="128" sourceendlinenumber="128">Invoking a view component directly from a controller</h3>
<p sourcefile="mvc/views/view-components.md" sourcestartlinenumber="130" sourceendlinenumber="130">View components are typically invoked from a view, but you can invoke them directly from a controller method. While view components do not define endpoints like controllers, you can easily implement a controller action that returns the content of a <code>ViewComponentResult</code>.</p>
<p sourcefile="mvc/views/view-components.md" sourcestartlinenumber="132" sourceendlinenumber="132">In this example, the view component is called directly from the controller:</p>
<pre sourcefile="mvc/views/view-components.md" sourcestartlinenumber="134" sourceendlinenumber="134"><code class="lang-csharp" name="Main">public IActionResult IndexVC()
{
    return ViewComponent(&quot;PriorityList&quot;, new { maxPriority = 3, isDone = false });
}
</code></pre><h2 id="walkthrough-creating-a-simple-view-component" sourcefile="mvc/views/view-components.md" sourcestartlinenumber="136" sourceendlinenumber="136">Walkthrough: Creating a simple view component</h2>
<p sourcefile="mvc/views/view-components.md" sourcestartlinenumber="138" sourceendlinenumber="138"><a href="https://github.com/aspnet/Docs/tree/master/aspnetcore/mvc/views/view-components/sample" data-raw-source="[Download](https://github.com/aspnet/Docs/tree/master/aspnetcore/mvc/views/view-components/sample)" sourcefile="mvc/views/view-components.md" sourcestartlinenumber="138" sourceendlinenumber="138">Download</a>, build and test the starter code. It&#39;s a simple project with a <code>Todo</code> controller that displays a list of <em>Todo</em> items.</p>
<p sourcefile="mvc/views/view-components.md" sourcestartlinenumber="140" sourceendlinenumber="140"><img src="view-components/_static/2dos.png" alt="List of ToDos" sourcefile="mvc/views/view-components.md" sourcestartlinenumber="140" sourceendlinenumber="140"></p>
<h3 id="add-a-viewcomponent-class" sourcefile="mvc/views/view-components.md" sourcestartlinenumber="142" sourceendlinenumber="142">Add a ViewComponent class</h3>
<p sourcefile="mvc/views/view-components.md" sourcestartlinenumber="144" sourceendlinenumber="144">Create a <em>ViewComponents</em> folder and add the following <code>PriorityListViewComponent</code> class:</p>
<pre sourcefile="mvc/views/view-components.md" sourcestartlinenumber="146" sourceendlinenumber="146"><code class="lang-csharp" name="Main">using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using ViewComponentSample.Models;

namespace ViewComponentSample.ViewComponents
{
    public class PriorityListViewComponent : ViewComponent
    {
        private readonly ToDoContext db;

        public PriorityListViewComponent(ToDoContext context)
        {
            db = context;
        }

        public async Task&lt;IViewComponentResult&gt; InvokeAsync(
        int maxPriority, bool isDone)
        {
            var items = await GetItemsAsync(maxPriority, isDone);
            return View(items);
        }
        private Task&lt;List&lt;TodoItem&gt;&gt; GetItemsAsync(int maxPriority, bool isDone)
        {
            return db.ToDo.Where(x =&gt; x.IsDone == isDone &amp;&amp;
                                 x.Priority &lt;= maxPriority).ToListAsync();
        }
    }
}
</code></pre><p sourcefile="mvc/views/view-components.md" sourcestartlinenumber="148" sourceendlinenumber="148">Notes on the code:</p>
<ul sourcefile="mvc/views/view-components.md" sourcestartlinenumber="150" sourceendlinenumber="162">
<li sourcefile="mvc/views/view-components.md" sourcestartlinenumber="150" sourceendlinenumber="150">View component classes can be contained in <strong>any</strong> folder in the project.</li>
<li sourcefile="mvc/views/view-components.md" sourcestartlinenumber="151" sourceendlinenumber="151">Because the class name PriorityList<strong>ViewComponent</strong> ends with the suffix <strong>ViewComponent</strong>, the runtime will use the string &quot;PriorityList&quot; when referencing the class component from a view. I&#39;ll explain that in more detail later.</li>
<li sourcefile="mvc/views/view-components.md" sourcestartlinenumber="152" sourceendlinenumber="157"><p sourcefile="mvc/views/view-components.md" sourcestartlinenumber="152" sourceendlinenumber="152">The <code>[ViewComponent]</code> attribute can change the name used to reference a view component. For example, we could have named the class <code>XYZ</code> and applied the <code>ViewComponent</code> attribute:</p>
<pre sourcefile="mvc/views/view-components.md" sourcestartlinenumber="154" sourceendlinenumber="157"><code class="lang-csharp">[ViewComponent(Name = &quot;PriorityList&quot;)]
   public class XYZ : ViewComponent
</code></pre></li>
<li sourcefile="mvc/views/view-components.md" sourcestartlinenumber="159" sourceendlinenumber="159"><p sourcefile="mvc/views/view-components.md" sourcestartlinenumber="159" sourceendlinenumber="159">The <code>[ViewComponent]</code> attribute above tells the view component selector to use the name <code>PriorityList</code> when looking for the views associated with the component, and to use the string &quot;PriorityList&quot; when referencing the class component from a view. I&#39;ll explain that in more detail later.</p>
</li>
<li sourcefile="mvc/views/view-components.md" sourcestartlinenumber="160" sourceendlinenumber="160">The component uses <a href="../../fundamentals/dependency-injection.html" data-raw-source="[dependency injection](../../fundamentals/dependency-injection.md)" sourcefile="mvc/views/view-components.md" sourcestartlinenumber="160" sourceendlinenumber="160">dependency injection</a> to make the data context available.</li>
<li sourcefile="mvc/views/view-components.md" sourcestartlinenumber="161" sourceendlinenumber="161"><code>InvokeAsync</code> exposes a method which can be called from a view, and it can take an arbitrary number of arguments.</li>
<li sourcefile="mvc/views/view-components.md" sourcestartlinenumber="162" sourceendlinenumber="162">The <code>InvokeAsync</code> method returns the set of <code>ToDo</code> items that satisfy the <code>isDone</code> and <code>maxPriority</code> parameters.</li>
</ul>
<h3 id="create-the-view-component-razor-view" sourcefile="mvc/views/view-components.md" sourcestartlinenumber="164" sourceendlinenumber="164">Create the view component Razor view</h3>
<ul sourcefile="mvc/views/view-components.md" sourcestartlinenumber="166" sourceendlinenumber="179">
<li sourcefile="mvc/views/view-components.md" sourcestartlinenumber="166" sourceendlinenumber="166"><p sourcefile="mvc/views/view-components.md" sourcestartlinenumber="166" sourceendlinenumber="166">Create the <em>Views/Shared/Components</em> folder. This folder <strong>must</strong> be named <em>Components</em>.</p>
</li>
<li sourcefile="mvc/views/view-components.md" sourcestartlinenumber="168" sourceendlinenumber="168"><p sourcefile="mvc/views/view-components.md" sourcestartlinenumber="168" sourceendlinenumber="168">Create the <em>Views/Shared/Components/PriorityList</em> folder. This folder name must match the name of the view component class, or the name of the class minus the suffix (if we followed convention and used the <em>ViewComponent</em> suffix in the class name). If you used the <code>ViewComponent</code> attribute, the class name would need to match the attribute designation.</p>
</li>
<li sourcefile="mvc/views/view-components.md" sourcestartlinenumber="170" sourceendlinenumber="175"><p sourcefile="mvc/views/view-components.md" sourcestartlinenumber="170" sourceendlinenumber="170">Create a <em>Views/Shared/Components/PriorityList/Default.cshtml</em> Razor view:</p>
<pre sourcefile="mvc/views/view-components.md" sourcestartlinenumber="171" sourceendlinenumber="171"><code class="lang-html" name="Main">@model IEnumerable&lt;ViewComponentSample.Models.TodoItem&gt;

&lt;h3&gt;Priority Items&lt;/h3&gt;
&lt;ul&gt;
    @foreach (var todo in Model)
    {
        &lt;li&gt;@todo.Name&lt;/li&gt;
    }
&lt;/ul&gt;
</code></pre><p sourcefile="mvc/views/view-components.md" sourcestartlinenumber="173" sourceendlinenumber="173"> The Razor view takes a list of <code>TodoItem</code> and displays them. If the view component <code>InvokeAsync</code> method doesn&#39;t pass the name of the view (as in our sample), <em>Default</em> is used for the view name by convention. Later in the tutorial, I&#39;ll show you how to pass the name of the view. To override the default styling for a specific controller, add a view to the controller-specific view folder (for example <em>Views/Todo/Components/PriorityList/Default.cshtml)</em>.</p>
<p sourcefile="mvc/views/view-components.md" sourcestartlinenumber="175" sourceendlinenumber="175">  If the view component is controller-specific, you can add it to the controller-specific folder (<em>Views/Todo/Components/PriorityList/Default.cshtml</em>).</p>
</li>
<li sourcefile="mvc/views/view-components.md" sourcestartlinenumber="177" sourceendlinenumber="179"><p sourcefile="mvc/views/view-components.md" sourcestartlinenumber="177" sourceendlinenumber="177">Add a <code>div</code> containing a call to the priority list component to the bottom of the <em>Views/Todo/index.cshtml</em> file:</p>
<pre sourcefile="mvc/views/view-components.md" sourcestartlinenumber="179" sourceendlinenumber="179"><code class="lang-html" name="Main">&lt;/table&gt;
&lt;div &gt;
    @await Component.InvokeAsync(&quot;PriorityList&quot;, new { maxPriority = 2, isDone = false })
&lt;/div&gt;
</code></pre></li>
</ul>
<p sourcefile="mvc/views/view-components.md" sourcestartlinenumber="181" sourceendlinenumber="181">The markup <code>@await Component.InvokeAsync</code> shows the syntax for calling view components. The first argument is the name of the component we want to invoke or call. Subsequent parameters are passed to the component. <code>InvokeAsync</code> can take an arbitrary number of arguments.</p>
<p sourcefile="mvc/views/view-components.md" sourcestartlinenumber="183" sourceendlinenumber="183">Test the app. The following image shows the ToDo list and the priority items:</p>
<p sourcefile="mvc/views/view-components.md" sourcestartlinenumber="185" sourceendlinenumber="185"><img src="view-components/_static/pi.png" alt="todo list and priority items" sourcefile="mvc/views/view-components.md" sourcestartlinenumber="185" sourceendlinenumber="185"></p>
<p sourcefile="mvc/views/view-components.md" sourcestartlinenumber="187" sourceendlinenumber="187">You can also call the view component directly from the controller:</p>
<pre sourcefile="mvc/views/view-components.md" sourcestartlinenumber="189" sourceendlinenumber="189"><code class="lang-csharp" name="Main">public IActionResult IndexVC()
{
    return ViewComponent(&quot;PriorityList&quot;, new { maxPriority = 3, isDone = false });
}
</code></pre><p sourcefile="mvc/views/view-components.md" sourcestartlinenumber="191" sourceendlinenumber="191"><img src="view-components/_static/indexvc.png" alt="priority items from IndexVC action" sourcefile="mvc/views/view-components.md" sourcestartlinenumber="191" sourceendlinenumber="191"></p>
<h3 id="specifying-a-view-name" sourcefile="mvc/views/view-components.md" sourcestartlinenumber="193" sourceendlinenumber="193">Specifying a view name</h3>
<p sourcefile="mvc/views/view-components.md" sourcestartlinenumber="195" sourceendlinenumber="195">A complex view component might need to specify a non-default view under some conditions. The following code shows how to specify the &quot;PVC&quot; view  from the <code>InvokeAsync</code> method. Update the <code>InvokeAsync</code> method in the <code>PriorityListViewComponent</code> class.</p>
<pre sourcefile="mvc/views/view-components.md" sourcestartlinenumber="197" sourceendlinenumber="197"><code class="lang-csharp" name="Main" highlight-lines="4,5,6,7,8,9">public async Task&lt;IViewComponentResult&gt; InvokeAsync(
    int maxPriority, bool isDone)
{
    string MyView = &quot;Default&quot;;
    // If asking for all completed tasks, render with the &quot;PVC&quot; view.
    if (maxPriority &gt; 3 &amp;&amp; isDone == true)
    {
        MyView = &quot;PVC&quot;;
    }
    var items = await GetItemsAsync(maxPriority, isDone);
    return View(MyView, items);
}
</code></pre><p sourcefile="mvc/views/view-components.md" sourcestartlinenumber="199" sourceendlinenumber="199">Copy the <em>Views/Shared/Components/PriorityList/Default.cshtml</em> file to a view named <em>Views/Shared/Components/PriorityList/PVC.cshtml</em>. Add a heading to indicate the PVC view is being used.</p>
<pre sourcefile="mvc/views/view-components.md" sourcestartlinenumber="201" sourceendlinenumber="201"><code class="lang-html" name="Main" highlight-lines="3">@model IEnumerable&lt;ViewComponentSample.Models.TodoItem&gt;

&lt;h2&gt; PVC Named Priority Component View&lt;/h2&gt;
&lt;h4&gt;@ViewBag.PriorityMessage&lt;/h4&gt;
&lt;ul&gt;
    @foreach (var todo in Model)
    {
        &lt;li&gt;@todo.Name&lt;/li&gt;
    }
&lt;/ul&gt;
</code></pre><p sourcefile="mvc/views/view-components.md" sourcestartlinenumber="203" sourceendlinenumber="203">Update <em>Views/TodoList/Index.cshtml</em>:</p>
<!-- Views/TodoList/Index.cshtml is never imported, so change to test tutorial -->
<pre sourcefile="mvc/views/view-components.md" sourcestartlinenumber="207" sourceendlinenumber="207"><code class="lang-html" name="Main">@await Component.InvokeAsync(&quot;PriorityList&quot;, new { maxPriority = 4, isDone = true })
</code></pre><p sourcefile="mvc/views/view-components.md" sourcestartlinenumber="209" sourceendlinenumber="209">Run the app and verify PVC view.</p>
<p sourcefile="mvc/views/view-components.md" sourcestartlinenumber="211" sourceendlinenumber="211"><img src="view-components/_static/pvc.png" alt="Priority View Component" sourcefile="mvc/views/view-components.md" sourcestartlinenumber="211" sourceendlinenumber="211"></p>
<p sourcefile="mvc/views/view-components.md" sourcestartlinenumber="213" sourceendlinenumber="213">If the PVC view is not rendered, verify you are calling the view component with a priority of 4 or higher.</p>
<h3 id="examine-the-view-path" sourcefile="mvc/views/view-components.md" sourcestartlinenumber="215" sourceendlinenumber="215">Examine the view path</h3>
<ul sourcefile="mvc/views/view-components.md" sourcestartlinenumber="217" sourceendlinenumber="233">
<li sourcefile="mvc/views/view-components.md" sourcestartlinenumber="217" sourceendlinenumber="217">Change the priority parameter to three or less so the priority view is not returned.</li>
<li sourcefile="mvc/views/view-components.md" sourcestartlinenumber="218" sourceendlinenumber="218">Temporarily rename the <em>Views/Todo/Components/PriorityList/Default.cshtml</em> to <em>1Default.cshtml</em>.</li>
<li sourcefile="mvc/views/view-components.md" sourcestartlinenumber="219" sourceendlinenumber="229"><p sourcefile="mvc/views/view-components.md" sourcestartlinenumber="219" sourceendlinenumber="219">Test the app, you&#39;ll get the following error:</p>
 <!-- literal_block {"ids": [], "xml:space": "preserve"} -->

<pre sourcefile="mvc/views/view-components.md" sourcestartlinenumber="223" sourceendlinenumber="229"><code>An unhandled exception occurred while processing the request.
InvalidOperationException: The view &#39;Components/PriorityList/Default&#39; was not found. The following locations were searched:
/Views/ToDo/Components/PriorityList/Default.cshtml
/Views/Shared/Components/PriorityList/Default.cshtml
EnsureSuccessful
</code></pre></li>
<li sourcefile="mvc/views/view-components.md" sourcestartlinenumber="231" sourceendlinenumber="231"><p sourcefile="mvc/views/view-components.md" sourcestartlinenumber="231" sourceendlinenumber="231">Copy <em>Views/Todo/Components/PriorityList/1Default.cshtml</em> to <em>Views/Shared/Components/PriorityList/Default.cshtml</em>.</p>
</li>
<li sourcefile="mvc/views/view-components.md" sourcestartlinenumber="232" sourceendlinenumber="232">Add some markup to the <em>Shared</em> Todo view component view to indicate the view is from the <em>Shared</em> folder.</li>
<li sourcefile="mvc/views/view-components.md" sourcestartlinenumber="233" sourceendlinenumber="233">Test the <strong>Shared</strong> component view.</li>
</ul>
<p sourcefile="mvc/views/view-components.md" sourcestartlinenumber="235" sourceendlinenumber="235"><img src="view-components/_static/shared.png" alt="ToDo output with Shared component view" sourcefile="mvc/views/view-components.md" sourcestartlinenumber="235" sourceendlinenumber="235"></p>
<h3 id="avoiding-magic-strings" sourcefile="mvc/views/view-components.md" sourcestartlinenumber="237" sourceendlinenumber="237">Avoiding magic strings</h3>
<p sourcefile="mvc/views/view-components.md" sourcestartlinenumber="239" sourceendlinenumber="239">If you want compile time safety, you can replace the hard-coded view component name with the class name. Create the view component without the &quot;ViewComponent&quot; suffix:</p>
<pre sourcefile="mvc/views/view-components.md" sourcestartlinenumber="241" sourceendlinenumber="241"><code class="lang-csharp" name="Main" highlight-lines="10">using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using ViewComponentSample.Models;

namespace ViewComponentSample.ViewComponents
{
    public class PriorityList : ViewComponent
    {
        private readonly ToDoContext db;

        public PriorityList(ToDoContext context)
        {
            db = context;
        }

        public async Task&lt;IViewComponentResult&gt; InvokeAsync(
        int maxPriority, bool isDone)
        {
            var items = await GetItemsAsync(maxPriority, isDone);
            return View(items);
        }
        private Task&lt;List&lt;TodoItem&gt;&gt; GetItemsAsync(int maxPriority, bool isDone)
        {
            return db.ToDo.Where(x =&gt; x.IsDone == isDone &amp;&amp;
                                 x.Priority &lt;= maxPriority).ToListAsync();
        }
    }
}
</code></pre><p sourcefile="mvc/views/view-components.md" sourcestartlinenumber="243" sourceendlinenumber="243">Add a <code>using</code> statement to your Razor view file, and use the <code>nameof</code> operator:</p>
<pre sourcefile="mvc/views/view-components.md" sourcestartlinenumber="245" sourceendlinenumber="245"><code class="lang-html" name="Main">@using ViewComponentSample.Models
@using ViewComponentSample.ViewComponents
@model IEnumerable&lt;TodoItem&gt;

&lt;h2&gt;ToDo nameof&lt;/h2&gt;
&lt;!-- Markup removed for brevity.  --&gt;
    }
&lt;/table&gt;

&lt;div&gt;

    @await Component.InvokeAsync(nameof(PriorityList), new { maxPriority = 4, isDone = true })
&lt;/div&gt;
</code></pre><h2 id="additional-resources" sourcefile="mvc/views/view-components.md" sourcestartlinenumber="247" sourceendlinenumber="247">Additional Resources</h2>
<ul sourcefile="mvc/views/view-components.md" sourcestartlinenumber="249" sourceendlinenumber="249">
<li sourcefile="mvc/views/view-components.md" sourcestartlinenumber="249" sourceendlinenumber="249"><a href="dependency-injection.html" data-raw-source="[Dependency injection into views](dependency-injection.md)" sourcefile="mvc/views/view-components.md" sourcestartlinenumber="249" sourceendlinenumber="249">Dependency injection into views</a></li>
</ul>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                  <li>
                    <a href="https://github.com/aspnet/Docs/blob/w/riande/RP-EF/aspnetcore/mvc/views/view-components.md/#L1" class="contribution-link">Improve this Doc</a>
                  </li>
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Copyright Â© 2015-2017 Microsoft<br>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../../styles/docfx.js"></script>
    <script type="text/javascript" src="../../styles/main.js"></script>
  </body>
</html>
