<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Dependency Injection in ASP.NET Core </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Dependency Injection in ASP.NET Core ">
    <meta name="generator" content="docfx 2.24.0.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <meta property="docfx:navrel" content="/foo">
    <meta property="docfx:tocrel" content="../toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="fundamentals/dependency-injection">
<h1 id="introduction-to-dependency-injection-in-aspnet-core" sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="16" sourceendlinenumber="16">Introduction to Dependency Injection in ASP.NET Core</h1>

<p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="18" sourceendlinenumber="18"><a name="fundamentals-dependency-injection"></a></p>
<p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="20" sourceendlinenumber="20">By <a href="https://ardalis.com/" data-raw-source="[Steve Smith](https://ardalis.com/)" sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="20" sourceendlinenumber="20">Steve Smith</a> and <a href="https://scottaddie.com" data-raw-source="[Scott Addie](https://scottaddie.com)" sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="20" sourceendlinenumber="20">Scott Addie</a></p>
<p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="22" sourceendlinenumber="22">ASP.NET Core is designed from the ground up to support and leverage dependency injection. ASP.NET Core applications can leverage built-in framework services by having them injected into methods in the Startup class, and application services can be configured for injection as well. The default services container provided by ASP.NET Core provides a minimal feature set and is not intended to replace other containers.</p>
<p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="24" sourceendlinenumber="24"><a href="https://github.com/aspnet/Docs/tree/master/aspnetcore/fundamentals/dependency-injection/sample" data-raw-source="[View or download sample code](https://github.com/aspnet/Docs/tree/master/aspnetcore/fundamentals/dependency-injection/sample)" sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="24" sourceendlinenumber="24">View or download sample code</a></p>
<h2 id="what-is-dependency-injection" sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="26" sourceendlinenumber="26">What is Dependency Injection?</h2>
<p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="28" sourceendlinenumber="28">Dependency injection (DI) is a technique for achieving loose coupling between objects and their collaborators, or dependencies. Rather than directly instantiating collaborators, or using static references, the objects a class needs in order to perform its actions are provided to the class in some fashion. Most often, classes will declare their dependencies via their constructor, allowing them to follow the <a href="http://deviq.com/explicit-dependencies-principle/" data-raw-source="[Explicit Dependencies Principle](http://deviq.com/explicit-dependencies-principle/)" sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="28" sourceendlinenumber="28">Explicit Dependencies Principle</a>. This approach is known as &quot;constructor injection&quot;.</p>
<p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="30" sourceendlinenumber="30">When classes are designed with DI in mind, they are more loosely coupled because they do not have direct, hard-coded dependencies on their collaborators. This follows the <a href="http://deviq.com/dependency-inversion-principle/" data-raw-source="[Dependency Inversion Principle](http://deviq.com/dependency-inversion-principle/)" sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="30" sourceendlinenumber="30">Dependency Inversion Principle</a>, which states that <em>&quot;high level modules should not depend on low level modules; both should depend on abstractions.&quot;</em> Instead of referencing specific implementations, classes request abstractions (typically <code>interfaces</code>) which are provided to them when the class is constructed. Extracting dependencies into interfaces and providing implementations of these interfaces as parameters is also an example of the <a href="http://deviq.com/strategy-design-pattern/" data-raw-source="[Strategy design pattern](http://deviq.com/strategy-design-pattern/)" sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="30" sourceendlinenumber="30">Strategy design pattern</a>.</p>
<p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="32" sourceendlinenumber="32">When a system is designed to use DI, with many classes requesting their dependencies via their constructor (or properties), it&#39;s helpful to have a class dedicated to creating these classes with their associated dependencies. These classes are referred to as <em>containers</em>, or more specifically, <a href="http://deviq.com/inversion-of-control/" data-raw-source="[Inversion of Control (IoC)](http://deviq.com/inversion-of-control/)" sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="32" sourceendlinenumber="32">Inversion of Control (IoC)</a> containers or Dependency Injection (DI) containers. A container is essentially a factory that is responsible for providing instances of types that are requested from it. If a given type has declared that it has dependencies, and the container has been configured to provide the dependency types, it will create the dependencies as part of creating the requested instance. In this way, complex dependency graphs can be provided to classes without the need for any hard-coded object construction. In addition to creating objects with their dependencies, containers typically manage object lifetimes within the application.</p>
<p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="34" sourceendlinenumber="34">ASP.NET Core includes a simple built-in container (represented by the <code>IServiceProvider</code> interface) that supports constructor injection by default, and ASP.NET makes certain services available through DI. ASP.NET&#39;s container refers to the types it manages as <em>services</em>. Throughout the rest of this article, <em>services</em> will refer to types that are managed by ASP.NET Core&#39;s IoC container. You configure the built-in container&#39;s services in the <code>ConfigureServices</code> method in your application&#39;s <code>Startup</code> class.</p>
<div class="NOTE" sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="36" sourceendlinenumber="36"><h5>Note</h5><p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="37" sourceendlinenumber="37">Martin Fowler has written an extensive article on <a href="https://www.martinfowler.com/articles/injection.html" data-raw-source="[Inversion of Control Containers and the Dependency Injection Pattern](https://www.martinfowler.com/articles/injection.html)" sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="37" sourceendlinenumber="37">Inversion of Control Containers and the Dependency Injection Pattern</a>. Microsoft Patterns and Practices also has a great description of <a href="https://msdn.microsoft.com/library/hh323705.aspx" data-raw-source="[Dependency Injection](https://msdn.microsoft.com/library/hh323705.aspx)" sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="37" sourceendlinenumber="37">Dependency Injection</a>.</p>
</div>
<div class="NOTE" sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="39" sourceendlinenumber="39"><h5>Note</h5><p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="40" sourceendlinenumber="40">This article covers Dependency Injection as it applies to all ASP.NET applications. Dependency Injection within MVC controllers is covered in <a href="../mvc/controllers/dependency-injection.html" data-raw-source="[Dependency Injection and Controllers](../mvc/controllers/dependency-injection.md)" sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="40" sourceendlinenumber="40">Dependency Injection and Controllers</a>.</p>
</div>
<h3 id="constructor-injection-behavior" sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="42" sourceendlinenumber="42">Constructor Injection Behavior</h3>
<p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="44" sourceendlinenumber="44">Constructor injection requires that the constructor in question be <em>public</em>. Otherwise, your app will throw an <code>InvalidOperationException</code>:</p>
<blockquote sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="46" sourceendlinenumber="46"><p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="46" sourceendlinenumber="46">A suitable constructor for type &#39;YourType&#39; could not be located. Ensure the type is concrete and services are registered for all parameters of a public constructor.</p>
</blockquote>
<p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="49" sourceendlinenumber="49">Constructor injection requires that only one applicable constructor exist. Constructor overloads are supported, but only one overload can exist whose arguments can all be fulfilled by dependency injection. If more than one exists, your app will throw an <code>InvalidOperationException</code>:</p>
<blockquote sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="51" sourceendlinenumber="51"><p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="51" sourceendlinenumber="51">Multiple constructors accepting all given argument types have been found in type &#39;YourType&#39;. There should only be one applicable constructor.</p>
</blockquote>
<p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="53" sourceendlinenumber="53">Constructors can accept arguments that are not provided by dependency injection, but these must support default values. For example:</p>
<pre sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="55" sourceendlinenumber="69"><code class="lang-csharp">// throws InvalidOperationException: Unable to resolve service for type &#39;System.String&#39;...
public CharactersController(ICharacterRepository characterRepository, string title)
{
    _characterRepository = characterRepository;
    _title = title;
}

// runs without error
public CharactersController(ICharacterRepository characterRepository, string title = &quot;Characters&quot;)
{
    _characterRepository = characterRepository;
    _title = title;
}
</code></pre><h2 id="using-framework-provided-services" sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="71" sourceendlinenumber="71">Using Framework-Provided Services</h2>
<p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="73" sourceendlinenumber="73">The <code>ConfigureServices</code> method in the <code>Startup</code> class is responsible for defining the services the application will use, including platform features like Entity Framework Core and ASP.NET Core MVC. Initially, the <code>IServiceCollection</code> provided to <code>ConfigureServices</code> has the following services defined (depending on <a class="xref" href="hosting.html" data-raw-source="[how the host was configured](xref:fundamentals/hosting)" sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="73" sourceendlinenumber="73">how the host was configured</a>):</p>
<table sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="75" sourceendlinenumber="90">
<thead>
<tr>
<th>Service Type</th>
<th>Lifetime</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://docs.microsoft.com/aspnet/core/api/microsoft.aspnetcore.hosting.ihostingenvironment" data-raw-source="[Microsoft.AspNetCore.Hosting.IHostingEnvironment](https://docs.microsoft.com/aspnet/core/api/microsoft.aspnetcore.hosting.ihostingenvironment)" sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="77" sourceendlinenumber="77">Microsoft.AspNetCore.Hosting.IHostingEnvironment</a></td>
<td>Singleton</td>
</tr>
<tr>
<td><a href="https://docs.microsoft.com/aspnet/core/api/microsoft.extensions.logging.iloggerfactory" data-raw-source="[Microsoft.Extensions.Logging.ILoggerFactory](https://docs.microsoft.com/aspnet/core/api/microsoft.extensions.logging.iloggerfactory)" sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="78" sourceendlinenumber="78">Microsoft.Extensions.Logging.ILoggerFactory</a></td>
<td>Singleton</td>
</tr>
<tr>
<td><a href="https://docs.microsoft.com/aspnet/core/api/microsoft.extensions.logging.ilogger" data-raw-source="[Microsoft.Extensions.Logging.ILogger&amp;lt;T&amp;gt;](https://docs.microsoft.com/aspnet/core/api/microsoft.extensions.logging.ilogger)" sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="79" sourceendlinenumber="79">Microsoft.Extensions.Logging.ILogger&lt;T&gt;</a></td>
<td>Singleton</td>
</tr>
<tr>
<td><a href="https://docs.microsoft.com/aspnet/core/api/microsoft.aspnetcore.hosting.builder.iapplicationbuilderfactory" data-raw-source="[Microsoft.AspNetCore.Hosting.Builder.IApplicationBuilderFactory](https://docs.microsoft.com/aspnet/core/api/microsoft.aspnetcore.hosting.builder.iapplicationbuilderfactory)" sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="80" sourceendlinenumber="80">Microsoft.AspNetCore.Hosting.Builder.IApplicationBuilderFactory</a></td>
<td>Transient</td>
</tr>
<tr>
<td><a href="https://docs.microsoft.com/aspnet/core/api/microsoft.aspnetcore.http.ihttpcontextfactory" data-raw-source="[Microsoft.AspNetCore.Http.IHttpContextFactory](https://docs.microsoft.com/aspnet/core/api/microsoft.aspnetcore.http.ihttpcontextfactory)" sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="81" sourceendlinenumber="81">Microsoft.AspNetCore.Http.IHttpContextFactory</a></td>
<td>Transient</td>
</tr>
<tr>
<td><a href="https://docs.microsoft.com/aspnet/core/api/microsoft.extensions.options.ioptions-1" data-raw-source="[Microsoft.Extensions.Options.IOptions&amp;lt;T&amp;gt;](https://docs.microsoft.com/aspnet/core/api/microsoft.extensions.options.ioptions-1)" sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="82" sourceendlinenumber="82">Microsoft.Extensions.Options.IOptions&lt;T&gt;</a></td>
<td>Singleton</td>
</tr>
<tr>
<td><a href="https://docs.microsoft.com/dotnet/core/api/system.diagnostics.diagnosticsource" data-raw-source="[System.Diagnostics.DiagnosticSource](https://docs.microsoft.com/dotnet/core/api/system.diagnostics.diagnosticsource)" sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="83" sourceendlinenumber="83">System.Diagnostics.DiagnosticSource</a></td>
<td>Singleton</td>
</tr>
<tr>
<td><a href="https://docs.microsoft.com/dotnet/core/api/system.diagnostics.diagnosticlistener" data-raw-source="[System.Diagnostics.DiagnosticListener](https://docs.microsoft.com/dotnet/core/api/system.diagnostics.diagnosticlistener)" sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="84" sourceendlinenumber="84">System.Diagnostics.DiagnosticListener</a></td>
<td>Singleton</td>
</tr>
<tr>
<td><a href="https://docs.microsoft.com/aspnet/core/api/microsoft.aspnetcore.hosting.istartupfilter" data-raw-source="[Microsoft.AspNetCore.Hosting.IStartupFilter](https://docs.microsoft.com/aspnet/core/api/microsoft.aspnetcore.hosting.istartupfilter)" sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="85" sourceendlinenumber="85">Microsoft.AspNetCore.Hosting.IStartupFilter</a></td>
<td>Transient</td>
</tr>
<tr>
<td><a href="https://docs.microsoft.com/aspnet/core/api/microsoft.extensions.objectpool.objectpoolprovider" data-raw-source="[Microsoft.Extensions.ObjectPool.ObjectPoolProvider](https://docs.microsoft.com/aspnet/core/api/microsoft.extensions.objectpool.objectpoolprovider)" sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="86" sourceendlinenumber="86">Microsoft.Extensions.ObjectPool.ObjectPoolProvider</a></td>
<td>Singleton</td>
</tr>
<tr>
<td><a href="https://docs.microsoft.com/aspnet/core/api/microsoft.extensions.options.iconfigureoptions-1" data-raw-source="[Microsoft.Extensions.Options.IConfigureOptions&amp;lt;T&amp;gt;](https://docs.microsoft.com/aspnet/core/api/microsoft.extensions.options.iconfigureoptions-1)" sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="87" sourceendlinenumber="87">Microsoft.Extensions.Options.IConfigureOptions&lt;T&gt;</a></td>
<td>Transient</td>
</tr>
<tr>
<td><a href="https://docs.microsoft.com/aspnet/core/api/microsoft.aspnetcore.hosting.server.iserver" data-raw-source="[Microsoft.AspNetCore.Hosting.Server.IServer](https://docs.microsoft.com/aspnet/core/api/microsoft.aspnetcore.hosting.server.iserver)" sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="88" sourceendlinenumber="88">Microsoft.AspNetCore.Hosting.Server.IServer</a></td>
<td>Singleton</td>
</tr>
<tr>
<td><a href="https://docs.microsoft.com/aspnet/core/api/microsoft.aspnetcore.hosting.istartup" data-raw-source="[Microsoft.AspNetCore.Hosting.IStartup](https://docs.microsoft.com/aspnet/core/api/microsoft.aspnetcore.hosting.istartup)" sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="89" sourceendlinenumber="89">Microsoft.AspNetCore.Hosting.IStartup</a></td>
<td>Singleton</td>
</tr>
<tr>
<td><a href="https://docs.microsoft.com/aspnet/core/api/microsoft.aspnetcore.hosting.iapplicationlifetime" data-raw-source="[Microsoft.AspNetCore.Hosting.IApplicationLifetime](https://docs.microsoft.com/aspnet/core/api/microsoft.aspnetcore.hosting.iapplicationlifetime)" sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="90" sourceendlinenumber="90">Microsoft.AspNetCore.Hosting.IApplicationLifetime</a></td>
<td>Singleton</td>
</tr>
</tbody>
</table>
<p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="92" sourceendlinenumber="92">Below is an example of how to add additional services to the container using a number of extension methods like <code>AddDbContext</code>, <code>AddIdentity</code>, and <code>AddMvc</code>.</p>
<pre sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="94" sourceendlinenumber="94"><code class="lang-csharp" name="Main" highlight-lines="5-6,8-10,12">// This method gets called by the runtime. Use this method to add services to the container.
public void ConfigureServices(IServiceCollection services)
{
    // Add framework services.
    services.AddDbContext&lt;ApplicationDbContext&gt;(options =&gt;
        options.UseSqlServer(Configuration.GetConnectionString(&quot;DefaultConnection&quot;)));

    services.AddIdentity&lt;ApplicationUser, IdentityRole&gt;()
        .AddEntityFrameworkStores&lt;ApplicationDbContext&gt;()
        .AddDefaultTokenProviders();

    services.AddMvc();

    // Add application services.
    services.AddTransient&lt;IEmailSender, AuthMessageSender&gt;();
    services.AddTransient&lt;ISmsSender, AuthMessageSender&gt;();
}

</code></pre><p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="96" sourceendlinenumber="96">The features and middleware provided by ASP.NET, such as MVC, follow a convention of using a single Add<em>ServiceName</em> extension method to register all of the services required by that feature.</p>
<div class="TIP" sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="98" sourceendlinenumber="98"><h5>Tip</h5><p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="99" sourceendlinenumber="99">You can request certain framework-provided services within <code>Startup</code> methods through their parameter lists - see <a href="startup.html" data-raw-source="[Application Startup](startup.md)" sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="99" sourceendlinenumber="99">Application Startup</a> for more details.</p>
</div>
<h2 id="registering-your-own-services" sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="101" sourceendlinenumber="101">Registering Your Own Services</h2>
<p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="103" sourceendlinenumber="103">You can register your own application services as follows. The first generic type represents the type (typically an interface) that will be requested from the container. The second generic type represents the concrete type that will be instantiated by the container and used to fulfill such requests.</p>
<pre sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="105" sourceendlinenumber="105"><code class="lang-csharp" name="Main">services.AddTransient&lt;IEmailSender, AuthMessageSender&gt;();
services.AddTransient&lt;ISmsSender, AuthMessageSender&gt;();
</code></pre><div class="NOTE" sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="107" sourceendlinenumber="107"><h5>Note</h5><p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="108" sourceendlinenumber="108">Each <code>services.Add&lt;ServiceName&gt;</code> extension method adds (and potentially configures) services. For example, <code>services.AddMvc()</code> adds the services MVC requires. It&#39;s recommended that you follow this convention, placing extension methods in the <code>Microsoft.Extensions.DependencyInjection</code> namespace, to encapsulate groups of service registrations.</p>
</div>
<p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="110" sourceendlinenumber="110">The <code>AddTransient</code> method is used to map abstract types to concrete services that are instantiated separately for every object that requires it. This is known as the service&#39;s <em>lifetime</em>, and additional lifetime options are described below. It is important to choose an appropriate lifetime for each of the services you register. Should a new instance of the service be provided to each class that requests it? Should one instance be used throughout a given web request? Or should a single instance be used for the lifetime of the application?</p>
<p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="112" sourceendlinenumber="112">In the sample for this article, there is a simple controller that displays character names, called <code>CharactersController</code>. Its <code>Index</code> method displays the current list of characters that have been stored in the application, and initializes the collection with a handful of characters if none exist. Note that although this application uses Entity Framework Core and the <code>ApplicationDbContext</code> class for its persistence, none of that is apparent in the controller. Instead, the specific data access mechanism has been abstracted behind an interface, <code>ICharacterRepository</code>, which follows the <a href="http://deviq.com/repository-pattern/" data-raw-source="[repository pattern](http://deviq.com/repository-pattern/)" sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="112" sourceendlinenumber="112">repository pattern</a>. An instance of <code>ICharacterRepository</code> is requested via the constructor and assigned to a private field, which is then used to access characters as necessary.</p>
<pre sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="114" sourceendlinenumber="114"><code class="lang-csharp" name="Main" highlight-lines="3,5,6,7,8,14,21-27">public class CharactersController : Controller
{
    private readonly ICharacterRepository _characterRepository;

    public CharactersController(ICharacterRepository characterRepository)
    {
        _characterRepository = characterRepository;
    }

    // GET: /characters/
    public IActionResult Index()
    {
        PopulateCharactersIfNoneExist();
        var characters = _characterRepository.ListAll();

        return View(characters);
    }
    
    private void PopulateCharactersIfNoneExist()
    {
        if (!_characterRepository.ListAll().Any())
        {
            _characterRepository.Add(new Character(&quot;Darth Maul&quot;));
            _characterRepository.Add(new Character(&quot;Darth Vader&quot;));
            _characterRepository.Add(new Character(&quot;Yoda&quot;));
            _characterRepository.Add(new Character(&quot;Mace Windu&quot;));
        }
    }
}
</code></pre><p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="116" sourceendlinenumber="116">The <code>ICharacterRepository</code> defines the two methods the controller needs to work with <code>Character</code> instances.</p>
<pre sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="118" sourceendlinenumber="118"><code class="lang-csharp" name="Main" highlight-lines="8,9">using System.Collections.Generic;
using DependencyInjectionSample.Models;

namespace DependencyInjectionSample.Interfaces
{
    public interface ICharacterRepository
    {
        IEnumerable&lt;Character&gt; ListAll();
        void Add(Character character);
    }
}
</code></pre><p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="120" sourceendlinenumber="120">This interface is in turn implemented by a concrete type, <code>CharacterRepository</code>, that is used at runtime.</p>
<div class="NOTE" sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="122" sourceendlinenumber="122"><h5>Note</h5><p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="123" sourceendlinenumber="123">The way DI is used with the <code>CharacterRepository</code> class is a general model you can follow for all of your application services, not just in &quot;repositories&quot; or data access classes.</p>
</div>
<pre sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="125" sourceendlinenumber="125"><code class="lang-csharp" name="Main" highlight-lines="9,11,12,13,14">using System.Collections.Generic;
using System.Linq;
using DependencyInjectionSample.Interfaces;

namespace DependencyInjectionSample.Models
{
    public class CharacterRepository : ICharacterRepository
    {
        private readonly ApplicationDbContext _dbContext;

        public CharacterRepository(ApplicationDbContext dbContext)
        {
            _dbContext = dbContext;
        }

        public IEnumerable&lt;Character&gt; ListAll()
        {
            return _dbContext.Characters.AsEnumerable();
        }

        public void Add(Character character)
        {
            _dbContext.Characters.Add(character);
            _dbContext.SaveChanges();
        }
    }
}
</code></pre><p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="127" sourceendlinenumber="127">Note that <code>CharacterRepository</code> requests an <code>ApplicationDbContext</code> in its constructor. It is not unusual for dependency injection to be used in a chained fashion like this, with each requested dependency in turn requesting its own dependencies. The container is responsible for resolving all of the dependencies in the graph and returning the fully resolved service.</p>
<div class="NOTE" sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="129" sourceendlinenumber="129"><h5>Note</h5><p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="130" sourceendlinenumber="130">Creating the requested object, and all of the objects it requires, and all of the objects those require, is sometimes referred to as an <em>object graph</em>. Likewise, the collective set of dependencies that must be resolved is typically referred to as a <em>dependency tree</em> or <em>dependency graph</em>.</p>
</div>
<p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="132" sourceendlinenumber="132">In this case, both <code>ICharacterRepository</code> and in turn <code>ApplicationDbContext</code> must be registered with the services container in <code>ConfigureServices</code> in <code>Startup</code>. <code>ApplicationDbContext</code> is configured with the call to the extension method <code>AddDbContext&lt;T&gt;</code>. The following code shows the registration of the <code>CharacterRepository</code> type.</p>
<pre sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="134" sourceendlinenumber="134"><code class="lang-csharp" name="Main" highlight-lines="3-5,11">public void ConfigureServices(IServiceCollection services)
{
    services.AddDbContext&lt;ApplicationDbContext&gt;(options =&gt;
        options.UseInMemoryDatabase()
    );

    // Add framework services.
    services.AddMvc();

    // Register application services.
    services.AddScoped&lt;ICharacterRepository, CharacterRepository&gt;();
    services.AddTransient&lt;IOperationTransient, Operation&gt;();
    services.AddScoped&lt;IOperationScoped, Operation&gt;();
    services.AddSingleton&lt;IOperationSingleton, Operation&gt;();
    services.AddSingleton&lt;IOperationSingletonInstance&gt;(new Operation(Guid.Empty));
    services.AddTransient&lt;OperationService, OperationService&gt;();
}
</code></pre><p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="136" sourceendlinenumber="136">Entity Framework contexts should be added to the services container using the <code>Scoped</code> lifetime. This is taken care of automatically if you use the helper methods as shown above. Repositories that will make use of Entity Framework should use the same lifetime.</p>
<div class="WARNING" sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="138" sourceendlinenumber="138"><h5>Warning</h5><p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="139" sourceendlinenumber="139">The main danger to be wary of is resolving a <code>Scoped</code> service from a singleton. It&#39;s likely in such a case that the service will have incorrect state when processing subsequent requests.</p>
</div>
<p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="141" sourceendlinenumber="141">Services that have dependencies should register them in the container. If a service&#39;s constructor requires a primitive, such as a <code>string</code>, this can be injected by using the <a href="configuration.html" data-raw-source="[options pattern and configuration](configuration.md)" sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="141" sourceendlinenumber="141">options pattern and configuration</a>.</p>
<h2 id="service-lifetimes-and-registration-options" sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="143" sourceendlinenumber="143">Service Lifetimes and Registration Options</h2>
<p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="145" sourceendlinenumber="145">ASP.NET services can be configured with the following lifetimes:</p>
<p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="147" sourceendlinenumber="147"><strong>Transient</strong></p>
<p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="149" sourceendlinenumber="149">Transient lifetime services are created each time they are requested. This lifetime works best for lightweight, stateless services.</p>
<p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="151" sourceendlinenumber="151"><strong>Scoped</strong></p>
<p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="153" sourceendlinenumber="153">Scoped lifetime services are created once per request.</p>
<p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="155" sourceendlinenumber="155"><strong>Singleton</strong></p>
<p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="157" sourceendlinenumber="157">Singleton lifetime services are created the first time they are requested (or when <code>ConfigureServices</code> is run if you specify an instance there) and then every subsequent request will use the same instance. If your application requires singleton behavior, allowing the services container to manage the service&#39;s lifetime is recommended instead of implementing the singleton design pattern and managing your object&#39;s lifetime in the class yourself.</p>
<p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="159" sourceendlinenumber="159">Services can be registered with the container in several ways. We have already seen how to register a service implementation with a given type by specifying the concrete type to use. In addition, a factory can be specified, which will then be used to create the instance on demand. The third approach is to directly specify the instance of the type to use, in which case the container will never attempt to create an instance (nor will it dispose of the instance).</p>
<p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="161" sourceendlinenumber="161">To demonstrate the difference between these lifetime and registration options, consider a simple interface that represents one or more tasks as an <em>operation</em> with a unique identifier, <code>OperationId</code>. Depending on how we configure the lifetime for this service, the container will provide either the same or different instances of the service to the requesting class. To make it clear which lifetime is being requested, we will create one type per lifetime option:</p>
<pre sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="163" sourceendlinenumber="163"><code class="lang-csharp" name="Main" highlight-lines="5-8">using System;

namespace DependencyInjectionSample.Interfaces
{
    public interface IOperation
    {
        Guid OperationId { get; }
    }

    public interface IOperationTransient : IOperation
    {
    }
    public interface IOperationScoped : IOperation
    {
    }
    public interface IOperationSingleton : IOperation
    {
    }
    public interface IOperationSingletonInstance : IOperation
    {
    }
}
</code></pre><p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="165" sourceendlinenumber="165">We implement these interfaces using a single class, <code>Operation</code>, that accepts a <code>Guid</code> in its constructor, or uses a new <code>Guid</code> if none is provided.</p>
<p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="167" sourceendlinenumber="167">Next, in <code>ConfigureServices</code>, each type is added to the container according to its named lifetime:</p>
<pre sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="169" sourceendlinenumber="169"><code class="lang-csharp" name="Main">    services.AddScoped&lt;ICharacterRepository, CharacterRepository&gt;();
    services.AddTransient&lt;IOperationTransient, Operation&gt;();
    services.AddScoped&lt;IOperationScoped, Operation&gt;();
    services.AddSingleton&lt;IOperationSingleton, Operation&gt;();
    services.AddSingleton&lt;IOperationSingletonInstance&gt;(new Operation(Guid.Empty));
    services.AddTransient&lt;OperationService, OperationService&gt;();
}
</code></pre><p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="171" sourceendlinenumber="171">Note that the <code>IOperationSingletonInstance</code> service is using a specific instance with a known ID of <code>Guid.Empty</code> so it will be clear when this type is in use (its Guid will be all zeroes). We have also registered an <code>OperationService</code> that depends on each of the other <code>Operation</code> types, so that it will be clear within a request whether this service is getting the same instance as the controller, or a new one, for each operation type. All this service does is expose its dependencies as properties, so they can be displayed in the view.</p>
<pre sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="173" sourceendlinenumber="173"><code class="lang-csharp" name="Main">using DependencyInjectionSample.Interfaces;

namespace DependencyInjectionSample.Services
{
    public class OperationService
    {
        public IOperationTransient TransientOperation { get; }
        public IOperationScoped ScopedOperation { get; }
        public IOperationSingleton SingletonOperation { get; }
        public IOperationSingletonInstance SingletonInstanceOperation { get; }

        public OperationService(IOperationTransient transientOperation,
            IOperationScoped scopedOperation,
            IOperationSingleton singletonOperation,
            IOperationSingletonInstance instanceOperation)
        {
            TransientOperation = transientOperation;
            ScopedOperation = scopedOperation;
            SingletonOperation = singletonOperation;
            SingletonInstanceOperation = instanceOperation;
        }
    }
}
</code></pre><p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="175" sourceendlinenumber="175">To demonstrate the object lifetimes within and between separate individual requests to the application, the sample includes an <code>OperationsController</code> that requests each kind of <code>IOperation</code> type as well as an <code>OperationService</code>. The <code>Index</code> action then displays all of the controller&#39;s and service&#39;s <code>OperationId</code> values.</p>
<pre sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="177" sourceendlinenumber="177"><code class="lang-csharp" name="Main">using DependencyInjectionSample.Interfaces;
using DependencyInjectionSample.Services;
using Microsoft.AspNetCore.Mvc;

namespace DependencyInjectionSample.Controllers
{
    public class OperationsController : Controller
    {
        private readonly OperationService _operationService;
        private readonly IOperationTransient _transientOperation;
        private readonly IOperationScoped _scopedOperation;
        private readonly IOperationSingleton _singletonOperation;
        private readonly IOperationSingletonInstance _singletonInstanceOperation;

        public OperationsController(OperationService operationService,
            IOperationTransient transientOperation,
            IOperationScoped scopedOperation,
            IOperationSingleton singletonOperation,
            IOperationSingletonInstance singletonInstanceOperation)
        {
            _operationService = operationService;
            _transientOperation = transientOperation;
            _scopedOperation = scopedOperation;
            _singletonOperation = singletonOperation;
            _singletonInstanceOperation = singletonInstanceOperation;
        }

        public IActionResult Index()
        {
            // viewbag contains controller-requested services
            ViewBag.Transient = _transientOperation;
            ViewBag.Scoped = _scopedOperation;
            ViewBag.Singleton = _singletonOperation;
            ViewBag.SingletonInstance = _singletonInstanceOperation;
            
            // operation service has its own requested services
            ViewBag.Service = _operationService;
            return View();
        }
    }
}
</code></pre><p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="179" sourceendlinenumber="179">Now two separate requests are made to this controller action:</p>
<p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="181" sourceendlinenumber="181"><img src="dependency-injection/_static/lifetimes_request1.png" alt="The Operations view of the Dependency Injection Sample web application running in Microsoft Edge showing Operation ID values (GUID&#39;s) for Transient, Scoped, Singleton, and Instance Controller and Operation Service Operations on the first request." sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="181" sourceendlinenumber="181"></p>
<p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="183" sourceendlinenumber="183"><img src="dependency-injection/_static/lifetimes_request2.png" alt="The operations view showing the Operation ID values for a second request." sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="183" sourceendlinenumber="183"></p>
<p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="185" sourceendlinenumber="185">Observe which of the <code>OperationId</code> values vary within a request, and between requests.</p>
<ul sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="187" sourceendlinenumber="191">
<li sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="187" sourceendlinenumber="187"><p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="187" sourceendlinenumber="187"><em>Transient</em> objects are always different; a new instance is provided to every controller and every service.</p>
</li>
<li sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="189" sourceendlinenumber="189"><p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="189" sourceendlinenumber="189"><em>Scoped</em> objects are the same within a request, but different across different requests</p>
</li>
<li sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="191" sourceendlinenumber="191"><p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="191" sourceendlinenumber="191"><em>Singleton</em> objects are the same for every object and every request (regardless of whether an instance is provided in <code>ConfigureServices</code>)</p>
</li>
</ul>
<h2 id="request-services" sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="193" sourceendlinenumber="193">Request Services</h2>
<p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="195" sourceendlinenumber="195">The services available within an ASP.NET request from <code>HttpContext</code> are exposed through the <code>RequestServices</code> collection.</p>
<p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="197" sourceendlinenumber="197"><img src="dependency-injection/_static/request-services.png" alt="HttpContext Request Services Intellisense contextual dialog stating that Request Services gets or sets the IServiceProvider that provides access to the request&#39;s service container." sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="197" sourceendlinenumber="197"></p>
<p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="199" sourceendlinenumber="199">Request Services represent the services you configure and request as part of your application. When your objects specify dependencies, these are satisfied by the types found in <code>RequestServices</code>, not <code>ApplicationServices</code>.</p>
<p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="201" sourceendlinenumber="201">Generally, you shouldn&#39;t use these properties directly, preferring instead to request the types your classes you require via your class&#39;s constructor, and letting the framework inject these dependencies. This yields classes that are easier to test (see <a href="../testing/index.html" data-raw-source="[Testing](../testing/index.md)" sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="201" sourceendlinenumber="201">Testing</a>) and are more loosely coupled.</p>
<div class="NOTE" sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="203" sourceendlinenumber="203"><h5>Note</h5><p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="204" sourceendlinenumber="204">Prefer requesting dependencies as constructor parameters to accessing the <code>RequestServices</code> collection.</p>
</div>
<h2 id="designing-your-services-for-dependency-injection" sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="206" sourceendlinenumber="206">Designing Your Services For Dependency Injection</h2>
<p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="208" sourceendlinenumber="208">You should design your services to use dependency injection to get their collaborators. This means avoiding the use of stateful static method calls (which result in a code smell known as <a href="http://deviq.com/static-cling/" data-raw-source="[static cling](http://deviq.com/static-cling/)" sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="208" sourceendlinenumber="208">static cling</a>) and the direct instantiation of dependent classes within your services. It may help to remember the phrase, <a href="https://ardalis.com/new-is-glue" data-raw-source="[New is Glue](https://ardalis.com/new-is-glue)" sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="208" sourceendlinenumber="208">New is Glue</a>, when choosing whether to instantiate a type or to request it via dependency injection. By following the <a href="http://deviq.com/solid/" data-raw-source="[SOLID Principles of Object Oriented Design](http://deviq.com/solid/)" sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="208" sourceendlinenumber="208">SOLID Principles of Object Oriented Design</a>, your classes will naturally tend to be small, well-factored, and easily tested.</p>
<p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="210" sourceendlinenumber="210">What if you find that your classes tend to have way too many dependencies being injected? This is generally a sign that your class is trying to do too much, and is probably violating SRP - the <a href="http://deviq.com/single-responsibility-principle/" data-raw-source="[Single Responsibility Principle](http://deviq.com/single-responsibility-principle/)" sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="210" sourceendlinenumber="210">Single Responsibility Principle</a>. See if you can refactor the class by moving some of its responsibilities into a new class. Keep in mind that your <code>Controller</code> classes should be focused on UI concerns, so business rules and data access implementation details should be kept in classes appropriate to these <a href="http://deviq.com/separation-of-concerns/" data-raw-source="[separate concerns](http://deviq.com/separation-of-concerns/)" sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="210" sourceendlinenumber="210">separate concerns</a>.</p>
<p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="212" sourceendlinenumber="212">With regards to data access specifically, you can inject the <code>DbContext</code> into your controllers (assuming you&#39;ve added EF to the services container in <code>ConfigureServices</code>). Some developers prefer to use a repository interface to the database rather than injecting the <code>DbContext</code> directly. Using an interface to encapsulate the data access logic in one place can minimize how many places you will have to change when your database changes.</p>
<h3 id="disposing-of-services" sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="214" sourceendlinenumber="214">Disposing of services</h3>
<p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="216" sourceendlinenumber="216">The container will call <code>Dispose</code> for <code>IDisposable</code> types it creates. However, if you add an instance to the container yourself, it will not be disposed.</p>
<p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="218" sourceendlinenumber="218">Example:</p>
<pre sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="220" sourceendlinenumber="236"><code class="lang-csharp">// Services implement IDisposable:
public class Service1 : IDisposable {}
public class Service2 : IDisposable {}
public class Service3 : IDisposable {}

public void ConfigureServices(IServiceCollection services)
{
    // container will create the instance(s) of these types and will dispose them
    services.AddScoped&lt;Service1&gt;();
    services.AddSingleton&lt;Service2&gt;();

    // container did not create instance so it will NOT dispose it
    services.AddSingleton&lt;Service3&gt;(new Service3());
    services.AddSingleton(new Service3());
}
</code></pre><div class="NOTE" sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="238" sourceendlinenumber="238"><h5>Note</h5><p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="239" sourceendlinenumber="239">In version 1.0, the container called dispose on <em>all</em> <code>IDisposable</code> objects, including those it did not create.</p>
</div>
<h2 id="replacing-the-default-services-container" sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="241" sourceendlinenumber="241">Replacing the default services container</h2>
<p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="243" sourceendlinenumber="243">The built-in services container is meant to serve the basic needs of the framework and most consumer applications built on it. However, developers can replace the built-in container with their preferred container. The <code>ConfigureServices</code> method typically returns <code>void</code>, but if its signature is changed to return <code>IServiceProvider</code>, a different container can be configured and returned. There are many IOC containers available for .NET. In this example, the <a href="https://autofac.org/" data-raw-source="[Autofac](https://autofac.org/)" sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="243" sourceendlinenumber="243">Autofac</a> package is used.</p>
<p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="245" sourceendlinenumber="245">First, install the appropriate container package(s):</p>
<ul sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="247" sourceendlinenumber="248">
<li sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="247" sourceendlinenumber="247"><code>Autofac</code></li>
<li sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="248" sourceendlinenumber="248"><code>Autofac.Extensions.DependencyInjection</code></li>
</ul>
<p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="250" sourceendlinenumber="250">Next, configure the container in <code>ConfigureServices</code> and return an <code>IServiceProvider</code>:</p>
<pre sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="252" sourceendlinenumber="265"><code class="lang-csharp">public IServiceProvider ConfigureServices(IServiceCollection services)
{
    services.AddMvc();
    // Add other framework services

    // Add Autofac
    var containerBuilder = new ContainerBuilder();
    containerBuilder.RegisterModule&lt;DefaultModule&gt;();
    containerBuilder.Populate(services);
    var container = containerBuilder.Build();
    return new AutofacServiceProvider(container);
}
</code></pre><div class="NOTE" sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="267" sourceendlinenumber="267"><h5>Note</h5><p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="268" sourceendlinenumber="268">When using a third-party DI container, you must change <code>ConfigureServices</code> so that it returns <code>IServiceProvider</code> instead of <code>void</code>.</p>
</div>
<p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="270" sourceendlinenumber="270">Finally, configure Autofac as normal in <code>DefaultModule</code>:</p>
<pre sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="272" sourceendlinenumber="280"><code class="lang-csharp">public class DefaultModule : Module
{
    protected override void Load(ContainerBuilder builder)
    {
        builder.RegisterType&lt;CharacterRepository&gt;().As&lt;ICharacterRepository&gt;();
    }
}
</code></pre><p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="282" sourceendlinenumber="282">At runtime, Autofac will be used to resolve types and inject dependencies. <a href="http://docs.autofac.org/en/latest/integration/aspnetcore.html" data-raw-source="[Learn more about using Autofac and ASP.NET Core](http://docs.autofac.org/en/latest/integration/aspnetcore.html)" sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="282" sourceendlinenumber="282">Learn more about using Autofac and ASP.NET Core</a>.</p>
<h3 id="thread-safety" sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="284" sourceendlinenumber="284">Thread safety</h3>
<p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="286" sourceendlinenumber="286">Singleton services need to be thread safe. If a singleton service has a dependency on a transient service, the transient service may also need to be thread safe depending how it’s used by the singleton.</p>
<h2 id="recommendations" sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="288" sourceendlinenumber="288">Recommendations</h2>
<p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="290" sourceendlinenumber="290">When working with dependency injection, keep the following recommendations in mind:</p>
<ul sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="292" sourceendlinenumber="300">
<li sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="292" sourceendlinenumber="292"><p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="292" sourceendlinenumber="292">DI is for objects that have complex dependencies. Controllers, services, adapters, and repositories are all examples of objects that might be added to DI.</p>
</li>
<li sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="294" sourceendlinenumber="294"><p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="294" sourceendlinenumber="294">Avoid storing data and configuration directly in DI. For example, a user&#39;s shopping cart shouldn&#39;t typically be added to the services container. Configuration should use the <a href="configuration.html#options-config-objects" data-raw-source="[Options Model](configuration.md#options-config-objects)" sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="294" sourceendlinenumber="294">Options Model</a>. Similarly, avoid &quot;data holder&quot; objects that only exist to allow access to some other object. It&#39;s better to request the actual item needed via DI, if possible.</p>
</li>
<li sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="296" sourceendlinenumber="296"><p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="296" sourceendlinenumber="296">Avoid static access to services.</p>
</li>
<li sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="298" sourceendlinenumber="298"><p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="298" sourceendlinenumber="298">Avoid service location in your application code.</p>
</li>
<li sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="300" sourceendlinenumber="300"><p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="300" sourceendlinenumber="300">Avoid static access to <code>HttpContext</code>.</p>
</li>
</ul>
<div class="NOTE" sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="302" sourceendlinenumber="302"><h5>Note</h5><p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="303" sourceendlinenumber="303">Like all sets of recommendations, you may encounter situations where ignoring one is required. We have found exceptions to be rare -- mostly very special cases within the framework itself.</p>
</div>
<p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="305" sourceendlinenumber="305">Remember, dependency injection is an <em>alternative</em> to static/global object access patterns. You will not be able to realize the benefits of DI if you mix it with static object access.</p>
<h2 id="additional-resources" sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="307" sourceendlinenumber="307">Additional Resources</h2>
<ul sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="309" sourceendlinenumber="319">
<li sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="309" sourceendlinenumber="309"><p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="309" sourceendlinenumber="309"><a href="startup.html" data-raw-source="[Application Startup](startup.md)" sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="309" sourceendlinenumber="309">Application Startup</a></p>
</li>
<li sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="311" sourceendlinenumber="311"><p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="311" sourceendlinenumber="311"><a href="../testing/index.html" data-raw-source="[Testing](../testing/index.md)" sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="311" sourceendlinenumber="311">Testing</a></p>
</li>
<li sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="313" sourceendlinenumber="313"><p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="313" sourceendlinenumber="313"><a href="https://msdn.microsoft.com/magazine/mt703433.aspx" data-raw-source="[Writing Clean Code in ASP.NET Core with Dependency Injection (MSDN)](https://msdn.microsoft.com/magazine/mt703433.aspx)" sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="313" sourceendlinenumber="313">Writing Clean Code in ASP.NET Core with Dependency Injection (MSDN)</a></p>
</li>
<li sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="315" sourceendlinenumber="315"><p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="315" sourceendlinenumber="315"><a href="https://blogs.msdn.microsoft.com/nblumhardt/2008/12/26/container-managed-application-design-prelude-where-does-the-container-belong/" data-raw-source="[Container-Managed Application Design, Prelude: Where does the Container Belong?](https://blogs.msdn.microsoft.com/nblumhardt/2008/12/26/container-managed-application-design-prelude-where-does-the-container-belong/)" sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="315" sourceendlinenumber="315">Container-Managed Application Design, Prelude: Where does the Container Belong?</a></p>
</li>
<li sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="317" sourceendlinenumber="317"><p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="317" sourceendlinenumber="317"><a href="http://deviq.com/explicit-dependencies-principle/" data-raw-source="[Explicit Dependencies Principle](http://deviq.com/explicit-dependencies-principle/)" sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="317" sourceendlinenumber="317">Explicit Dependencies Principle</a></p>
</li>
<li sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="319" sourceendlinenumber="319"><p sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="319" sourceendlinenumber="319"><a href="https://www.martinfowler.com/articles/injection.html" data-raw-source="[Inversion of Control Containers and the Dependency Injection Pattern](https://www.martinfowler.com/articles/injection.html)" sourcefile="fundamentals/dependency-injection.md" sourcestartlinenumber="319" sourceendlinenumber="319">Inversion of Control Containers and the Dependency Injection Pattern</a> (Fowler)</p>
</li>
</ul>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                  <li>
                    <a href="https://github.com/aspnet/Docs/blob/w/riande/RP-EF/aspnetcore/fundamentals/dependency-injection.md/#L1" class="contribution-link">Improve this Doc</a>
                  </li>
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Copyright © 2015-2017 Microsoft<br>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>
