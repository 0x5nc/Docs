<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>ASP.NET Core Middleware </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="ASP.NET Core Middleware ">
    <meta name="generator" content="docfx 2.24.0.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <meta property="docfx:navrel" content="/foo">
    <meta property="docfx:tocrel" content="../toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="fundamentals/middleware">
<h1 id="aspnet-core-middleware-fundamentals" sourcefile="fundamentals/middleware.md" sourcestartlinenumber="15" sourceendlinenumber="15">ASP.NET Core Middleware Fundamentals</h1>

<p sourcefile="fundamentals/middleware.md" sourcestartlinenumber="17" sourceendlinenumber="17"><a name="fundamentals-middleware"></a></p>
<p sourcefile="fundamentals/middleware.md" sourcestartlinenumber="19" sourceendlinenumber="19">By <a href="https://twitter.com/RickAndMSFT" data-raw-source="[Rick Anderson](https://twitter.com/RickAndMSFT)" sourcefile="fundamentals/middleware.md" sourcestartlinenumber="19" sourceendlinenumber="19">Rick Anderson</a> and <a href="https://ardalis.com/" data-raw-source="[Steve Smith](https://ardalis.com/)" sourcefile="fundamentals/middleware.md" sourcestartlinenumber="19" sourceendlinenumber="19">Steve Smith</a></p>
<p sourcefile="fundamentals/middleware.md" sourcestartlinenumber="21" sourceendlinenumber="21"><a href="https://github.com/aspnet/Docs/tree/master/aspnetcore/fundamentals/middleware/sample" data-raw-source="[View or download sample code](https://github.com/aspnet/Docs/tree/master/aspnetcore/fundamentals/middleware/sample)" sourcefile="fundamentals/middleware.md" sourcestartlinenumber="21" sourceendlinenumber="21">View or download sample code</a></p>
<h2 id="what-is-middleware" sourcefile="fundamentals/middleware.md" sourcestartlinenumber="23" sourceendlinenumber="23">What is middleware</h2>
<p sourcefile="fundamentals/middleware.md" sourcestartlinenumber="25" sourceendlinenumber="25">Middleware is software that is assembled into an application pipeline to handle requests and responses. Each component:</p>
<ul sourcefile="fundamentals/middleware.md" sourcestartlinenumber="27" sourceendlinenumber="28">
<li sourcefile="fundamentals/middleware.md" sourcestartlinenumber="27" sourceendlinenumber="27">Chooses whether to pass the request to the next component in the pipeline.</li>
<li sourcefile="fundamentals/middleware.md" sourcestartlinenumber="28" sourceendlinenumber="28">Can perform work before and after the next component in the pipeline is invoked. </li>
</ul>
<p sourcefile="fundamentals/middleware.md" sourcestartlinenumber="30" sourceendlinenumber="30">Request delegates are used to build the request pipeline. The request delegates handle each HTTP request.</p>
<p sourcefile="fundamentals/middleware.md" sourcestartlinenumber="32" sourceendlinenumber="32">Request delegates are configured using <a href="https://docs.microsoft.com/aspnet/core/api/microsoft.aspnetcore.builder.runextensions" data-raw-source="[Run](https://docs.microsoft.com/aspnet/core/api/microsoft.aspnetcore.builder.runextensions)" sourcefile="fundamentals/middleware.md" sourcestartlinenumber="32" sourceendlinenumber="32">Run</a>, <a href="https://docs.microsoft.com/aspnet/core/api/microsoft.aspnetcore.builder.mapextensions" data-raw-source="[Map](https://docs.microsoft.com/aspnet/core/api/microsoft.aspnetcore.builder.mapextensions)" sourcefile="fundamentals/middleware.md" sourcestartlinenumber="32" sourceendlinenumber="32">Map</a>, and <a href="https://docs.microsoft.com/aspnet/core/api/microsoft.aspnetcore.builder.useextensions" data-raw-source="[Use](https://docs.microsoft.com/aspnet/core/api/microsoft.aspnetcore.builder.useextensions)" sourcefile="fundamentals/middleware.md" sourcestartlinenumber="32" sourceendlinenumber="32">Use</a> extension methods. An individual request delegate can be specified in-line as an anonymous method (called in-line middleware), or it can be defined in a reusable class. These reusable classes and in-line anonymous methods are <em>middleware</em>, or <em>middleware components</em>. Each middleware component in the request pipeline is responsible for invoking the next component in the pipeline, or short-circuiting the chain if appropriate.</p>
<p sourcefile="fundamentals/middleware.md" sourcestartlinenumber="34" sourceendlinenumber="34"><a href="../migration/http-modules.html" data-raw-source="[Migrating HTTP Modules to Middleware](../migration/http-modules.md)" sourcefile="fundamentals/middleware.md" sourcestartlinenumber="34" sourceendlinenumber="34">Migrating HTTP Modules to Middleware</a> explains the difference between request pipelines in ASP.NET Core and the previous versions and provides more middleware samples.</p>
<h2 id="creating-a-middleware-pipeline-with-iapplicationbuilder" sourcefile="fundamentals/middleware.md" sourcestartlinenumber="36" sourceendlinenumber="36">Creating a middleware pipeline with IApplicationBuilder</h2>
<p sourcefile="fundamentals/middleware.md" sourcestartlinenumber="38" sourceendlinenumber="38">The ASP.NET Core request pipeline consists of a sequence of request delegates, called one after the other, as this diagram shows (the thread of execution follows the black arrows):</p>
<p sourcefile="fundamentals/middleware.md" sourcestartlinenumber="40" sourceendlinenumber="40"><img src="middleware/_static/request-delegate-pipeline.png" alt="Request processing pattern showing a request arriving, processing through three middlewares, and the response leaving the application. Each middleware runs its logic and hands off the request to the next middleware at the next() statement. After the third middleware processes the request, it&#39;s handed back through the prior two middlewares for additional processing after the next() statements each in turn before leaving the application as a response to the client." sourcefile="fundamentals/middleware.md" sourcestartlinenumber="40" sourceendlinenumber="40"></p>
<p sourcefile="fundamentals/middleware.md" sourcestartlinenumber="42" sourceendlinenumber="42">Each delegate can perform operations before and after the next delegate. A delegate can also decide to not pass a request to the next delegate, which is called short-circuiting the request pipeline. Short-circuiting is often desirable because it avoids unnecessary work. For example, the static file middleware can return a request for a static file and short-circuit the rest of the pipeline. Exception-handling delegates need to be called early in the pipeline, so they can catch exceptions that occur in later stages of the pipeline.</p>
<p sourcefile="fundamentals/middleware.md" sourcestartlinenumber="44" sourceendlinenumber="44">The simplest possible ASP.NET Core app sets up a single request delegate that handles all requests. This case doesn&#39;t include an actual request pipeline. Instead, a single anonymous function is called in response to every HTTP request.</p>
<pre sourcefile="fundamentals/middleware.md" sourcestartlinenumber="46" sourceendlinenumber="46"><code class="lang-csharp" name="Main">using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;

public class Startup
{
    public void Configure(IApplicationBuilder app)
    {
        app.Run(async context =&gt;
        {
            await context.Response.WriteAsync(&quot;Hello, World!&quot;);
        });
    }
}

</code></pre><p sourcefile="fundamentals/middleware.md" sourcestartlinenumber="48" sourceendlinenumber="48">The first <a href="https://docs.microsoft.com/aspnet/core/api/microsoft.aspnetcore.builder.runextensions" data-raw-source="[app.Run](https://docs.microsoft.com/aspnet/core/api/microsoft.aspnetcore.builder.runextensions)" sourcefile="fundamentals/middleware.md" sourcestartlinenumber="48" sourceendlinenumber="48">app.Run</a> delegate terminates the pipeline.</p>
<p sourcefile="fundamentals/middleware.md" sourcestartlinenumber="50" sourceendlinenumber="50">You can chain multiple request delegates together with <a href="https://docs.microsoft.com/aspnet/core/api/microsoft.aspnetcore.builder.useextensions" data-raw-source="[app.Use](https://docs.microsoft.com/aspnet/core/api/microsoft.aspnetcore.builder.useextensions)" sourcefile="fundamentals/middleware.md" sourcestartlinenumber="50" sourceendlinenumber="50">app.Use</a>. The <code>next</code> parameter represents the next delegate in the pipeline. (Remember that you can short-circuit the pipeline by <em>not</em> calling the <em>next</em> parameter.) You can typically perform actions both before and after the next delegate, as this example demonstrates:</p>
<pre sourcefile="fundamentals/middleware.md" sourcestartlinenumber="52" sourceendlinenumber="52"><code class="lang-csharp" name="Main">public class Startup
{
    public void Configure(IApplicationBuilder app)
    {
        app.Use(async (context, next) =&gt;
        {
            // Do work that doesn&#39;t write to the Response.
            await next.Invoke();
            // Do logging or other work that doesn&#39;t write to the Response.
        });

        app.Run(async context =&gt;
        {
            await context.Response.WriteAsync(&quot;Hello from 2nd delegate.&quot;);
        });
    }
}
</code></pre><div class="WARNING" sourcefile="fundamentals/middleware.md" sourcestartlinenumber="54" sourceendlinenumber="54"><h5>Warning</h5><p sourcefile="fundamentals/middleware.md" sourcestartlinenumber="55" sourceendlinenumber="55">Do not call <code>next.Invoke</code> after the response has been sent to the client. Changes to <code>HttpResponse</code> after the response has started will throw an exception. For example, changes such as setting headers, status code, etc,  will throw an exception. Writing to the response body after calling <code>next</code>:</p>
<ul sourcefile="fundamentals/middleware.md" sourcestartlinenumber="56" sourceendlinenumber="57">
<li sourcefile="fundamentals/middleware.md" sourcestartlinenumber="56" sourceendlinenumber="56">May cause a protocol violation. For example, writing more than the stated <code>content-length</code>.</li>
<li sourcefile="fundamentals/middleware.md" sourcestartlinenumber="57" sourceendlinenumber="57">May corrupt the body format. For example, writing an HTML footer to a CSS file.</li>
</ul>
<p sourcefile="fundamentals/middleware.md" sourcestartlinenumber="59" sourceendlinenumber="59"><a href="https://docs.microsoft.com/aspnet/core/api/microsoft.aspnetcore.http.features.httpresponsefeature#Microsoft_AspNetCore_Http_Features_HttpResponseFeature_HasStarted" data-raw-source="[HttpResponse.HasStarted](https://docs.microsoft.com/aspnet/core/api/microsoft.aspnetcore.http.features.httpresponsefeature#Microsoft_AspNetCore_Http_Features_HttpResponseFeature_HasStarted)" sourcefile="fundamentals/middleware.md" sourcestartlinenumber="59" sourceendlinenumber="59">HttpResponse.HasStarted</a> is a useful hint to indicate if headers have been sent and/or the body has been written to.</p>
</div>
<h2 id="ordering" sourcefile="fundamentals/middleware.md" sourcestartlinenumber="61" sourceendlinenumber="61">Ordering</h2>
<p sourcefile="fundamentals/middleware.md" sourcestartlinenumber="63" sourceendlinenumber="63">The order that middleware components are added in the <code>Configure</code> method defines the order in which they are invoked on requests, and the reverse order for the response. This ordering is critical for security, performance, and functionality.</p>
<p sourcefile="fundamentals/middleware.md" sourcestartlinenumber="65" sourceendlinenumber="65">The Configure method (shown below) adds the following middleware components:</p>
<ol sourcefile="fundamentals/middleware.md" sourcestartlinenumber="67" sourceendlinenumber="70">
<li sourcefile="fundamentals/middleware.md" sourcestartlinenumber="67" sourceendlinenumber="67">Exception/error handling</li>
<li sourcefile="fundamentals/middleware.md" sourcestartlinenumber="68" sourceendlinenumber="68">Static file server</li>
<li sourcefile="fundamentals/middleware.md" sourcestartlinenumber="69" sourceendlinenumber="69">Authentication</li>
<li sourcefile="fundamentals/middleware.md" sourcestartlinenumber="70" sourceendlinenumber="70">MVC</li>
</ol>
<pre sourcefile="fundamentals/middleware.md" sourcestartlinenumber="72" sourceendlinenumber="85"><code class="lang-csharp">public void Configure(IApplicationBuilder app)
{
    app.UseExceptionHandler(&quot;/Home/Error&quot;); // Call first to catch exceptions
                                            // thrown in the following middleware.

    app.UseStaticFiles();                   // Return static files and end pipeline.

    app.UseIdentity();                     // Authenticate before you access
                                           // secure resources.

    app.UseMvcWithDefaultRoute();          // Add MVC to the request pipeline.
}
</code></pre><p sourcefile="fundamentals/middleware.md" sourcestartlinenumber="87" sourceendlinenumber="87">In the code above, <code>UseExceptionHandler</code> is the first middleware component added to the pipeline—therefore, it catches any exceptions that occur in later calls.</p>
<p sourcefile="fundamentals/middleware.md" sourcestartlinenumber="89" sourceendlinenumber="89">The static file middleware is called early in the pipeline so it can handle requests and short-circuit without going through the remaining components. The static file middleware provides <strong>no</strong> authorization checks. Any files served by it, including those under <em>wwwroot</em>, are publicly available. See <a class="xref" href="static-files.html" data-raw-source="[Working with static files](xref:fundamentals/static-files)" sourcefile="fundamentals/middleware.md" sourcestartlinenumber="89" sourceendlinenumber="89">Working with static files</a> for an approach to secure static files.</p>
<p sourcefile="fundamentals/middleware.md" sourcestartlinenumber="91" sourceendlinenumber="91">If the request is not handled by the static file middleware, it&#39;s passed on to the Identity middleware (<code>app.UseIdentity</code>), which performs authentication. Identity does not short-circuit unauthenticated requests. Although Identity authenticates requests,  authorization (and rejection) occurs only after MVC selects a specific controller and action.</p>
<p sourcefile="fundamentals/middleware.md" sourcestartlinenumber="93" sourceendlinenumber="93">The following example demonstrates a middleware ordering where requests for static files are handled by the static file middleware before the response compression middleware. Static files are not compressed with this ordering of the middleware. The MVC responses from <a href="https://docs.microsoft.com/aspnet/core/api/microsoft.aspnetcore.builder.mvcapplicationbuilderextensions#Microsoft_AspNetCore_Builder_MvcApplicationBuilderExtensions_UseMvcWithDefaultRoute_Microsoft_AspNetCore_Builder_IApplicationBuilder_" data-raw-source="[UseMvcWithDefaultRoute](https://docs.microsoft.com/aspnet/core/api/microsoft.aspnetcore.builder.mvcapplicationbuilderextensions#Microsoft_AspNetCore_Builder_MvcApplicationBuilderExtensions_UseMvcWithDefaultRoute_Microsoft_AspNetCore_Builder_IApplicationBuilder_)" sourcefile="fundamentals/middleware.md" sourcestartlinenumber="93" sourceendlinenumber="93">UseMvcWithDefaultRoute</a> can be compressed.</p>
<pre sourcefile="fundamentals/middleware.md" sourcestartlinenumber="95" sourceendlinenumber="103"><code class="lang-csharp">public void Configure(IApplicationBuilder app)
{
    app.UseStaticFiles();         // Static files not compressed
                                  // by middleware.
    app.UseResponseCompression();
    app.UseMvcWithDefaultRoute();
}
</code></pre><p sourcefile="fundamentals/middleware.md" sourcestartlinenumber="105" sourceendlinenumber="105"><a name="middleware-run-map-use"></a></p>
<h3 id="use-run-and-map" sourcefile="fundamentals/middleware.md" sourcestartlinenumber="107" sourceendlinenumber="107">Use, Run, and Map</h3>
<p sourcefile="fundamentals/middleware.md" sourcestartlinenumber="109" sourceendlinenumber="109">You configure the HTTP pipeline using <code>Use</code>, <code>Run</code>, and <code>Map</code>. The <code>Use</code> method can short-circuit the pipeline (that is, if it does not call a <code>next</code> request delegate). <code>Run</code> is a convention, and some middleware components may expose <code>Run[Middleware]</code> methods that run at the end of the pipeline.</p>
<p sourcefile="fundamentals/middleware.md" sourcestartlinenumber="111" sourceendlinenumber="111"><code>Map*</code> extensions are used as a convention for branching the pipeline. <a href="https://docs.microsoft.com/aspnet/core/api/microsoft.aspnetcore.builder.mapextensions" data-raw-source="[Map](https://docs.microsoft.com/aspnet/core/api/microsoft.aspnetcore.builder.mapextensions)" sourcefile="fundamentals/middleware.md" sourcestartlinenumber="111" sourceendlinenumber="111">Map</a> branches the request pipeline based on matches of the given request path. If the request path starts with the given path, the branch is executed.</p>
<pre sourcefile="fundamentals/middleware.md" sourcestartlinenumber="113" sourceendlinenumber="113"><code class="lang-csharp" name="Main">public class Startup
{
    private static void HandleMapTest1(IApplicationBuilder app)
    {
        app.Run(async context =&gt;
        {
            await context.Response.WriteAsync(&quot;Map Test 1&quot;);
        });
    }

    private static void HandleMapTest2(IApplicationBuilder app)
    {
        app.Run(async context =&gt;
        {
            await context.Response.WriteAsync(&quot;Map Test 2&quot;);
        });
    }

    public void Configure(IApplicationBuilder app)
    {
        app.Map(&quot;/map1&quot;, HandleMapTest1);

        app.Map(&quot;/map2&quot;, HandleMapTest2);

        app.Run(async context =&gt;
        {
            await context.Response.WriteAsync(&quot;Hello from non-Map delegate. &lt;p&gt;&quot;);
        });
    }
}
</code></pre><p sourcefile="fundamentals/middleware.md" sourcestartlinenumber="115" sourceendlinenumber="115">The following table shows the requests and responses from <code>http://localhost:1234</code> using the previous code:</p>
<table sourcefile="fundamentals/middleware.md" sourcestartlinenumber="117" sourceendlinenumber="122">
<thead>
<tr>
<th>Request</th>
<th>Response</th>
</tr>
</thead>
<tbody>
<tr>
<td>localhost:1234</td>
<td>Hello from non-Map delegate.</td>
</tr>
<tr>
<td>localhost:1234/map1</td>
<td>Map Test 1</td>
</tr>
<tr>
<td>localhost:1234/map2</td>
<td>Map Test 2</td>
</tr>
<tr>
<td>localhost:1234/map3</td>
<td>Hello from non-Map delegate.</td>
</tr>
</tbody>
</table>
<p sourcefile="fundamentals/middleware.md" sourcestartlinenumber="124" sourceendlinenumber="124">When <code>Map</code> is used, the matched path segment(s) are removed from <code>HttpRequest.Path</code> and appended to <code>HttpRequest.PathBase</code> for each request.</p>
<p sourcefile="fundamentals/middleware.md" sourcestartlinenumber="126" sourceendlinenumber="126"><a href="https://docs.microsoft.com/aspnet/core/api/microsoft.aspnetcore.builder.mapwhenextensions" data-raw-source="[MapWhen](https://docs.microsoft.com/aspnet/core/api/microsoft.aspnetcore.builder.mapwhenextensions)" sourcefile="fundamentals/middleware.md" sourcestartlinenumber="126" sourceendlinenumber="126">MapWhen</a> branches the request pipeline based on the result of the given predicate. Any predicate of type <code>Func&lt;HttpContext, bool&gt;</code> can be used to map requests to a new branch of the pipeline. In the following example, a predicate is used to detect the presence of a query string variable <code>branch</code>:</p>
<pre sourcefile="fundamentals/middleware.md" sourcestartlinenumber="128" sourceendlinenumber="128"><code class="lang-csharp" name="Main">public class Startup
{
    private static void HandleBranch(IApplicationBuilder app)
    {
        app.Run(async context =&gt;
        {
            var branchVer = context.Request.Query[&quot;branch&quot;];
            await context.Response.WriteAsync($&quot;Branch used = {branchVer}&quot;);
        });
    }

    public void Configure(IApplicationBuilder app)
    {
        app.MapWhen(context =&gt; context.Request.Query.ContainsKey(&quot;branch&quot;),
                               HandleBranch);

        app.Run(async context =&gt;
        {
            await context.Response.WriteAsync(&quot;Hello from non-Map delegate. &lt;p&gt;&quot;);
        });
    }
}
</code></pre><p sourcefile="fundamentals/middleware.md" sourcestartlinenumber="130" sourceendlinenumber="130">The following table shows the requests and responses from <code>http://localhost:1234</code> using the previous code:</p>
<table sourcefile="fundamentals/middleware.md" sourcestartlinenumber="132" sourceendlinenumber="135">
<thead>
<tr>
<th>Request</th>
<th>Response</th>
</tr>
</thead>
<tbody>
<tr>
<td>localhost:1234</td>
<td>Hello from non-Map delegate.</td>
</tr>
<tr>
<td>localhost:1234/?branch=master</td>
<td>Branch used = master</td>
</tr>
</tbody>
</table>
<p sourcefile="fundamentals/middleware.md" sourcestartlinenumber="137" sourceendlinenumber="137"><code>Map</code> supports nesting, for example:</p>
<pre sourcefile="fundamentals/middleware.md" sourcestartlinenumber="139" sourceendlinenumber="150"><code class="lang-csharp">app.Map(&quot;/level1&quot;, level1App =&gt; {
       level1App.Map(&quot;/level2a&quot;, level2AApp =&gt; {
           // &quot;/level1/level2a&quot;
           //...
       });
       level1App.Map(&quot;/level2b&quot;, level2BApp =&gt; {
           // &quot;/level1/level2b&quot;
           //...
       });
   });
</code></pre><p sourcefile="fundamentals/middleware.md" sourcestartlinenumber="152" sourceendlinenumber="152"><code>Map</code> can also match multiple segments at once, for example:</p>
<pre sourcefile="fundamentals/middleware.md" sourcestartlinenumber="154" sourceendlinenumber="156"><code class="lang-csharp">app.Map(&quot;/level1/level2&quot;, HandleMultiSeg);
</code></pre><h2 id="built-in-middleware" sourcefile="fundamentals/middleware.md" sourcestartlinenumber="158" sourceendlinenumber="158">Built-in middleware</h2>
<p sourcefile="fundamentals/middleware.md" sourcestartlinenumber="160" sourceendlinenumber="160">ASP.NET Core ships with the following middleware components:</p>
<table sourcefile="fundamentals/middleware.md" sourcestartlinenumber="162" sourceendlinenumber="171">
<thead>
<tr>
<th>Middleware</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><a class="xref" href="../security/authentication/identity.html" data-raw-source="[Authentication](xref:security/authentication/identity)" sourcefile="fundamentals/middleware.md" sourcestartlinenumber="164" sourceendlinenumber="164">Authentication</a></td>
<td>Provides authentication support.</td>
</tr>
<tr>
<td><a class="xref" href="../security/cors.html" data-raw-source="[CORS](xref:security/cors)" sourcefile="fundamentals/middleware.md" sourcestartlinenumber="165" sourceendlinenumber="165">CORS</a></td>
<td>Configures Cross-Origin Resource Sharing.</td>
</tr>
<tr>
<td><a class="xref" href="../performance/caching/middleware.html" data-raw-source="[Response Caching](xref:performance/caching/middleware)" sourcefile="fundamentals/middleware.md" sourcestartlinenumber="166" sourceendlinenumber="166">Response Caching</a></td>
<td>Provides support for caching responses.</td>
</tr>
<tr>
<td><a class="xref" href="../performance/response-compression.html" data-raw-source="[Response Compression](xref:performance/response-compression)" sourcefile="fundamentals/middleware.md" sourcestartlinenumber="167" sourceendlinenumber="167">Response Compression</a></td>
<td>Provides support for compressing responses.</td>
</tr>
<tr>
<td><a class="xref" href="routing.html" data-raw-source="[Routing](xref:fundamentals/routing)" sourcefile="fundamentals/middleware.md" sourcestartlinenumber="168" sourceendlinenumber="168">Routing</a></td>
<td>Defines and constrains request routes.</td>
</tr>
<tr>
<td><a class="xref" href="app-state.html" data-raw-source="[Session](xref:fundamentals/app-state)" sourcefile="fundamentals/middleware.md" sourcestartlinenumber="169" sourceendlinenumber="169">Session</a></td>
<td>Provides support for managing user sessions.</td>
</tr>
<tr>
<td><a class="xref" href="static-files.html" data-raw-source="[Static Files](xref:fundamentals/static-files)" sourcefile="fundamentals/middleware.md" sourcestartlinenumber="170" sourceendlinenumber="170">Static Files</a></td>
<td>Provides support for serving static files and directory browsing.</td>
</tr>
<tr>
<td><a class="xref" href="url-rewriting.html" data-raw-source="[URL Rewriting Middleware](xref:fundamentals/url-rewriting)" sourcefile="fundamentals/middleware.md" sourcestartlinenumber="171" sourceendlinenumber="171">URL Rewriting Middleware</a></td>
<td>Provides support for rewriting URLs and redirecting requests.</td>
</tr>
</tbody>
</table>
<p sourcefile="fundamentals/middleware.md" sourcestartlinenumber="173" sourceendlinenumber="173"><a name="middleware-writing-middleware"></a></p>
<h2 id="writing-middleware" sourcefile="fundamentals/middleware.md" sourcestartlinenumber="175" sourceendlinenumber="175">Writing middleware</h2>
<p sourcefile="fundamentals/middleware.md" sourcestartlinenumber="177" sourceendlinenumber="177">Middleware is generally encapsulated in a class and exposed with an extension method. Consider the following middleware, which sets the culture for the current request from the query string:</p>
<pre sourcefile="fundamentals/middleware.md" sourcestartlinenumber="179" sourceendlinenumber="179"><code class="lang-csharp" name="Main">public class Startup
{
    public void Configure(IApplicationBuilder app)
    {
        app.Use((context, next) =&gt;
        {
            var cultureQuery = context.Request.Query[&quot;culture&quot;];
            if (!string.IsNullOrWhiteSpace(cultureQuery))
            {
                var culture = new CultureInfo(cultureQuery);

                CultureInfo.CurrentCulture = culture;
                CultureInfo.CurrentUICulture = culture;
            }

            // Call the next delegate/middleware in the pipeline
            return next();
        });

        app.Run(async (context) =&gt;
        {
            await context.Response.WriteAsync(
                $&quot;Hello {CultureInfo.CurrentCulture.DisplayName}&quot;);
        });

    }
}
</code></pre><p sourcefile="fundamentals/middleware.md" sourcestartlinenumber="181" sourceendlinenumber="182">Note: The sample code above is used to demonstrate creating a middleware component. See <a class="xref" href="localization.html" data-raw-source="[
Globalization and localization](xref:fundamentals/localization)" sourcefile="fundamentals/middleware.md" sourcestartlinenumber="181" sourceendlinenumber="182">
Globalization and localization</a> for ASP.NET Core&#39;s built-in localization support.</p>
<p sourcefile="fundamentals/middleware.md" sourcestartlinenumber="184" sourceendlinenumber="184">You can test the middleware by passing in the culture, for example <code>http://localhost:7997/?culture=no</code>.</p>
<p sourcefile="fundamentals/middleware.md" sourcestartlinenumber="186" sourceendlinenumber="186">The following code moves the middleware delegate to a class:</p>
<pre sourcefile="fundamentals/middleware.md" sourcestartlinenumber="188" sourceendlinenumber="188"><code class="lang-csharp" name="Main">using Microsoft.AspNetCore.Http;
using System.Globalization;
using System.Threading.Tasks;

namespace Culture
{
    public class RequestCultureMiddleware
    {
        private readonly RequestDelegate _next;

        public RequestCultureMiddleware(RequestDelegate next)
        {
            _next = next;
        }

        public Task Invoke(HttpContext context)
        {
            var cultureQuery = context.Request.Query[&quot;culture&quot;];
            if (!string.IsNullOrWhiteSpace(cultureQuery))
            {
                var culture = new CultureInfo(cultureQuery);

                CultureInfo.CurrentCulture = culture;
                CultureInfo.CurrentUICulture = culture;

            }

            // Call the next delegate/middleware in the pipeline
            return this._next(context);
        }
    }
}
</code></pre><p sourcefile="fundamentals/middleware.md" sourcestartlinenumber="190" sourceendlinenumber="190">The following extension method exposes the middleware through <a href="https://docs.microsoft.com/aspnet/core/api/microsoft.aspnetcore.builder.iapplicationbuilder" data-raw-source="[IApplicationBuilder](https://docs.microsoft.com/aspnet/core/api/microsoft.aspnetcore.builder.iapplicationbuilder)" sourcefile="fundamentals/middleware.md" sourcestartlinenumber="190" sourceendlinenumber="190">IApplicationBuilder</a>:</p>
<pre sourcefile="fundamentals/middleware.md" sourcestartlinenumber="192" sourceendlinenumber="192"><code class="lang-csharp" name="Main">using Microsoft.AspNetCore.Builder;

namespace Culture
{
    public static class RequestCultureMiddlewareExtensions
    {
        public static IApplicationBuilder UseRequestCulture(
            this IApplicationBuilder builder)
        {
            return builder.UseMiddleware&lt;RequestCultureMiddleware&gt;();
        }
    }
}
</code></pre><p sourcefile="fundamentals/middleware.md" sourcestartlinenumber="194" sourceendlinenumber="194">The following code calls the middleware from <code>Configure</code>:</p>
<pre sourcefile="fundamentals/middleware.md" sourcestartlinenumber="196" sourceendlinenumber="196"><code class="lang-csharp" name="Main" highlight-lines="5">public class Startup
{
    public void Configure(IApplicationBuilder app)
    {
        app.UseRequestCulture();

        app.Run(async (context) =&gt;
        {
            await context.Response.WriteAsync(
                $&quot;Hello {CultureInfo.CurrentCulture.DisplayName}&quot;);
        });

    }
}
</code></pre><p sourcefile="fundamentals/middleware.md" sourcestartlinenumber="198" sourceendlinenumber="198">Middleware should follow the <a href="http://deviq.com/explicit-dependencies-principle/" data-raw-source="[Explicit Dependencies Principle](http://deviq.com/explicit-dependencies-principle/)" sourcefile="fundamentals/middleware.md" sourcestartlinenumber="198" sourceendlinenumber="198">Explicit Dependencies Principle</a> by exposing its dependencies in its constructor. Middleware is constructed once per <em>application lifetime</em>. See <em>Per-request dependencies</em> below if you need to share services with middleware within a request.</p>
<p sourcefile="fundamentals/middleware.md" sourcestartlinenumber="200" sourceendlinenumber="200">Middleware components can resolve their dependencies from dependency injection through constructor parameters. <a href="https://docs.microsoft.com/aspnet/core/api/microsoft.aspnetcore.builder.usemiddlewareextensions#methods_summary" data-raw-source="[`UseMiddleware&lt;T&gt;`](https://docs.microsoft.com/aspnet/core/api/microsoft.aspnetcore.builder.usemiddlewareextensions#methods_summary)" sourcefile="fundamentals/middleware.md" sourcestartlinenumber="200" sourceendlinenumber="200"><code>UseMiddleware&lt;T&gt;</code></a> can also accept additional parameters directly.</p>
<h3 id="per-request-dependencies" sourcefile="fundamentals/middleware.md" sourcestartlinenumber="202" sourceendlinenumber="202">Per-request dependencies</h3>
<p sourcefile="fundamentals/middleware.md" sourcestartlinenumber="204" sourceendlinenumber="204">Because middleware is constructed at app startup, not per-request, <em>scoped</em> lifetime services used by middleware constructors are not  shared with other dependency-injected types during each request. If you must share a <em>scoped</em> service between your middleware and other types, add these services to the <code>Invoke</code> method&#39;s signature. The <code>Invoke</code> method can accept additional parameters that are populated by dependency injection. For example:</p>
<pre sourcefile="fundamentals/middleware.md" sourcestartlinenumber="206" sourceendlinenumber="222"><code class="lang-c#">public class MyMiddleware
{
    private readonly RequestDelegate _next;

    public MyMiddleware(RequestDelegate next)
    {
        _next = next;
    }

    public async Task Invoke(HttpContext httpContext, IMyScopedService svc)
    {
        svc.MyProperty = 1000;
        await _next(httpContext);
    }
}
</code></pre><h2 id="resources" sourcefile="fundamentals/middleware.md" sourcestartlinenumber="224" sourceendlinenumber="224">Resources</h2>
<ul sourcefile="fundamentals/middleware.md" sourcestartlinenumber="226" sourceendlinenumber="229">
<li sourcefile="fundamentals/middleware.md" sourcestartlinenumber="226" sourceendlinenumber="226"><a href="https://github.com/aspnet/Docs/tree/master/aspnetcore/fundamentals/middleware/sample" data-raw-source="[Sample code used in this doc](https://github.com/aspnet/Docs/tree/master/aspnetcore/fundamentals/middleware/sample)" sourcefile="fundamentals/middleware.md" sourcestartlinenumber="226" sourceendlinenumber="226">Sample code used in this doc</a></li>
<li sourcefile="fundamentals/middleware.md" sourcestartlinenumber="227" sourceendlinenumber="227"><a href="../migration/http-modules.html" data-raw-source="[Migrating HTTP Modules to Middleware](../migration/http-modules.md)" sourcefile="fundamentals/middleware.md" sourcestartlinenumber="227" sourceendlinenumber="227">Migrating HTTP Modules to Middleware</a></li>
<li sourcefile="fundamentals/middleware.md" sourcestartlinenumber="228" sourceendlinenumber="228"><a href="startup.html" data-raw-source="[Application Startup](startup.md)" sourcefile="fundamentals/middleware.md" sourcestartlinenumber="228" sourceendlinenumber="228">Application Startup</a></li>
<li sourcefile="fundamentals/middleware.md" sourcestartlinenumber="229" sourceendlinenumber="229"><a href="request-features.html" data-raw-source="[Request Features](request-features.md)" sourcefile="fundamentals/middleware.md" sourcestartlinenumber="229" sourceendlinenumber="229">Request Features</a></li>
</ul>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                  <li>
                    <a href="https://github.com/aspnet/Docs/blob/w/riande/RP-EF/aspnetcore/fundamentals/middleware.md/#L1" class="contribution-link">Improve this Doc</a>
                  </li>
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Copyright © 2015-2017 Microsoft<br>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>
