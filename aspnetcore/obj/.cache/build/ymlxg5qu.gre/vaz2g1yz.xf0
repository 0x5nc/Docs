<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Create a Web API with ASP.NET Core and Visual Studio for Mac </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Create a Web API with ASP.NET Core and Visual Studio for Mac ">
    <meta name="generator" content="docfx 2.24.0.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <meta property="docfx:navrel" content="/foo">
    <meta property="docfx:tocrel" content="../toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="tutorials/first-web-api-mac">
<h1 id="create-a-web-api-with-aspnet-core-mvc-and-visual-studio-for-mac" sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="19" sourceendlinenumber="19">Create a Web API with ASP.NET Core MVC and Visual Studio for Mac</h1>

<p sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="21" sourceendlinenumber="21">By <a href="https://twitter.com/RickAndMSFT" data-raw-source="[Rick Anderson](https://twitter.com/RickAndMSFT)" sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="21" sourceendlinenumber="21">Rick Anderson</a> and <a href="https://github.com/mikewasson" data-raw-source="[Mike Wasson](https://github.com/mikewasson)" sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="21" sourceendlinenumber="21">Mike Wasson</a></p>
<p sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="23" sourceendlinenumber="23">In this tutorial, you’ll build a web API for managing a list of &quot;to-do&quot; items. You won’t build a UI.</p>
<p sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="25" sourceendlinenumber="25">There are 3 versions of this tutorial:</p>
<ul sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="27" sourceendlinenumber="29">
<li sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="27" sourceendlinenumber="27">macOS: Web API with Visual Studio for Mac (This tutorial)</li>
<li sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="28" sourceendlinenumber="28">Windows: <a class="xref" href="first-web-api.html" data-raw-source="[Web API with Visual Studio for Windows](xref:tutorials/first-web-api)" sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="28" sourceendlinenumber="28">Web API with Visual Studio for Windows</a></li>
<li sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="29" sourceendlinenumber="29">macOS, Linux, Windows: <a class="xref" href="web-api-vsc.html" data-raw-source="[Web API with Visual Studio Code](xref:tutorials/web-api-vsc)" sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="29" sourceendlinenumber="29">Web API with Visual Studio Code</a></li>
</ul>
<!-- WARNING: The code AND images in this doc are used by uid: tutorials/web-api-vsc, tutorials/first-web-api-mac and tutorials/first-web-api. If you change any code/images in this tutorial, update uid: tutorials/web-api-vsc -->
<h2 id="overview" sourcefile="includes/webApi/intro.md" sourcestartlinenumber="1" sourceendlinenumber="1">Overview</h2>
<p sourcefile="includes/webApi/intro.md" sourcestartlinenumber="3" sourceendlinenumber="3">Here is the API that you’ll create:</p>
<table sourcefile="includes/webApi/intro.md" sourcestartlinenumber="5" sourceendlinenumber="11">
<thead>
<tr>
<th>API</th>
<th>Description</th>
<th>Request body</th>
<th>Response body</th>
</tr>
</thead>
<tbody>
<tr>
<td>GET /api/todo</td>
<td>Get all to-do items</td>
<td>None</td>
<td>Array of to-do items</td>
</tr>
<tr>
<td>GET /api/todo/{id}</td>
<td>Get an item by ID</td>
<td>None</td>
<td>To-do item</td>
</tr>
<tr>
<td>POST /api/todo</td>
<td>Add a new item</td>
<td>To-do item</td>
<td>To-do item</td>
</tr>
<tr>
<td>PUT /api/todo/{id}</td>
<td>Update an existing item &nbsp;</td>
<td>To-do item</td>
<td>None</td>
</tr>
<tr>
<td>DELETE /api/todo/{id}  &nbsp;  &nbsp;</td>
<td>Delete an item &nbsp;  &nbsp;</td>
<td>None</td>
<td>None</td>
</tr>
</tbody>
</table>
<p sourcefile="includes/webApi/intro.md" sourcestartlinenumber="13" sourceendlinenumber="13"><br></p>
<p sourcefile="includes/webApi/intro.md" sourcestartlinenumber="15" sourceendlinenumber="15">The following diagram shows the basic design of the app.</p>
<p sourcefile="includes/webApi/intro.md" sourcestartlinenumber="17" sourceendlinenumber="17"><img src="first-web-api/_static/architecture.png" alt="The client is represented by a box on the left and submits a request and receives a response from the application, a box drawn on the right. Within the application box, three boxes represent the controller, the model, and the data access layer. The request comes into the application&#39;s controller, and read/write operations occur between the controller and the data access layer. The model is serialized and returned to the client in the response." sourcefile="includes/webApi/intro.md" sourcestartlinenumber="17" sourceendlinenumber="17"></p>
<ul sourcefile="includes/webApi/intro.md" sourcestartlinenumber="19" sourceendlinenumber="25">
<li sourcefile="includes/webApi/intro.md" sourcestartlinenumber="19" sourceendlinenumber="19"><p sourcefile="includes/webApi/intro.md" sourcestartlinenumber="19" sourceendlinenumber="19">The client is whatever consumes the web API (mobile app, browser, etc). We aren’t writing a client in this tutorial. We&#39;ll use <a href="https://www.getpostman.com/" data-raw-source="[Postman](https://www.getpostman.com/)" sourcefile="includes/webApi/intro.md" sourcestartlinenumber="19" sourceendlinenumber="19">Postman</a> or <a href="https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man1/curl.1.html" data-raw-source="[curl](https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man1/curl.1.html)" sourcefile="includes/webApi/intro.md" sourcestartlinenumber="19" sourceendlinenumber="19">curl</a> to test the app.</p>
</li>
<li sourcefile="includes/webApi/intro.md" sourcestartlinenumber="21" sourceendlinenumber="21"><p sourcefile="includes/webApi/intro.md" sourcestartlinenumber="21" sourceendlinenumber="21">A <em>model</em> is an object that represents the data in your application. In this case, the only model is a to-do item. Models are represented as C# classes, also know as <strong>P</strong>lain <strong>O</strong>ld <strong>C</strong># <strong>O</strong>bject (POCOs).</p>
</li>
<li sourcefile="includes/webApi/intro.md" sourcestartlinenumber="23" sourceendlinenumber="23"><p sourcefile="includes/webApi/intro.md" sourcestartlinenumber="23" sourceendlinenumber="23">A <em>controller</em> is an object that handles HTTP requests and creates the HTTP response. This app will have a single controller.</p>
</li>
<li sourcefile="includes/webApi/intro.md" sourcestartlinenumber="25" sourceendlinenumber="25"><p sourcefile="includes/webApi/intro.md" sourcestartlinenumber="25" sourceendlinenumber="25">To keep the tutorial simple, the app doesn’t use a persistent database. The sample app stores to-do items in an in-memory database.</p>
</li>
</ul>
<ul sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="35" sourceendlinenumber="35">
<li sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="35" sourceendlinenumber="35">See <a class="xref" href="first-mvc-app-xplat/index.html" data-raw-source="[Introduction to ASP.NET Core MVC on Mac or Linux](xref:tutorials/first-mvc-app-xplat/index)" sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="35" sourceendlinenumber="35">Introduction to ASP.NET Core MVC on Mac or Linux</a> for an example that uses a persistent database.</li>
</ul>
<h2 id="prerequisites" sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="37" sourceendlinenumber="37">Prerequisites</h2>
<p sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="39" sourceendlinenumber="39">Install the following:</p>
<ul sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="41" sourceendlinenumber="42">
<li sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="41" sourceendlinenumber="41"><a href="https://www.microsoft.com/net/core#macos" data-raw-source="[.NET Core SDK](https://www.microsoft.com/net/core#macos)" sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="41" sourceendlinenumber="41">.NET Core SDK</a>  </li>
<li sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="42" sourceendlinenumber="42"><a href="https://www.visualstudio.com/vs/visual-studio-mac/" data-raw-source="[Visual Studio for Mac](https://www.visualstudio.com/vs/visual-studio-mac/)" sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="42" sourceendlinenumber="42">Visual Studio for Mac</a></li>
</ul>
<h2 id="create-the-project" sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="44" sourceendlinenumber="44">Create the project</h2>
<p sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="46" sourceendlinenumber="46">From Visual Studio, select <strong>File &gt; New Solution</strong>.</p>
<p sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="48" sourceendlinenumber="48"><img src="first-web-api-mac/_static/sln.png" alt="macOS New solution" sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="48" sourceendlinenumber="48"></p>
<p sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="50" sourceendlinenumber="50">Select <strong>.NET Core App &gt;  ASP.NET Core Web API &gt; Next</strong>.</p>
<p sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="52" sourceendlinenumber="52"><img src="first-web-api-mac/_static/1.png" alt="macOS New project dialog" sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="52" sourceendlinenumber="52"></p>
<p sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="54" sourceendlinenumber="54">Enter <strong>TodoApi</strong> for the <strong>Project Name</strong>, and then select Create.</p>
<p sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="56" sourceendlinenumber="56"><img src="first-web-api-mac/_static/2.png" alt="config dialog" sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="56" sourceendlinenumber="56"></p>
<h3 id="launch-the-app" sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="58" sourceendlinenumber="58">Launch the app</h3>
<p sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="60" sourceendlinenumber="60">In Visual Studio, select <strong>Run &gt; Start With Debugging</strong> to launch the app. Visual Studio launches a browser and navigates to <code>http://localhost:5000</code>. You get an HTTP 404 (Not Found) error.  Change the URL to <code>http://localhost:port/api/values</code>. The <code>ValuesController</code> data will be displayed:</p>
<pre sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="62" sourceendlinenumber="64"><code>[&quot;value1&quot;,&quot;value2&quot;]
</code></pre><h3 id="add-support-for-entity-framework-core" sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="66" sourceendlinenumber="66">Add support for Entity Framework Core</h3>
<p sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="68" sourceendlinenumber="68">Install the <a href="https://docs.microsoft.com/ef/core/providers/in-memory/" data-raw-source="[Entity Framework Core InMemory](https://docs.microsoft.com/ef/core/providers/in-memory/)" sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="68" sourceendlinenumber="68">Entity Framework Core InMemory</a> database provider. This database provider allows Entity Framework Core to be used with an in-memory database.</p>
<ul sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="70" sourceendlinenumber="75">
<li sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="70" sourceendlinenumber="72"><p sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="70" sourceendlinenumber="70">From the <strong>Project</strong> menu, select <strong>Add NuGet Packages</strong>. </p>
<ul sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="72" sourceendlinenumber="72">
<li sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="72" sourceendlinenumber="72">Alternately, you can right-click <strong>Dependencies</strong>, and then select <strong>Add Packages</strong>.</li>
</ul>
</li>
<li sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="74" sourceendlinenumber="74"><p sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="74" sourceendlinenumber="74">Enter <code>EntityFrameworkCore.InMemory</code> in the search box.</p>
</li>
<li sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="75" sourceendlinenumber="75">Select <code>Microsoft.EntityFrameworkCore.InMemory</code>, and then select <strong>Add Package</strong>.</li>
</ul>
<h3 id="add-a-model-class" sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="77" sourceendlinenumber="77">Add a model class</h3>
<p sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="79" sourceendlinenumber="79">A model is an object that represents the data in your application. In this case, the only model is a to-do item.</p>
<p sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="81" sourceendlinenumber="81">Add a folder named <em>Models</em>. In Solution Explorer, right-click the project. Select <strong>Add</strong> &gt; <strong>New Folder</strong>. Name the folder <em>Models</em>.</p>
<p sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="83" sourceendlinenumber="83"><img src="first-web-api-mac/_static/folder.png" alt="new folder" sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="83" sourceendlinenumber="83"></p>
<p sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="85" sourceendlinenumber="85">Note: You can put model classes anywhere in your project, but the <em>Models</em> folder is used by convention.</p>
<p sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="87" sourceendlinenumber="87">Add a <code>TodoItem</code> class. Right-click the <em>Models</em> folder and select <strong>Add &gt; New File &gt; General &gt; Empty Class</strong>. Name the class <code>TodoItem</code>, and then select <strong>New</strong>.</p>
<p sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="89" sourceendlinenumber="89">Replace the generated code with:</p>
<pre sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="91" sourceendlinenumber="91"><code class="lang-csharp" name="Main">namespace TodoApi.Models
{
    public class TodoItem
    {
        public long Id { get; set; }
        public string Name { get; set; }
        public bool IsComplete { get; set; }
    }
}
</code></pre><p sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="93" sourceendlinenumber="93">The database generates the <code>Id</code> when a <code>TodoItem</code> is created.</p>
<h3 id="create-the-database-context" sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="95" sourceendlinenumber="95">Create the database context</h3>
<p sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="97" sourceendlinenumber="97">The <em>database context</em> is the main class that coordinates Entity Framework functionality for a given data model. You create this class by deriving from the <code>Microsoft.EntityFrameworkCore.DbContext</code> class.</p>
<p sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="99" sourceendlinenumber="99">Add a <code>TodoContext</code> class to the <em>Models</em> folder.</p>
<pre sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="101" sourceendlinenumber="101"><code class="lang-csharp" name="Main">using Microsoft.EntityFrameworkCore;

namespace TodoApi.Models
{
    public class TodoContext : DbContext
    {
        public TodoContext(DbContextOptions&lt;TodoContext&gt; options)
            : base(options)
        {
        }

        public DbSet&lt;TodoItem&gt; TodoItems { get; set; }

    }
}
</code></pre><h2 id="register-the-database-context" sourcefile="includes/webApi/register_dbContext.md" sourcestartlinenumber="1" sourceendlinenumber="1">Register the database context</h2>
<p sourcefile="includes/webApi/register_dbContext.md" sourcestartlinenumber="3" sourceendlinenumber="3">In order to inject the database context into the controller, we need to register it with the <a class="xref" href="../fundamentals/dependency-injection.html" data-raw-source="[dependency injection](xref:fundamentals/dependency-injection)" sourcefile="includes/webApi/register_dbContext.md" sourcestartlinenumber="3" sourceendlinenumber="3">dependency injection</a> container. Register the database context with the service container using the built-in support for <a class="xref" href="../fundamentals/dependency-injection.html" data-raw-source="[dependency injection](xref:fundamentals/dependency-injection)" sourcefile="includes/webApi/register_dbContext.md" sourcestartlinenumber="3" sourceendlinenumber="3">dependency injection</a>. Replace the contents of the <em>Startup.cs</em> file with the following:</p>
<pre sourcefile="includes/webApi/register_dbContext.md" sourcestartlinenumber="5" sourceendlinenumber="5"><code class="lang-csharp" name="Main" highlight-lines="2,4,12">using Microsoft.AspNetCore.Builder;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using TodoApi.Models;

namespace TodoApi
{
    public class Startup
    {       
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddDbContext&lt;TodoContext&gt;(opt =&gt; opt.UseInMemoryDatabase(&quot;TodoList&quot;));
            services.AddMvc();
        }

        public void Configure(IApplicationBuilder app)
        {
            app.UseMvc();
        }
    }
}
</code></pre><p sourcefile="includes/webApi/register_dbContext.md" sourcestartlinenumber="7" sourceendlinenumber="7">The preceding code:</p>
<ul sourcefile="includes/webApi/register_dbContext.md" sourcestartlinenumber="9" sourceendlinenumber="10">
<li sourcefile="includes/webApi/register_dbContext.md" sourcestartlinenumber="9" sourceendlinenumber="9">Removes the code we&#39;re not using.</li>
<li sourcefile="includes/webApi/register_dbContext.md" sourcestartlinenumber="10" sourceendlinenumber="10">Specifies an in-memory database is injected into the service container.</li>
</ul>
<h2 id="add-a-controller" sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="105" sourceendlinenumber="105">Add a controller</h2>
<p sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="107" sourceendlinenumber="107">In Solution Explorer, in the <em>Controllers</em> folder, add the class <code>TodoController</code>.</p>
<p sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="109" sourceendlinenumber="109">Replace the generated code with the following (and add closing braces):</p>
<pre sourcefile="includes/webApi/getTodoItems.md" sourcestartlinenumber="1" sourceendlinenumber="1"><code class="lang-csharp" name="Main">using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using TodoApi.Models;
using System.Linq;

namespace TodoApi.Controllers
{
    [Route(&quot;api/[controller]&quot;)]
    public class TodoController : Controller
    {
        private readonly TodoContext _context;

        public TodoController(TodoContext context)
        {
            _context = context;

            if (_context.TodoItems.Count() == 0)
            {
                _context.TodoItems.Add(new TodoItem { Name = &quot;Item1&quot; });
                _context.SaveChanges();
            }
        }       
    }
}
</code></pre><p sourcefile="includes/webApi/getTodoItems.md" sourcestartlinenumber="3" sourceendlinenumber="3">The preceding code:</p>
<ul sourcefile="includes/webApi/getTodoItems.md" sourcestartlinenumber="5" sourceendlinenumber="7">
<li sourcefile="includes/webApi/getTodoItems.md" sourcestartlinenumber="5" sourceendlinenumber="5">Defines an empty controller class. In the next sections, we&#39;ll add methods to implement the API.</li>
<li sourcefile="includes/webApi/getTodoItems.md" sourcestartlinenumber="6" sourceendlinenumber="6">The constructor uses <a class="xref" href="../fundamentals/dependency-injection.html" data-raw-source="[Dependency Injection](xref:fundamentals/dependency-injection)" sourcefile="includes/webApi/getTodoItems.md" sourcestartlinenumber="6" sourceendlinenumber="6">Dependency Injection</a> to inject the database context (<code>TodoContext</code>) into the controller. The database context is used in each of the <a href="https://wikipedia.org/wiki/Create,_read,_update_and_delete" data-raw-source="[CRUD](https://wikipedia.org/wiki/Create,_read,_update_and_delete)" sourcefile="includes/webApi/getTodoItems.md" sourcestartlinenumber="6" sourceendlinenumber="6">CRUD</a> methods in the controller.</li>
<li sourcefile="includes/webApi/getTodoItems.md" sourcestartlinenumber="7" sourceendlinenumber="7">The constructor adds an item to the in-memory database if one doesn&#39;t exist.</li>
</ul>
<h2 id="getting-to-do-items" sourcefile="includes/webApi/getTodoItems.md" sourcestartlinenumber="9" sourceendlinenumber="9">Getting to-do items</h2>
<p sourcefile="includes/webApi/getTodoItems.md" sourcestartlinenumber="11" sourceendlinenumber="11">To get to-do items, add the following methods to the <code>TodoController</code> class.</p>
<pre sourcefile="includes/webApi/getTodoItems.md" sourcestartlinenumber="13" sourceendlinenumber="13"><code class="lang-csharp" name="Main">[HttpGet]
public IEnumerable&lt;TodoItem&gt; GetAll()
{
    return _context.TodoItems.ToList();
}

[HttpGet(&quot;{id}&quot;, Name = &quot;GetTodo&quot;)]
public IActionResult GetById(long id)
{
    var item = _context.TodoItems.FirstOrDefault(t =&gt; t.Id == id);
    if (item == null)
    {
        return NotFound();
    }
    return new ObjectResult(item);
}
</code></pre><p sourcefile="includes/webApi/getTodoItems.md" sourcestartlinenumber="15" sourceendlinenumber="15">These methods implement the two GET methods:</p>
<ul sourcefile="includes/webApi/getTodoItems.md" sourcestartlinenumber="17" sourceendlinenumber="18">
<li sourcefile="includes/webApi/getTodoItems.md" sourcestartlinenumber="17" sourceendlinenumber="17"><code>GET /api/todo</code></li>
<li sourcefile="includes/webApi/getTodoItems.md" sourcestartlinenumber="18" sourceendlinenumber="18"><code>GET /api/todo/{id}</code></li>
</ul>
<p sourcefile="includes/webApi/getTodoItems.md" sourcestartlinenumber="20" sourceendlinenumber="20">Here is an example HTTP response for the <code>GetAll</code> method:</p>
<pre sourcefile="includes/webApi/getTodoItems.md" sourcestartlinenumber="22" sourceendlinenumber="30"><code>HTTP/1.1 200 OK
   Content-Type: application/json; charset=utf-8
   Server: Microsoft-IIS/10.0
   Date: Thu, 18 Jun 2015 20:51:10 GMT
   Content-Length: 82

   [{&quot;Key&quot;:&quot;1&quot;, &quot;Name&quot;:&quot;Item1&quot;,&quot;IsComplete&quot;:false}]
</code></pre><p sourcefile="includes/webApi/getTodoItems.md" sourcestartlinenumber="32" sourceendlinenumber="32">Later in the tutorial I&#39;ll show how you can view the HTTP response using <a href="https://www.getpostman.com/" data-raw-source="[Postman](https://www.getpostman.com/)" sourcefile="includes/webApi/getTodoItems.md" sourcestartlinenumber="32" sourceendlinenumber="32">Postman</a> or <a href="https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man1/curl.1.html" data-raw-source="[curl](https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man1/curl.1.html)" sourcefile="includes/webApi/getTodoItems.md" sourcestartlinenumber="32" sourceendlinenumber="32">curl</a>.</p>
<h3 id="routing-and-url-paths" sourcefile="includes/webApi/getTodoItems.md" sourcestartlinenumber="34" sourceendlinenumber="34">Routing and URL paths</h3>
<p sourcefile="includes/webApi/getTodoItems.md" sourcestartlinenumber="36" sourceendlinenumber="36">The <code>[HttpGet]</code> attribute specifies an HTTP GET method. The URL path for each method is constructed as follows:</p>
<ul sourcefile="includes/webApi/getTodoItems.md" sourcestartlinenumber="38" sourceendlinenumber="38">
<li sourcefile="includes/webApi/getTodoItems.md" sourcestartlinenumber="38" sourceendlinenumber="38">Take the template string in the controller’s route attribute:</li>
</ul>
<pre sourcefile="includes/webApi/getTodoItems.md" sourcestartlinenumber="40" sourceendlinenumber="40"><code class="lang-csharp" name="Main" highlight-lines="3">namespace TodoApi.Controllers
{
    [Route(&quot;api/[controller]&quot;)]
    public class TodoController : Controller
    {
        private readonly TodoContext _context;
</code></pre><ul sourcefile="includes/webApi/getTodoItems.md" sourcestartlinenumber="42" sourceendlinenumber="43">
<li sourcefile="includes/webApi/getTodoItems.md" sourcestartlinenumber="42" sourceendlinenumber="42">Replace &quot;[Controller]&quot; with the name of the controller, which is the controller class name minus the &quot;Controller&quot; suffix. For this sample, the controller class name is <strong>Todo</strong>Controller and the root name is &quot;todo&quot;. ASP.NET Core <a class="xref" href="../mvc/controllers/routing.html" data-raw-source="[routing](xref:mvc/controllers/routing)" sourcefile="includes/webApi/getTodoItems.md" sourcestartlinenumber="42" sourceendlinenumber="42">routing</a> is not case sensitive.</li>
<li sourcefile="includes/webApi/getTodoItems.md" sourcestartlinenumber="43" sourceendlinenumber="43">If the <code>[HttpGet]</code> attribute has a route template (such as <code>[HttpGet(&quot;/products&quot;)]</code>, append that to the path. This sample doesn&#39;t use a template. See <a class="xref" href="../mvc/controllers/routing.html#attribute-routing-with-httpverb-attributes" data-raw-source="[Attribute routing with Http[Verb] attributes](xref:mvc/controllers/routing#attribute-routing-with-httpverb-attributes)" sourcefile="includes/webApi/getTodoItems.md" sourcestartlinenumber="43" sourceendlinenumber="43">Attribute routing with Http[Verb] attributes</a> for more information.</li>
</ul>
<p sourcefile="includes/webApi/getTodoItems.md" sourcestartlinenumber="45" sourceendlinenumber="45">In the <code>GetById</code> method:</p>
<pre sourcefile="includes/webApi/getTodoItems.md" sourcestartlinenumber="47" sourceendlinenumber="50"><code class="lang-csharp">[HttpGet(&quot;{id}&quot;, Name = &quot;GetTodo&quot;)]
public IActionResult GetById(long id)
</code></pre><p sourcefile="includes/webApi/getTodoItems.md" sourcestartlinenumber="52" sourceendlinenumber="52"><code>&quot;{id}&quot;</code> is a placeholder variable for the ID of the <code>todo</code> item. When <code>GetById</code> is invoked, it assigns the value of &quot;{id}&quot; in the URL to the method&#39;s <code>id</code> parameter.</p>
<p sourcefile="includes/webApi/getTodoItems.md" sourcestartlinenumber="54" sourceendlinenumber="54"><code>Name = &quot;GetTodo&quot;</code> creates a named route and allows you to link to this route in an HTTP Response. I&#39;ll explain it with an example later. See <a class="xref" href="../mvc/controllers/routing.html" data-raw-source="[Routing to Controller Actions](xref:mvc/controllers/routing)" sourcefile="includes/webApi/getTodoItems.md" sourcestartlinenumber="54" sourceendlinenumber="54">Routing to Controller Actions</a> for detailed information.</p>
<h3 id="return-values" sourcefile="includes/webApi/getTodoItems.md" sourcestartlinenumber="56" sourceendlinenumber="56">Return values</h3>
<p sourcefile="includes/webApi/getTodoItems.md" sourcestartlinenumber="58" sourceendlinenumber="58">The <code>GetAll</code> method returns an <code>IEnumerable</code>. MVC automatically serializes the object to <a href="http://www.json.org/" data-raw-source="[JSON](http://www.json.org/)" sourcefile="includes/webApi/getTodoItems.md" sourcestartlinenumber="58" sourceendlinenumber="58">JSON</a> and writes the JSON into the body of the response message. The response code for this method is 200, assuming there are no unhandled exceptions. (Unhandled exceptions are translated into 5xx errors.)</p>
<p sourcefile="includes/webApi/getTodoItems.md" sourcestartlinenumber="60" sourceendlinenumber="60">In contrast, the <code>GetById</code> method returns the more general <code>IActionResult</code> type, which represents a wide range of return types. <code>GetById</code> has two different return types:</p>
<ul sourcefile="includes/webApi/getTodoItems.md" sourcestartlinenumber="62" sourceendlinenumber="64">
<li sourcefile="includes/webApi/getTodoItems.md" sourcestartlinenumber="62" sourceendlinenumber="62"><p sourcefile="includes/webApi/getTodoItems.md" sourcestartlinenumber="62" sourceendlinenumber="62">If no item matches the requested ID, the method returns a 404 error.  This is done by returning <code>NotFound</code>.</p>
</li>
<li sourcefile="includes/webApi/getTodoItems.md" sourcestartlinenumber="64" sourceendlinenumber="64"><p sourcefile="includes/webApi/getTodoItems.md" sourcestartlinenumber="64" sourceendlinenumber="64">Otherwise, the method returns 200 with a JSON response body. This is done by returning an <code>ObjectResult</code></p>
</li>
</ul>
<h3 id="launch-the-app" sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="113" sourceendlinenumber="113">Launch the app</h3>
<p sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="115" sourceendlinenumber="115">In Visual Studio, select <strong>Run &gt; Start With Debugging</strong> to launch the app. Visual Studio launches a browser and navigates to <code>http://localhost:port</code>, where <em>port</em> is a randomly chosen port number. You get an HTTP 404 (Not Found) error.  Change the URL to <code>http://localhost:port/api/values</code>. The <code>ValuesController</code> data will be displayed:</p>
<pre sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="117" sourceendlinenumber="119"><code>[&quot;value1&quot;,&quot;value2&quot;]
</code></pre><p sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="121" sourceendlinenumber="121">Navigate to the <code>Todo</code> controller at<code>http://localhost:port/api/todo</code>:</p>
<pre sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="123" sourceendlinenumber="125"><code>[{&quot;key&quot;:1,&quot;name&quot;:&quot;Item1&quot;,&quot;isComplete&quot;:false}]
</code></pre><h2 id="implement-the-other-crud-operations" sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="127" sourceendlinenumber="127">Implement the other CRUD operations</h2>
<p sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="129" sourceendlinenumber="129">We&#39;ll add <code>Create</code>, <code>Update</code>, and <code>Delete</code> methods to the controller. These are variations on a theme, so I&#39;ll just show the code and highlight the main differences. Build the project after adding or changing code.</p>
<h3 id="create" sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="131" sourceendlinenumber="131">Create</h3>
<pre sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="133" sourceendlinenumber="133"><code class="lang-csharp" name="Main">[HttpPost]
public IActionResult Create([FromBody] TodoItem item)
{
    if (item == null)
    {
        return BadRequest();
    }

    _context.TodoItems.Add(item);
    _context.SaveChanges();

    return CreatedAtRoute(&quot;GetTodo&quot;, new { id = item.Id }, item);
}
</code></pre><p sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="135" sourceendlinenumber="135">This is an HTTP POST method, indicated by the <a href="/aspnet/core/api/microsoft.aspnetcore.mvc.httppostattribute" data-raw-source="[`[HttpPost]`](/aspnet/core/api/microsoft.aspnetcore.mvc.httppostattribute)" sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="135" sourceendlinenumber="135"><code>[HttpPost]</code></a> attribute. The <a href="/aspnet/core/api/microsoft.aspnetcore.mvc.frombodyattribute" data-raw-source="[`[FromBody]`](/aspnet/core/api/microsoft.aspnetcore.mvc.frombodyattribute)" sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="135" sourceendlinenumber="135"><code>[FromBody]</code></a> attribute tells MVC to get the value of the to-do item from the body of the HTTP request.</p>
<p sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="137" sourceendlinenumber="137">The <code>CreatedAtRoute</code> method returns a 201 response, which is the standard response for an HTTP POST method that creates a new resource on the server. <code>CreatedAtRoute</code> also adds a Location header to the response. The Location header specifies the URI of the newly created to-do item. See <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html" data-raw-source="[10.2.2 201 Created](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html)" sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="137" sourceendlinenumber="137">10.2.2 201 Created</a>.</p>
<h3 id="use-postman-to-send-a-create-request" sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="139" sourceendlinenumber="139">Use Postman to send a Create request</h3>
<ul sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="141" sourceendlinenumber="142">
<li sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="141" sourceendlinenumber="141">Start the app (<strong>Run &gt; Start With Debugging</strong>).</li>
<li sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="142" sourceendlinenumber="142">Start Postman.</li>
</ul>
<p sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="144" sourceendlinenumber="144"><img src="first-web-api/_static/pmc.png" alt="Postman console" sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="144" sourceendlinenumber="144"></p>
<ul sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="146" sourceendlinenumber="150">
<li sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="146" sourceendlinenumber="146">Set the HTTP method to <code>POST</code></li>
<li sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="147" sourceendlinenumber="147">Select the <strong>Body</strong> radio button</li>
<li sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="148" sourceendlinenumber="148">Select the <strong>raw</strong> radio button</li>
<li sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="149" sourceendlinenumber="149">Set the type to JSON</li>
<li sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="150" sourceendlinenumber="150">In the key-value editor, enter a Todo item such as</li>
</ul>
<pre sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="152" sourceendlinenumber="157"><code class="lang-json">{
    &quot;name&quot;:&quot;walk dog&quot;,
    &quot;isComplete&quot;:true
}
</code></pre><ul sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="159" sourceendlinenumber="161">
<li sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="159" sourceendlinenumber="159"><p sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="159" sourceendlinenumber="159">Select <strong>Send</strong></p>
</li>
<li sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="161" sourceendlinenumber="161"><p sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="161" sourceendlinenumber="161">Select the Headers tab in the lower pane and copy the <strong>Location</strong> header:</p>
</li>
</ul>
<p sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="163" sourceendlinenumber="163"><img src="first-web-api/_static/pmget.png" alt="Headers tab of the Postman console" sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="163" sourceendlinenumber="163"></p>
<p sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="165" sourceendlinenumber="165">You can use the Location header URI to access the resource you just created. Recall the <code>GetById</code> method created the <code>&quot;GetTodo&quot;</code> named route:</p>
<pre sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="167" sourceendlinenumber="170"><code class="lang-csharp">[HttpGet(&quot;{id}&quot;, Name = &quot;GetTodo&quot;)]
public IActionResult GetById(string id)
</code></pre><h3 id="update" sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="172" sourceendlinenumber="172">Update</h3>
<pre sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="174" sourceendlinenumber="174"><code class="lang-csharp" name="Main">[HttpPut(&quot;{id}&quot;)]
public IActionResult Update(long id, [FromBody] TodoItem item)
{
    if (item == null || item.Id != id)
    {
        return BadRequest();
    }

    var todo = _context.TodoItems.FirstOrDefault(t =&gt; t.Id == id);
    if (todo == null)
    {
        return NotFound();
    }

    todo.IsComplete = item.IsComplete;
    todo.Name = item.Name;

    _context.TodoItems.Update(todo);
    _context.SaveChanges();
    return new NoContentResult();
}
</code></pre><p sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="176" sourceendlinenumber="176"><code>Update</code> is similar to <code>Create</code>, but uses HTTP PUT. The response is <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html" data-raw-source="[204 (No Content)](http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html)" sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="176" sourceendlinenumber="176">204 (No Content)</a>. According to the HTTP spec, a PUT request requires the client to send the entire updated entity, not just the deltas. To support partial updates, use HTTP PATCH.</p>
<pre sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="178" sourceendlinenumber="184"><code class="lang-json">{
  &quot;key&quot;: 1,
  &quot;name&quot;: &quot;walk dog&quot;,
  &quot;isComplete&quot;: true
}
</code></pre><p sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="186" sourceendlinenumber="186"><img src="first-web-api/_static/pmcput.png" alt="Postman console showing 204 (No Content) response" sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="186" sourceendlinenumber="186"></p>
<h3 id="delete" sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="188" sourceendlinenumber="188">Delete</h3>
<pre sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="190" sourceendlinenumber="190"><code class="lang-csharp" name="Main">[HttpDelete(&quot;{id}&quot;)]
public IActionResult Delete(long id)
{
    var todo = _context.TodoItems.FirstOrDefault(t =&gt; t.Id == id);
    if (todo == null)
    {
        return NotFound();
    }

    _context.TodoItems.Remove(todo);
    _context.SaveChanges();
    return new NoContentResult();
}
</code></pre><p sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="192" sourceendlinenumber="192">The response is <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html" data-raw-source="[204 (No Content)](http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html)" sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="192" sourceendlinenumber="192">204 (No Content)</a>.</p>
<p sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="194" sourceendlinenumber="194"><img src="first-web-api/_static/pmd.png" alt="Postman console showing 204 (No Content) response" sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="194" sourceendlinenumber="194"></p>
<h2 id="next-steps" sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="196" sourceendlinenumber="196">Next steps</h2>
<ul sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="198" sourceendlinenumber="202">
<li sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="198" sourceendlinenumber="198"><a class="xref" href="../mvc/controllers/routing.html" data-raw-source="[Routing to Controller Actions](xref:mvc/controllers/routing)" sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="198" sourceendlinenumber="198">Routing to Controller Actions</a></li>
<li sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="199" sourceendlinenumber="199">For information about deploying your API, see <a href="../publishing/index.html" data-raw-source="[Publishing and Deployment](../publishing/index.md)" sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="199" sourceendlinenumber="199">Publishing and Deployment</a>.</li>
<li sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="200" sourceendlinenumber="200"><a href="https://github.com/aspnet/Docs/tree/master/aspnetcore/tutorials/first-web-api/sample" data-raw-source="[View or download sample code](https://github.com/aspnet/Docs/tree/master/aspnetcore/tutorials/first-web-api/sample)" sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="200" sourceendlinenumber="200">View or download sample code</a></li>
<li sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="201" sourceendlinenumber="201"><a href="https://www.getpostman.com/" data-raw-source="[Postman](https://www.getpostman.com/)" sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="201" sourceendlinenumber="201">Postman</a></li>
<li sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="202" sourceendlinenumber="202"><a href="https://www.telerik.com/download/fiddler" data-raw-source="[Fiddler](https://www.telerik.com/download/fiddler)" sourcefile="tutorials/first-web-api-mac.md" sourcestartlinenumber="202" sourceendlinenumber="202">Fiddler</a></li>
</ul>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                  <li>
                    <a href="https://github.com/aspnet/Docs/blob/w/riande/RP-EF/aspnetcore/tutorials/first-web-api-mac.md/#L1" class="contribution-link">Improve this Doc</a>
                  </li>
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Copyright © 2015-2017 Microsoft<br>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>
