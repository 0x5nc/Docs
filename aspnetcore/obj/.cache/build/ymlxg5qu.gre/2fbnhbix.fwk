<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Updating the generated pages </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Updating the generated pages ">
    <meta name="generator" content="docfx 2.24.0.0">
    
    <link rel="shortcut icon" href="../../favicon.ico">
    <link rel="stylesheet" href="../../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../../styles/docfx.css">
    <link rel="stylesheet" href="../../styles/main.css">
    <meta property="docfx:navrel" content="/foo">
    <meta property="docfx:tocrel" content="../../toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../../index.html">
                <img id="logo" class="svg" src="../../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="tutorials/razor-pages/da1">
<h1 id="updating-the-generated-pages" sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="14" sourceendlinenumber="14">Updating the generated pages</h1>

<p sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="16" sourceendlinenumber="16">By <a href="https://twitter.com/RickAndMSFT" data-raw-source="[Rick Anderson](https://twitter.com/RickAndMSFT)" sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="16" sourceendlinenumber="16">Rick Anderson</a></p>
<p sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="18" sourceendlinenumber="18">We have a good start to the movie app, but the presentation is not ideal. We don&#39;t want to see the time (12:00:00 AM in the image below) and <strong>ReleaseDate</strong> should be <strong>Release Date</strong> (two words).</p>
<p sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="20" sourceendlinenumber="20"><img src="sql/_static/m55.png" alt="Movie application open in Chrome showing movie data" sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="20" sourceendlinenumber="20"></p>
<h2 id="update-the-generated-code" sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="22" sourceendlinenumber="22">Update the generated code</h2>
<p sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="24" sourceendlinenumber="24">Open the <em>Models/Movie.cs</em> file and add the highlighted lines shown in the following code:</p>
<pre sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="26" sourceendlinenumber="26"><code class="lang-csharp" name="Main" highlight-lines="10-11">using System;

namespace RazorPagesMovie.Models
{
    public class Movie
    {
        public int ID { get; set; }
        public string Title { get; set; }

        [Display(Name = &quot;Release Date&quot;)]
        [DataType(DataType.Date)]
        public DateTime ReleaseDate { get; set; }
        public string Genre { get; set; }
        public decimal Price { get; set; }
    }
}
</code></pre><p sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="28" sourceendlinenumber="28">Right click on a red squiggly line &gt; ** Quick Actions and Refactorings**.</p>
<p sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="30" sourceendlinenumber="30">  <img src="da1/qa.png" alt="Contextual menu shows **&gt; Quick Actions and Refactorings**." sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="30" sourceendlinenumber="30"></p>
<p sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="32" sourceendlinenumber="32">Select <code>using System.ComponentModel.DataAnnotations;</code></p>
<p sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="34" sourceendlinenumber="34">  <img src="da1/da.png" alt="using System.ComponentModel.DataAnnotations at top of list" sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="34" sourceendlinenumber="34"></p>
<p sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="36" sourceendlinenumber="36">  Visual studio adds <code>using System.ComponentModel.DataAnnotations;</code>.</p>
<p sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="38" sourceendlinenumber="38">We&#39;ll cover <a href="https://docs.microsoft.com/aspnet/mvc/overview/older-versions/mvc-music-store/mvc-music-store-part-6" data-raw-source="[DataAnnotations](https://docs.microsoft.com/aspnet/mvc/overview/older-versions/mvc-music-store/mvc-music-store-part-6)" sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="38" sourceendlinenumber="38">DataAnnotations</a> in the next tutorial. The <a href="https://docs.microsoft.com//aspnet/core/api/microsoft.aspnetcore.mvc.modelbinding.metadata.displaymetadata" data-raw-source="[Display](https://docs.microsoft.com//aspnet/core/api/microsoft.aspnetcore.mvc.modelbinding.metadata.displaymetadata)" sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="38" sourceendlinenumber="38">Display</a> attribute specifies what to display for the name of a field (in this case &quot;Release Date&quot; instead of &quot;ReleaseDate&quot;). The <a href="https://docs.microsoft.com/aspnet/core/api/microsoft.aspnetcore.mvc.dataannotations.internal.datatypeattributeadapter" data-raw-source="[DataType](https://docs.microsoft.com/aspnet/core/api/microsoft.aspnetcore.mvc.dataannotations.internal.datatypeattributeadapter)" sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="38" sourceendlinenumber="38">DataType</a> attribute specifies the type of the data (Date), so the time information stored in the field is not displayed.</p>
<p sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="40" sourceendlinenumber="40">Browse to Pages/Movies and  hover over an <strong>Edit</strong> link to see the target URL.</p>
<p sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="42" sourceendlinenumber="42"><img src="da1/edit7.png" alt="Browser window with mouse over the Edit link and a link Url of http://localhost:1234/Movies/Edit/5 is shown" sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="42" sourceendlinenumber="42"></p>
<p sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="44" sourceendlinenumber="45">The <strong>Edit</strong>, <strong>Details</strong>, and <strong>Delete</strong> links are generated by the <a class="xref" href="../../mvc/views/tag-helpers/built-in/anchor-tag-helper.html" data-raw-source="[Anchor Tag Helper](xref:mvc/views/tag-helpers/builtin-th/anchor-tag-helper)" sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="44" sourceendlinenumber="44">Anchor Tag Helper</a> 
in the <em>Pages/Movies/Index.cshtml</em> file.</p>
<pre sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="47" sourceendlinenumber="47"><code class="lang-cshtml" name="Main" highlight-lines="16-18">@foreach (var item in Model.Movies) {
        &lt;tr&gt;
            &lt;td&gt;
                @Html.DisplayFor(modelItem =&gt; item.Title)
            &lt;/td&gt;
            &lt;td&gt;
                @Html.DisplayFor(modelItem =&gt; item.ReleaseDate)
            &lt;/td&gt;
            &lt;td&gt;
                @Html.DisplayFor(modelItem =&gt; item.Genre)
            &lt;/td&gt;
            &lt;td&gt;
                @Html.DisplayFor(modelItem =&gt; item.Price)
            &lt;/td&gt;
            &lt;td&gt;
                &lt;a asp-page=&quot;./Edit&quot; asp-route-id=&quot;@item.ID&quot;&gt;Edit&lt;/a&gt; |
                &lt;a asp-page=&quot;./Details&quot; asp-route-id=&quot;@item.ID&quot;&gt;Details&lt;/a&gt; |
                &lt;a asp-page=&quot;./Delete&quot; asp-route-id=&quot;@item.ID&quot;&gt;Delete&lt;/a&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
}
    &lt;/tbody&gt;
&lt;/table&gt;
</code></pre><p sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="49" sourceendlinenumber="49"><a class="xref" href="../../mvc/views/tag-helpers/intro.html" data-raw-source="[Tag Helpers](xref:mvc/views/tag-helpers/intro)" sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="49" sourceendlinenumber="49">Tag Helpers</a> enable server-side code to participate in creating and rendering HTML elements in Razor files. In the preceding code, the <code>AnchorTagHelper</code> dynamically generates the HTML <code>href</code> attribute value from the Razor Page (the route is relative), the <code>asp-page</code>,  and the route id (<code>asp-route-id</code>). See <a class="xref" href="../../mvc/razor-pages/index.html#url-generation-for-pages" data-raw-source="[URL generation for Pages](xref:mvc/razor-pages/index#url-generation-for-pages)" sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="49" sourceendlinenumber="49">URL generation for Pages</a> for more information.</p>
<p sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="51" sourceendlinenumber="51">Use <strong>View Source</strong> from your favorite browser to examine the generated markup. A portion of the generated HTML is shown below:</p>
<pre sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="53" sourceendlinenumber="59"><code class="lang-html">&lt;td&gt;
  &lt;a href=&quot;/Movies/Edit?id=1&quot;&gt;Edit&lt;/a&gt; |
  &lt;a href=&quot;/Movies/Details?id=1&quot;&gt;Details&lt;/a&gt; |
  &lt;a href=&quot;/Movies/Delete?id=1&quot;&gt;Delete&lt;/a&gt;
&lt;/td&gt;
</code></pre><p sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="61" sourceendlinenumber="61">The dynamically-generated links pass the movie ID with a query string (for example, <code>http://localhost:5000/Movies/Details?id=2</code> ). </p>
<p sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="63" sourceendlinenumber="63">Update the Edit, Details, and Delete Razor Pages to use the &quot;{id:int}&quot; route template. Change the page directive for each of these pages to <code>@page &quot;{id:int}&quot;</code>. Run the app and then view source. The generated HTML adds the ID to the path portion of the URL:</p>
<pre sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="65" sourceendlinenumber="71"><code class="lang-html">&lt;td&gt;
  &lt;a href=&quot;/Movies/Edit/1&quot;&gt;Edit&lt;/a&gt; |
  &lt;a href=&quot;/Movies/Details/1&quot;&gt;Details&lt;/a&gt; |
  &lt;a href=&quot;/Movies/Delete/1&quot;&gt;Delete&lt;/a&gt;
&lt;/td&gt;
</code></pre><p sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="73" sourceendlinenumber="73">A request to the page with the &quot;{id:int}&quot; route template that does <strong>not</strong> include the integer will return an HTTP 404 (not found) error. For example, <code>http://localhost:5000/Movies/Details</code> will return a 404 error. To make the ID optional, append <code>?</code> to the route constraint:</p>
<pre sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="75" sourceendlinenumber="77"><code class="lang-cshtml">@page &quot;{id:int?}&quot;
</code></pre><h3 id="update-concurrency-exception-handling" sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="79" sourceendlinenumber="79">Update concurrency exception handling</h3>
<p sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="81" sourceendlinenumber="81">Update the <code>OnPostAsync</code> method in the <em>Pages/Movies/Edit.cshtml.cs</em> file. The following highlighted code shows the changes:</p>
<pre sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="83" sourceendlinenumber="83"><code class="lang-csharp" name="Main" highlight-lines="16-23">public async Task&lt;IActionResult&gt; OnPostAsync()
{
    if (!ModelState.IsValid)
    {
        return Page();
    }

    _context.Attach(Movie).State = EntityState.Modified;

    try
    {
        await _context.SaveChangesAsync();
    }
    catch (DbUpdateConcurrencyException)
    {
        if (!_context.Movies.Any(e =&gt; e.ID == Movie.ID))
        {
            return NotFound();
        }
        else
        {
            throw;
        }
    }

    return RedirectToPage(&quot;./Index&quot;);
}
</code></pre><p sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="85" sourceendlinenumber="85">The previous code only detects concurrency exceptions when the first concurrent client deletes the movie, and the second concurrent client posts changes to the movie.</p>
<p sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="87" sourceendlinenumber="87">To test the <code>catch</code> block:</p>
<ul sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="89" sourceendlinenumber="92">
<li sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="89" sourceendlinenumber="89">Set a breakpoint on <code>catch (DbUpdateConcurrencyException)</code></li>
<li sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="90" sourceendlinenumber="90">Edit a movie.</li>
<li sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="91" sourceendlinenumber="91">In another browser window, select the <strong>Delete</strong> link for the same movie, and then delete the movie.</li>
<li sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="92" sourceendlinenumber="92">In the previous browser window, post changes to the movie.</li>
</ul>
<p sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="94" sourceendlinenumber="94">Production code would generally detect concurrency conflicts when two or more clients concurrently updated a record. See <a class="xref" href="../../data/ef-mvc/concurrency.html" data-raw-source="[Handling concurrency conflicts](xref:data/ef-mvc/concurrency)" sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="94" sourceendlinenumber="94">Handling concurrency conflicts</a> for more information.</p>
<h3 id="posting-and-binding-review" sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="96" sourceendlinenumber="96">Posting and binding review</h3>
<p sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="98" sourceendlinenumber="98">Examine the <em>Pages/Movies/Edit.cshtml.cs</em> file:</p>
<pre sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="99" sourceendlinenumber="99"><code class="lang-csharp" name="Main">public class EditModel : PageModel
{
    private readonly RazorPagesMovie.Models.MovieContext _context;

    public EditModel(RazorPagesMovie.Models.MovieContext context)
    {
        _context = context;
    }

    [BindProperty]
    public Movie Movie { get; set; }

    public async Task&lt;IActionResult&gt; OnGetAsync(int? id)
    {
        if (id == null)
        {
            return NotFound();
        }

        Movie = await _context.Movies.SingleOrDefaultAsync(m =&gt; m.ID == id);

        if (Movie == null)
        {
            return NotFound();
        }
        return Page();
    }
    
    public async Task&lt;IActionResult&gt; OnPostAsync()
    {
        if (!ModelState.IsValid)
        {
            return Page();
        }

        _context.Attach(Movie).State = EntityState.Modified;

        try
        {
            await _context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!_context.Movies.Any(e =&gt; e.ID == Movie.ID))
            {
                return NotFound();
            }
            else
            {
                throw;
            }
        }

        return RedirectToPage(&quot;./Index&quot;);
    }
}
</code></pre><p sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="101" sourceendlinenumber="101">When an HTTP GET request is made to the Movies/Edit page (for example, <code>http://localhost:5000/Movies/Edit/2</code>):</p>
<ul sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="103" sourceendlinenumber="105">
<li sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="103" sourceendlinenumber="103">The <code>OnGetAsync</code> method fetches the movie from the database and returns the <code>Page</code> method. </li>
<li sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="104" sourceendlinenumber="104">The <code>Page</code> method renders the <em>Pages/Movies/Edit.cshtml</em> Razor Page. The <em>Pages/Movies/Edit.cshtml</em> file contains the model directive (<code>@model RazorPagesMovie.Pages.Movies.EditModel</code>), which makes the the movie model available on the page.</li>
<li sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="105" sourceendlinenumber="105">The Edit form is displayed with the values from the movie.</li>
</ul>
<p sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="107" sourceendlinenumber="107">When the Movies/Edit page is posted:</p>
<ul sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="109" sourceendlinenumber="117">
<li sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="109" sourceendlinenumber="114"><p sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="109" sourceendlinenumber="109">The form values on the page are bound to the <code>Movie</code> property. The <code>[BindProperty]</code> attribute enables <a class="xref" href="../../mvc/models/model-binding.html" data-raw-source="[Model binding](xref:mvc/models/model-binding)" sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="109" sourceendlinenumber="109">Model binding</a>.</p>
<pre sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="111" sourceendlinenumber="114"><code class="lang-csharp">[BindProperty]
public Movie Movie { get; set; }
</code></pre></li>
<li sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="116" sourceendlinenumber="116"><p sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="116" sourceendlinenumber="116">If there are errors in the model state (for example, <code>ReleaseDate</code> cannot be converted to a date), the form is posted again with the submitted values.</p>
</li>
<li sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="117" sourceendlinenumber="117">If there are no model errors, the movie is saved.</li>
</ul>
<p sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="119" sourceendlinenumber="119">The HTTP GET methods in the Index, Create, and Delete Razor pages follow a similar pattern. The HTTP POST <code>OnPostAsync</code> method in the Create Razor Page follows a similar pattern to the <code>OnPostAsync</code> method in the Edit Razor Page.</p>
<p sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="121" sourceendlinenumber="121">Search is added in the next tutorial.</p>
<div class="step-by-step" sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="123" sourceendlinenumber="123"><p sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="124" sourceendlinenumber="125"><a class="xref" href="sql.html" data-raw-source="[Previous: Working with SQL Server LocalDB](xref:tutorials/razor-pages/sql)" sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="124" sourceendlinenumber="124">Previous: Working with SQL Server LocalDB</a>
<a class="xref" href="search.html" data-raw-source="[Adding Search](xref:tutorials/razor-pages/search)" sourcefile="tutorials/razor-pages/da1.md" sourcestartlinenumber="125" sourceendlinenumber="125">Adding Search</a></p>
</div>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                  <li>
                    <a href="https://github.com/aspnet/Docs/blob/w/riande/RP-EF/aspnetcore/tutorials/razor-pages/da1.md/#L1" class="contribution-link">Improve this Doc</a>
                  </li>
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Copyright © 2015-2017 Microsoft<br>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../../styles/docfx.js"></script>
    <script type="text/javascript" src="../../styles/main.js"></script>
  </body>
</html>
