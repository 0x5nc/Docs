<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Account Confirmation and Password Recovery in ASP.NET Core </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Account Confirmation and Password Recovery in ASP.NET Core ">
    <meta name="generator" content="docfx 2.24.0.0">
    
    <link rel="shortcut icon" href="../../favicon.ico">
    <link rel="stylesheet" href="../../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../../styles/docfx.css">
    <link rel="stylesheet" href="../../styles/main.css">
    <meta property="docfx:navrel" content="/foo">
    <meta property="docfx:tocrel" content="../../toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../../index.html">
                <img id="logo" class="svg" src="../../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="security/authentication/accconfirm">
<h1 id="account-confirmation-and-password-recovery-in-aspnet-core" sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="14" sourceendlinenumber="14">Account confirmation and password recovery in ASP.NET Core</h1>

<p sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="16" sourceendlinenumber="16">By <a href="https://twitter.com/RickAndMSFT" data-raw-source="[Rick Anderson](https://twitter.com/RickAndMSFT)" sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="16" sourceendlinenumber="16">Rick Anderson</a></p>
<p sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="18" sourceendlinenumber="18">This tutorial shows you how to build an ASP.NET Core app with email confirmation and password reset.</p>
<h2 id="create-a-new-aspnet-core-project" sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="20" sourceendlinenumber="20">Create a New ASP.NET Core Project</h2>
<div class="tabGroup" id="tabgroup_-r9V4YxZLv" sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="22" sourceendlinenumber="39">
<ul role="tablist">
<li role="presentation">
<a href="#tabpanel_-r9V4YxZLv_aspnetcore2x" role="tab" aria-controls="tabpanel_-r9V4YxZLv_aspnetcore2x" data-tab="aspnetcore2x" tabindex="0" aria-selected="true" sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="22" sourceendlinenumber="22">ASP.NET Core 2.x</a>
</li>
<li role="presentation">
<a href="#tabpanel_-r9V4YxZLv_aspnetcore1x" role="tab" aria-controls="tabpanel_-r9V4YxZLv_aspnetcore1x" data-tab="aspnetcore1x" tabindex="-1" sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="35" sourceendlinenumber="35">ASP.NET Core 1.x</a>
</li>
</ul>
<section id="tabpanel_-r9V4YxZLv_aspnetcore2x" role="tabpanel" data-tab="aspnetcore2x">
<p sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="24" sourceendlinenumber="24">This step applies to Visual Studio on Windows. See the next section for CLI instructions.</p>
<p sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="26" sourceendlinenumber="26">The tutorial requires Visual Studio 2017 Preview 2 or later.</p>
<ul sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="28" sourceendlinenumber="31">
<li sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="28" sourceendlinenumber="28">In Visual Studio, create a New Web Application Project.</li>
<li sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="29" sourceendlinenumber="29">Select <strong>ASP.NET Core 2.0</strong>. The following image show <strong>.NET Core</strong> selected, but you can select <strong>.NET Framework</strong>.</li>
<li sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="30" sourceendlinenumber="30">Select <strong>Change Authentication</strong> and set to <strong>Individual User Accounts</strong>.</li>
<li sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="31" sourceendlinenumber="31">Keep the default <strong>Store user accounts in-app</strong>.</li>
</ul>
<p sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="33" sourceendlinenumber="33"><img src="accconfirm/_static/2.png" alt="New Project dialog showing &quot;Individual User Accounts radio&quot; selected" sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="33" sourceendlinenumber="33"></p>
</section>
<section id="tabpanel_-r9V4YxZLv_aspnetcore1x" role="tabpanel" data-tab="aspnetcore1x" aria-hidden="true" hidden="hidden">
<p sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="37" sourceendlinenumber="37">The tutorial requires Visual Studio 2017 or later.</p>
<ul sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="39" sourceendlinenumber="40">
<li sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="39" sourceendlinenumber="39">In Visual Studio, create a New Web Application Project.</li>
<li sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="40" sourceendlinenumber="40">Select <strong>Change Authentication</strong> and set to <strong>Individual User Accounts</strong>.</li>
</ul>
<p sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="42" sourceendlinenumber="42"><img src="accconfirm/_static/indiv.png" alt="New Project dialog showing &quot;Individual User Accounts radio&quot; selected" sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="42" sourceendlinenumber="42"></p>
</section>
</div>
<h3 id="net-core-cli-project-creation-for-macos-and-linux" sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="46" sourceendlinenumber="46">.NET Core CLI project creation for macOS and Linux</h3>
<p sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="48" sourceendlinenumber="48">If you&#39;re using the CLI or SQLite, run the following in a command window:</p>
<pre sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="50" sourceendlinenumber="52"><code class="lang-console">dotnet new mvc --auth Individual
</code></pre><ul sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="54" sourceendlinenumber="56">
<li sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="54" sourceendlinenumber="54"><code>--auth Individual</code> specifies the Individual User Accounts template.</li>
<li sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="55" sourceendlinenumber="55">On Windows, add the <code>-uld</code> option. The <code>-uld</code> option creates a LocalDB connection string rather than a SQLite DB.</li>
<li sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="56" sourceendlinenumber="56">Run <code>new mvc --help</code> to get help on this command.</li>
</ul>
<h2 id="test-new-user-registration" sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="58" sourceendlinenumber="58">Test new user registration</h2>
<p sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="60" sourceendlinenumber="60">Run the app, select the <strong>Register</strong> link, and register a user. Follow the instructions to run Entity Framework Core migrations. At this  point, the only validation on the email is with the <a href="https://docs.microsoft.com/dotnet/api/system.componentmodel.dataannotations.emailaddressattribute" data-raw-source="[[EmailAddress]](https://docs.microsoft.com/dotnet/api/system.componentmodel.dataannotations.emailaddressattribute)" sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="60" sourceendlinenumber="60">[EmailAddress]</a> attribute. After you submit the registration, you are logged into the app. Later in the tutorial, we&#39;ll change this so new users cannot log in until their email has been validated.</p>
<h2 id="view-the-identity-database" sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="62" sourceendlinenumber="62">View the Identity database</h2>
<div class="tabGroup" id="tabgroup_-r9V4YxZLv-1" sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="64" sourceendlinenumber="75">
<ul role="tablist">
<li role="presentation">
<a href="#tabpanel_-r9V4YxZLv-1_sql-server" role="tab" aria-controls="tabpanel_-r9V4YxZLv-1_sql-server" data-tab="sql-server" tabindex="0" aria-selected="true" sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="64" sourceendlinenumber="64">SQL Server</a>
</li>
<li role="presentation">
<a href="#tabpanel_-r9V4YxZLv-1_sqlite" role="tab" aria-controls="tabpanel_-r9V4YxZLv-1_sqlite" data-tab="sqlite" tabindex="-1" sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="75" sourceendlinenumber="75">SQLite</a>
</li>
</ul>
<section id="tabpanel_-r9V4YxZLv-1_sql-server" role="tabpanel" data-tab="sql-server">
<ul sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="66" sourceendlinenumber="67">
<li sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="66" sourceendlinenumber="66">From the <strong>View</strong> menu, select <strong>SQL Server Object Explorer</strong> (SSOX). </li>
<li sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="67" sourceendlinenumber="67">Navigate to <strong>(localdb)MSSQLLocalDB(SQL Server 13)</strong>. Right-click on <strong>dbo.AspNetUsers</strong> &gt; <strong>View Data</strong>:</li>
</ul>
<p sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="69" sourceendlinenumber="69"><img src="accconfirm/_static/ssox.png" alt="Contextual menu on AspNetUsers table in SQL Server Object Explorer" sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="69" sourceendlinenumber="69"></p>
<p sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="71" sourceendlinenumber="71">Note the <code>EmailConfirmed</code> field is <code>False</code>.</p>
<p sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="73" sourceendlinenumber="73">You might want to use this email again in the next step when the app sends a confirmation email. Right-click on the row and select <strong>Delete</strong>. Deleting the email alias now will make it easier in the following steps.</p>
</section>
<section id="tabpanel_-r9V4YxZLv-1_sqlite" role="tabpanel" data-tab="sqlite" aria-hidden="true" hidden="hidden">
<p sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="77" sourceendlinenumber="77">See <a class="xref" href="../../tutorials/first-mvc-app-xplat/working-with-sql.html" data-raw-source="[Working with SQLite in an ASP.NET Core MVC project](xref:tutorials/first-mvc-app-xplat/working-with-sql)" sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="77" sourceendlinenumber="77">Working with SQLite in an ASP.NET Core MVC project</a> for instructions on how to view the SQLite DB. </p>
</section>
</div>
<h2 id="require-ssl-and-setup-iis-express-for-ssl" sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="81" sourceendlinenumber="81">Require SSL and setup IIS Express for SSL</h2>
<p sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="83" sourceendlinenumber="83">See <a class="xref" href="../enforcing-ssl.html" data-raw-source="[Enforcing SSL](xref:security/enforcing-ssl)" sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="83" sourceendlinenumber="83">Enforcing SSL</a>.</p>
<p sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="85" sourceendlinenumber="85"><a name="prevent-login-at-registration"></a></p>
<h2 id="require-email-confirmation" sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="86" sourceendlinenumber="86">Require email confirmation</h2>
<p sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="88" sourceendlinenumber="88">It&#39;s a best practice to confirm the email of a new user registration to verify they are not impersonating someone else (that is, they haven&#39;t registered with someone else&#39;s email). Suppose you had a discussion forum, and you wanted to prevent &quot;yli@example.com&quot; from registering as &quot;nolivetto@contoso.com.&quot; Without email confirmation, &quot;nolivetto@contoso.com&quot; could get unwanted email from your app. Suppose the user accidentally registered as &quot;ylo@example.com&quot; and hadn&#39;t noticed the misspelling of &quot;yli,&quot; they wouldn&#39;t be able to use password recovery because the app doesn&#39;t have their correct email. Email confirmation provides only limited protection from bots and doesn&#39;t provide protection from determined spammers who have many working email aliases they can use to register.</p>
<p sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="90" sourceendlinenumber="90">You generally want to prevent new users from posting any data to your web site before they have a confirmed email. </p>
<p sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="92" sourceendlinenumber="92">Update <code>ConfigureServices</code> to require a confirmed email:</p>
<div class="tabGroup" id="tabgroup_-r9V4YxZLv-2" sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="94" sourceendlinenumber="103">
<ul role="tablist">
<li role="presentation">
<a href="#tabpanel_-r9V4YxZLv-2_aspnetcore2x" role="tab" aria-controls="tabpanel_-r9V4YxZLv-2_aspnetcore2x" data-tab="aspnetcore2x" tabindex="0" aria-selected="true" sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="94" sourceendlinenumber="94">ASP.NET Core 2.x</a>
</li>
<li role="presentation">
<a href="#tabpanel_-r9V4YxZLv-2_aspnetcore1x" role="tab" aria-controls="tabpanel_-r9V4YxZLv-2_aspnetcore1x" data-tab="aspnetcore1x" tabindex="-1" sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="99" sourceendlinenumber="99">ASP.NET Core 1.x</a>
</li>
</ul>
<section id="tabpanel_-r9V4YxZLv-2_aspnetcore2x" role="tabpanel" data-tab="aspnetcore2x">
<pre sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="96" sourceendlinenumber="96"><code class="lang-csharp" name="Main" highlight-lines="6-9">public void ConfigureServices(IServiceCollection services)
{
    services.AddDbContext&lt;ApplicationDbContext&gt;(options =&gt;
      options.UseSqlServer(Configuration.GetConnectionString(&quot;DefaultConnection&quot;)));

    services.AddIdentity&lt;ApplicationUser, IdentityRole&gt;(config =&gt;
        {
            config.SignIn.RequireConfirmedEmail = true;
        })
        .AddEntityFrameworkStores&lt;ApplicationDbContext&gt;()
        .AddDefaultTokenProviders();

    // Add application services.
    services.AddTransient&lt;IEmailSender, EmailSender&gt;();

    services.AddMvc();

    services.Configure&lt;AuthMessageSenderOptions&gt;(Configuration);
}
</code></pre></section>
<section id="tabpanel_-r9V4YxZLv-2_aspnetcore1x" role="tabpanel" data-tab="aspnetcore1x" aria-hidden="true" hidden="hidden">
<pre sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="101" sourceendlinenumber="101"><code class="lang-csharp" name="Main" highlight-lines="13-16">// Requires using Microsoft.AspNetCore.Mvc;
public void ConfigureServices(IServiceCollection services)
{
    services.Configure&lt;MvcOptions&gt;(options =&gt;
    {
        options.Filters.Add(new RequireHttpsAttribute());
    });

    // Add framework services.
    services.AddDbContext&lt;ApplicationDbContext&gt;(options =&gt;
        options.UseSqlServer(Configuration.GetConnectionString(&quot;DefaultConnection&quot;)));

    services.AddIdentity&lt;ApplicationUser, IdentityRole&gt;(config =&gt;
        {
            config.SignIn.RequireConfirmedEmail = true;
        })
        .AddEntityFrameworkStores&lt;ApplicationDbContext&gt;()
        .AddDefaultTokenProviders();

    services.AddMvc();

    // Add application services.
    services.AddTransient&lt;IEmailSender, AuthMessageSender&gt;();
    services.AddTransient&lt;ISmsSender, AuthMessageSender&gt;();

    services.Configure&lt;AuthMessageSenderOptions&gt;(Configuration);
}
</code></pre></section>
</div>
<pre sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="106" sourceendlinenumber="108"><code class="lang-csharp">config.SignIn.RequireConfirmedEmail = true;
</code></pre><p sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="109" sourceendlinenumber="109">The preceding line prevents registered users from being logged in until their email is confirmed. However, that line does not prevent new users from being logged in after they register. The default code logs in a user after they register. Once they log out, they won&#39;t be able to log in again until they register. Later in the tutorial we&#39;ll change the code so newly registered user are <strong>not</strong> logged in.</p>
<h3 id="configure-email-provider" sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="111" sourceendlinenumber="111">Configure email provider</h3>
<p sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="113" sourceendlinenumber="113">In this tutorial, SendGrid is used to send email. You need a SendGrid account and key to send email. You can use other email providers. ASP.NET Core 2.x includes <code>System.Net.Mail</code>, which allows you to send email from your app. We recommend you use SendGrid or another email service to send email.</p>
<p sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="115" sourceendlinenumber="115">The <a class="xref" href="../../fundamentals/configuration.html#options-config-objects" data-raw-source="[Options pattern](xref:fundamentals/configuration#options-config-objects)" sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="115" sourceendlinenumber="115">Options pattern</a> is used to access the user account and key settings. For more information, see <a class="xref" href="../../fundamentals/configuration.html" data-raw-source="[configuration](xref:fundamentals/configuration)" sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="115" sourceendlinenumber="115">configuration</a>.</p>
<p sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="117" sourceendlinenumber="117">Create a class to fetch the secure email key. For this sample, the <code>AuthMessageSenderOptions</code> class is created in the <em>Services/AuthMessageSenderOptions.cs</em> file.</p>
<pre sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="119" sourceendlinenumber="119"><code class="lang-csharp" name="Main">public class AuthMessageSenderOptions
{
    public string SendGridUser { get; set; }
    public string SendGridKey { get; set; }
}
</code></pre><p sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="121" sourceendlinenumber="121">Set the <code>SendGridUser</code> and <code>SendGridKey</code> with the <a href="../app-secrets.html" data-raw-source="[secret-manager tool](../app-secrets.md)" sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="121" sourceendlinenumber="121">secret-manager tool</a>. For example:</p>
<pre sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="123" sourceendlinenumber="126"><code class="lang-none">C:\WebAppl\src\WebApp1&gt;dotnet user-secrets set SendGridUser RickAndMSFT
info: Successfully saved SendGridUser = RickAndMSFT to the secret store.
</code></pre><p sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="128" sourceendlinenumber="128">On Windows, Secret Manager stores your keys/value pairs in a <em>secrets.json</em> file in the %APPDATA%/Microsoft/UserSecrets/<webappname-usersecretsid> directory.<p>
<p sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="130" sourceendlinenumber="130">The contents of the <em>secrets.json</em> file are not encrypted. The <em>secrets.json</em> file is shown below (the <code>SendGridKey</code> value has been removed.)</p>
<pre sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="132" sourceendlinenumber="137"><code class="lang-json">{
  &quot;SendGridUser&quot;: &quot;RickAndMSFT&quot;,
  &quot;SendGridKey&quot;: &quot;&lt;key removed&gt;&quot;
}
</code></pre><h3 id="configure-startup-to-use-authmessagesenderoptions" sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="139" sourceendlinenumber="139">Configure startup to use AuthMessageSenderOptions</h3>
<p sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="141" sourceendlinenumber="141">Add <code>AuthMessageSenderOptions</code> to the service container at the end of the <code>ConfigureServices</code> method in the <em>Startup.cs</em> file:</p>
<div class="tabGroup" id="tabgroup_-r9V4YxZLv-3" sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="143" sourceendlinenumber="150">
<ul role="tablist">
<li role="presentation">
<a href="#tabpanel_-r9V4YxZLv-3_aspnetcore2x" role="tab" aria-controls="tabpanel_-r9V4YxZLv-3_aspnetcore2x" data-tab="aspnetcore2x" tabindex="0" aria-selected="true" sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="143" sourceendlinenumber="143">ASP.NET Core 2.x</a>
</li>
<li role="presentation">
<a href="#tabpanel_-r9V4YxZLv-3_aspnetcore1x" role="tab" aria-controls="tabpanel_-r9V4YxZLv-3_aspnetcore1x" data-tab="aspnetcore1x" tabindex="-1" sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="147" sourceendlinenumber="147">ASP.NET Core 1.x</a>
</li>
</ul>
<section id="tabpanel_-r9V4YxZLv-3_aspnetcore2x" role="tabpanel" data-tab="aspnetcore2x">
<pre sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="145" sourceendlinenumber="145"><code class="lang-csharp" name="Main" highlight-lines="18">public void ConfigureServices(IServiceCollection services)
{
    services.AddDbContext&lt;ApplicationDbContext&gt;(options =&gt;
      options.UseSqlServer(Configuration.GetConnectionString(&quot;DefaultConnection&quot;)));

    services.AddIdentity&lt;ApplicationUser, IdentityRole&gt;(config =&gt;
        {
            config.SignIn.RequireConfirmedEmail = true;
        })
        .AddEntityFrameworkStores&lt;ApplicationDbContext&gt;()
        .AddDefaultTokenProviders();

    // Add application services.
    services.AddTransient&lt;IEmailSender, EmailSender&gt;();

    services.AddMvc();

    services.Configure&lt;AuthMessageSenderOptions&gt;(Configuration);
}
</code></pre></section>
<section id="tabpanel_-r9V4YxZLv-3_aspnetcore1x" role="tabpanel" data-tab="aspnetcore1x" aria-hidden="true" hidden="hidden">
<pre sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="148" sourceendlinenumber="148"><code class="lang-csharp" name="Main" highlight-lines="26">// Requires using Microsoft.AspNetCore.Mvc;
public void ConfigureServices(IServiceCollection services)
{
    services.Configure&lt;MvcOptions&gt;(options =&gt;
    {
        options.Filters.Add(new RequireHttpsAttribute());
    });

    // Add framework services.
    services.AddDbContext&lt;ApplicationDbContext&gt;(options =&gt;
        options.UseSqlServer(Configuration.GetConnectionString(&quot;DefaultConnection&quot;)));

    services.AddIdentity&lt;ApplicationUser, IdentityRole&gt;(config =&gt;
        {
            config.SignIn.RequireConfirmedEmail = true;
        })
        .AddEntityFrameworkStores&lt;ApplicationDbContext&gt;()
        .AddDefaultTokenProviders();

    services.AddMvc();

    // Add application services.
    services.AddTransient&lt;IEmailSender, AuthMessageSender&gt;();
    services.AddTransient&lt;ISmsSender, AuthMessageSender&gt;();

    services.Configure&lt;AuthMessageSenderOptions&gt;(Configuration);
}
</code></pre></section>
</div>
<h3 id="configure-the-authmessagesender-class" sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="152" sourceendlinenumber="152">Configure the AuthMessageSender class</h3>
<p sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="154" sourceendlinenumber="154">This tutorial shows how to add email notifications through <a href="https://sendgrid.com/" data-raw-source="[SendGrid](https://sendgrid.com/)" sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="154" sourceendlinenumber="154">SendGrid</a>, but you can send email using SMTP and other mechanisms.</p>
<ul sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="156" sourceendlinenumber="160">
<li sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="156" sourceendlinenumber="158"><p sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="156" sourceendlinenumber="156">Install the <code>SendGrid</code> NuGet package. From the Package Manager Console,  enter the following the following command:</p>
<p sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="158" sourceendlinenumber="158"><code>Install-Package SendGrid</code></p>
</li>
<li sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="160" sourceendlinenumber="160"><p sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="160" sourceendlinenumber="160">See <a href="https://sendgrid.com/free/" data-raw-source="[Get Started with SendGrid for Free](https://sendgrid.com/free/)" sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="160" sourceendlinenumber="160">Get Started with SendGrid for Free</a> to register for a free SendGrid account.</p>
</li>
</ul>
<h4 id="configure-sendgrid" sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="162" sourceendlinenumber="162">Configure SendGrid</h4>
<div class="tabGroup" id="tabgroup_-r9V4YxZLv-4" sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="164" sourceendlinenumber="176">
<ul role="tablist">
<li role="presentation">
<a href="#tabpanel_-r9V4YxZLv-4_aspnetcore2x" role="tab" aria-controls="tabpanel_-r9V4YxZLv-4_aspnetcore2x" data-tab="aspnetcore2x" tabindex="0" aria-selected="true" sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="164" sourceendlinenumber="164">ASP.NET Core 2.x</a>
</li>
<li role="presentation">
<a href="#tabpanel_-r9V4YxZLv-4_aspnetcore1x" role="tab" aria-controls="tabpanel_-r9V4YxZLv-4_aspnetcore1x" data-tab="aspnetcore1x" tabindex="-1" sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="171" sourceendlinenumber="171">ASP.NET Core 1.x</a>
</li>
</ul>
<section id="tabpanel_-r9V4YxZLv-4_aspnetcore2x" role="tabpanel" data-tab="aspnetcore2x">
<ul sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="166" sourceendlinenumber="166">
<li sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="166" sourceendlinenumber="166">Add code in <em>Services/EmailSender.cs</em> similar to the following to configure SendGrid:</li>
</ul>
<pre sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="168" sourceendlinenumber="168"><code class="lang-csharp" name="Main">using Microsoft.Extensions.Options;
using SendGrid;
using SendGrid.Helpers.Mail;
using System.Threading.Tasks;

namespace WebPW.Services
{
    public class EmailSender : IEmailSender
    {
        public EmailSender(IOptions&lt;AuthMessageSenderOptions&gt; optionsAccessor)
        {
            Options = optionsAccessor.Value;
        }

        public AuthMessageSenderOptions Options { get; } //set only via Secret Manager

        public Task SendEmailAsync(string email, string subject, string message)
        {
            return Execute(Options.SendGridKey, subject, message, email);
        }

        public Task Execute(string apiKey, string subject, string message, string email)
        {
            var client = new SendGridClient(apiKey);
            var msg = new SendGridMessage()
            {
                From = new EmailAddress(&quot;Joe@contoso.com&quot;, &quot;Joe Smith&quot;),
                Subject = subject,
                PlainTextContent = message,
                HtmlContent = message
            };
            msg.AddTo(new EmailAddress(email));
            return client.SendEmailAsync(msg);
        }
    }
}
</code></pre></section>
<section id="tabpanel_-r9V4YxZLv-4_aspnetcore1x" role="tabpanel" data-tab="aspnetcore1x" aria-hidden="true" hidden="hidden">
<ul sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="172" sourceendlinenumber="172">
<li sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="172" sourceendlinenumber="172">Add code in <em>Services/MessageServices.cs</em> similar to the following to configure SendGrid:</li>
</ul>
<pre sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="174" sourceendlinenumber="174"><code class="lang-csharp" name="Main">using Microsoft.Extensions.Options;
using SendGrid;
using SendGrid.Helpers.Mail;
using System.Threading.Tasks;

namespace WebApp1.Services
{
    public class AuthMessageSender : IEmailSender, ISmsSender
    {
        public AuthMessageSender(IOptions&lt;AuthMessageSenderOptions&gt; optionsAccessor)
        {
            Options = optionsAccessor.Value;
        }

        public AuthMessageSenderOptions Options { get; } //set only via Secret Manager
        public Task SendEmailAsync(string email, string subject, string message)
        {
            // Plug in your email service here to send an email.
            return Execute(Options.SendGridKey, subject, message, email);
        }

        public Task Execute(string apiKey, string subject, string message, string email)
        {
            var client = new SendGridClient(apiKey);
            var msg = new SendGridMessage()
            {
                From = new EmailAddress(&quot;Joe@contoso.com&quot;, &quot;Joe Smith&quot;),
                Subject = subject,
                PlainTextContent = message,
                HtmlContent = message
            };
            msg.AddTo(new EmailAddress(email));
            return client.SendEmailAsync(msg);
        }

        public Task SendSmsAsync(string number, string message)
        {
            // Plug in your SMS service here to send a text message.
            return Task.FromResult(0);
        }
    }
}
</code></pre></section>
</div>
<h2 id="enable-account-confirmation-and-password-recovery" sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="178" sourceendlinenumber="178">Enable account confirmation and password recovery</h2>
<p sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="180" sourceendlinenumber="180">The template has the code for account confirmation and password recovery. Find the <code>[HttpPost] Register</code> method in the  <em>AccountController.cs</em> file.</p>
<div class="tabGroup" id="tabgroup_-r9V4YxZLv-5" sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="182" sourceendlinenumber="206">
<ul role="tablist">
<li role="presentation">
<a href="#tabpanel_-r9V4YxZLv-5_aspnetcore2x" role="tab" aria-controls="tabpanel_-r9V4YxZLv-5_aspnetcore2x" data-tab="aspnetcore2x" tabindex="0" aria-selected="true" sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="182" sourceendlinenumber="182">ASP.NET Core 2.x</a>
</li>
<li role="presentation">
<a href="#tabpanel_-r9V4YxZLv-5_aspnetcore1x" role="tab" aria-controls="tabpanel_-r9V4YxZLv-5_aspnetcore1x" data-tab="aspnetcore1x" tabindex="-1" sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="194" sourceendlinenumber="194">ASP.NET Core 1.x</a>
</li>
</ul>
<section id="tabpanel_-r9V4YxZLv-5_aspnetcore2x" role="tabpanel" data-tab="aspnetcore2x">
<p sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="184" sourceendlinenumber="184">Prevent newly registered users from being automatically logged on by commenting out the following line:</p>
<pre sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="186" sourceendlinenumber="188"><code class="lang-csharp">await _signInManager.SignInAsync(user, isPersistent: false);
</code></pre><p sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="190" sourceendlinenumber="190">The complete method is shown with the changed line highlighted:</p>
<pre sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="192" sourceendlinenumber="192"><code class="lang-csharp" name="Main" highlight-lines="19">[HttpPost]
[AllowAnonymous]
[ValidateAntiForgeryToken]
public async Task&lt;IActionResult&gt; Register(RegisterViewModel model, string returnUrl = null)
{
    ViewData[&quot;ReturnUrl&quot;] = returnUrl;
    if (ModelState.IsValid)
    {
        var user = new ApplicationUser { UserName = model.Email, Email = model.Email };
        var result = await _userManager.CreateAsync(user, model.Password);
        if (result.Succeeded)
        {
            _logger.LogInformation(&quot;User created a new account with password.&quot;);

            var code = await _userManager.GenerateEmailConfirmationTokenAsync(user);
            var callbackUrl = Url.EmailConfirmationLink(user.Id, code, Request.Scheme);
            await _emailSender.SendEmailConfirmationAsync(model.Email, callbackUrl);

            // await _signInManager.SignInAsync(user, isPersistent: false);
            _logger.LogInformation(&quot;User created a new account with password.&quot;);
            return RedirectToLocal(returnUrl);
        }
        AddErrors(result);
    }

    // If we got this far, something failed, redisplay form
    return View(model);
}
</code></pre></section>
<section id="tabpanel_-r9V4YxZLv-5_aspnetcore1x" role="tabpanel" data-tab="aspnetcore1x" aria-hidden="true" hidden="hidden">
<p sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="196" sourceendlinenumber="196">Uncomment the code to enable account confirmation.</p>
<pre sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="198" sourceendlinenumber="198"><code class="lang-csharp" name="Main" highlight-lines="16-25">//
// POST: /Account/Register
[HttpPost]
[AllowAnonymous]
[ValidateAntiForgeryToken]
public async Task&lt;IActionResult&gt; Register(RegisterViewModel model, string returnUrl = null)
{
    ViewData[&quot;ReturnUrl&quot;] = returnUrl;
    if (ModelState.IsValid)
    {
        var user = new ApplicationUser { UserName = model.Email, Email = model.Email };
        var result = await _userManager.CreateAsync(user, model.Password);
        if (result.Succeeded)
        {
            // Send an email with this link
            var code = await _userManager.GenerateEmailConfirmationTokenAsync(user);
            var callbackUrl = Url.Action(nameof(ConfirmEmail), &quot;Account&quot;,
                new { userId = user.Id, code = code }, protocol: HttpContext.Request.Scheme);
            await _emailSender.SendEmailAsync(model.Email, &quot;Confirm your account&quot;,
        $&quot;Please confirm your account by clicking this link: &lt;a href=&#39;{callbackUrl}&#39;&gt;link&lt;/a&gt;&quot;);

            // Comment out following line to prevent a new user automatically logged on.
            // await _signInManager.SignInAsync(user, isPersistent: false);
            _logger.LogInformation(3, &quot;User created a new account with password.&quot;);
            return RedirectToLocal(returnUrl);
        }
        AddErrors(result);
    }

    // If we got this far, something failed, redisplay form
    return View(model);
}
</code></pre><p sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="200" sourceendlinenumber="200">Note: We&#39;re also preventing a newly-registered user from being automatically logged on by commenting out the following line:</p>
<pre sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="202" sourceendlinenumber="204"><code class="lang-csharp">//await _signInManager.SignInAsync(user, isPersistent: false);
</code></pre><p sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="206" sourceendlinenumber="206">Enable password recovery by uncommenting the code in the <code>ForgotPassword</code> action in the <em>Controllers/AccountController.cs</em> file.</p>
<pre sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="208" sourceendlinenumber="208"><code class="lang-csharp" name="Main" highlight-lines="17-23">//
// POST: /Account/ForgotPassword
[HttpPost]
[AllowAnonymous]
[ValidateAntiForgeryToken]
public async Task&lt;IActionResult&gt; ForgotPassword(ForgotPasswordViewModel model)
{
    if (ModelState.IsValid)
    {
        var user = await _userManager.FindByEmailAsync(model.Email);
        if (user == null || !(await _userManager.IsEmailConfirmedAsync(user)))
        {
            // Don&#39;t reveal that the user does not exist or is not confirmed.
            return View(&quot;ForgotPasswordConfirmation&quot;);
        }

        // Send an email with this link
        var code = await _userManager.GeneratePasswordResetTokenAsync(user);
        var callbackUrl = Url.Action(nameof(ResetPassword), &quot;Account&quot;,
            new { userId = user.Id, code = code }, protocol: HttpContext.Request.Scheme);
        await _emailSender.SendEmailAsync(model.Email, &quot;Reset Password&quot;,
           $&quot;Please reset your password by clicking here: &lt;a href=&#39;{callbackUrl}&#39;&gt;link&lt;/a&gt;&quot;);
        return View(&quot;ForgotPasswordConfirmation&quot;);
    }

    // If we got this far, something failed, redisplay form
    return View(model);
}
</code></pre><p sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="210" sourceendlinenumber="210">Uncomment the form element in <em>Views/Account/ForgotPassword.cshtml</em>. You might want to remove the <code>&lt;p&gt; For more information on how to enable reset password ... &lt;/p&gt;</code> element which contains a link to this article.</p>
<pre sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="212" sourceendlinenumber="212"><code class="lang-html" name="Main" highlight-lines="7-10,12,28">@model ForgotPasswordViewModel
@{
    ViewData[&quot;Title&quot;] = &quot;Forgot your password?&quot;;
}

&lt;h2&gt;@ViewData[&quot;Title&quot;]&lt;/h2&gt;
@*&lt;p&gt;
    For more information on how to enable reset password please see this
    &lt;a href=&quot;https://go.microsoft.com/fwlink/?LinkID=532713&quot;&gt;article&lt;/a&gt;.
&lt;/p&gt;*@

&lt;form asp-controller=&quot;Account&quot; asp-action=&quot;ForgotPassword&quot; method=&quot;post&quot; class=&quot;form-horizontal&quot;&gt;
    &lt;h4&gt;Enter your email.&lt;/h4&gt;
    &lt;hr /&gt;
    &lt;div asp-validation-summary=&quot;All&quot; class=&quot;text-danger&quot;&gt;&lt;/div&gt;
    &lt;div class=&quot;form-group&quot;&gt;
        &lt;label asp-for=&quot;Email&quot; class=&quot;col-md-2 control-label&quot;&gt;&lt;/label&gt;
        &lt;div class=&quot;col-md-10&quot;&gt;
            &lt;input asp-for=&quot;Email&quot; class=&quot;form-control&quot; /&gt;
            &lt;span asp-validation-for=&quot;Email&quot; class=&quot;text-danger&quot;&gt;&lt;/span&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;form-group&quot;&gt;
        &lt;div class=&quot;col-md-offset-2 col-md-10&quot;&gt;
            &lt;button type=&quot;submit&quot; class=&quot;btn btn-default&quot;&gt;Submit&lt;/button&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/form&gt;

@section Scripts {
    @{ await Html.RenderPartialAsync(&quot;_ValidationScriptsPartial&quot;); }
}
</code></pre></section>
</div>
<h2 id="register-confirm-email-and-reset-password" sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="216" sourceendlinenumber="216">Register, confirm email, and reset password</h2>
<p sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="218" sourceendlinenumber="218">Run the web app, and test the account confirmation and password recovery flow.</p>
<ul sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="220" sourceendlinenumber="227">
<li sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="220" sourceendlinenumber="222"><p sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="220" sourceendlinenumber="220">Run the app and register a new user</p>
<p sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="222" sourceendlinenumber="222"><img src="accconfirm/_static/loginaccconfirm1.png" alt="Web application Account Register view" sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="222" sourceendlinenumber="222"></p>
</li>
<li sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="224" sourceendlinenumber="224"><p sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="224" sourceendlinenumber="224">Check your email for the account confirmation link. See <a href="#debug" data-raw-source="[Debug email](#debug)" sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="224" sourceendlinenumber="224">Debug email</a> if you don&#39;t get the email.</p>
</li>
<li sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="225" sourceendlinenumber="225">Click the link to confirm your email.</li>
<li sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="226" sourceendlinenumber="226">Log in with your email and password.</li>
<li sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="227" sourceendlinenumber="227">Log off.</li>
</ul>
<h3 id="view-the-manage-page" sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="229" sourceendlinenumber="229">View the manage page</h3>
<p sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="231" sourceendlinenumber="232">Select your user name in the browser:
<img src="accconfirm/_static/un.png" alt="browser window with user name" sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="232" sourceendlinenumber="232"></p>
<p sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="234" sourceendlinenumber="234">You might need to expand the navbar to see user name.</p>
<p sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="236" sourceendlinenumber="236"><img src="accconfirm/_static/x.png" alt="navbar" sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="236" sourceendlinenumber="236"></p>
<div class="tabGroup" id="tabgroup_-r9V4YxZLv-6" sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="238" sourceendlinenumber="246">
<ul role="tablist">
<li role="presentation">
<a href="#tabpanel_-r9V4YxZLv-6_aspnetcore2x" role="tab" aria-controls="tabpanel_-r9V4YxZLv-6_aspnetcore2x" data-tab="aspnetcore2x" tabindex="0" aria-selected="true" sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="238" sourceendlinenumber="238">ASP.NET Core 2.x</a>
</li>
<li role="presentation">
<a href="#tabpanel_-r9V4YxZLv-6_aspnetcore1x" role="tab" aria-controls="tabpanel_-r9V4YxZLv-6_aspnetcore1x" data-tab="aspnetcore1x" tabindex="-1" sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="245" sourceendlinenumber="245">ASP.NET Core 1.x</a>
</li>
</ul>
<section id="tabpanel_-r9V4YxZLv-6_aspnetcore2x" role="tabpanel" data-tab="aspnetcore2x">
<p sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="240" sourceendlinenumber="240">The manage page is displayed with the <strong>Profile</strong> tab selected. The <strong>Email</strong> shows a check box indicating the email has been confirmed. </p>
<p sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="242" sourceendlinenumber="242"><img src="accconfirm/_static/rick2.png" alt="manage page" sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="242" sourceendlinenumber="242"></p>
</section>
<section id="tabpanel_-r9V4YxZLv-6_aspnetcore1x" role="tabpanel" data-tab="aspnetcore1x" aria-hidden="true" hidden="hidden">
<p sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="247" sourceendlinenumber="248">We&#39;ll talk about this page later in the tutorial.
<img src="accconfirm/_static/rick2.png" alt="manage page" sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="248" sourceendlinenumber="248"></p>
</section>
</div>
<h3 id="test-password-reset" sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="252" sourceendlinenumber="252">Test password reset</h3>
<ul sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="254" sourceendlinenumber="257">
<li sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="254" sourceendlinenumber="254">If you&#39;re logged in, select <strong>Logout</strong>.  </li>
<li sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="255" sourceendlinenumber="255">Select the <strong>Log in</strong> link and select the <strong>Forgot your password?</strong> link.</li>
<li sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="256" sourceendlinenumber="256">Enter the email you used to register the account.</li>
<li sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="257" sourceendlinenumber="257">An email with a link to reset your password will be sent. Check your email and click the link to reset your password.  After your password has been successfully reset, you can login with your email and new password.</li>
</ul>
<p sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="259" sourceendlinenumber="259"><a name="debug"></a></p>
<h3 id="debug-email" sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="261" sourceendlinenumber="261">Debug email</h3>
<p sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="263" sourceendlinenumber="263">If you can&#39;t get email working:</p>
<ul sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="265" sourceendlinenumber="269">
<li sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="265" sourceendlinenumber="265">Review the <a href="https://sendgrid.com/docs/User_Guide/email_activity.html" data-raw-source="[Email Activity](https://sendgrid.com/docs/User_Guide/email_activity.html)" sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="265" sourceendlinenumber="265">Email Activity</a> page.</li>
<li sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="266" sourceendlinenumber="266">Check your spam folder.</li>
<li sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="267" sourceendlinenumber="267">Try another email alias on a different email provider (Microsoft, Yahoo, Gmail, etc.)</li>
<li sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="268" sourceendlinenumber="268">Create a <a href="https://sendgrid.com/docs/Integrate/Code_Examples/v2_Mail/csharp.html" data-raw-source="[console app to send email](https://sendgrid.com/docs/Integrate/Code_Examples/v2_Mail/csharp.html)" sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="268" sourceendlinenumber="268">console app to send email</a>.</li>
<li sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="269" sourceendlinenumber="269">Try sending to different email accounts.</li>
</ul>
<p sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="271" sourceendlinenumber="271"><strong>Note:</strong> A security best practice is to not use production secrets in test and development. If you publish the app to Azure, you can set the SendGrid secrets as application settings in the Azure Web App portal. The configuration system is setup to read keys from environment variables.</p>
<h2 id="prevent-login-at-registration" sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="273" sourceendlinenumber="273">Prevent login at registration</h2>
<p sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="275" sourceendlinenumber="275">With the current templates, once a user completes the registration form, they are logged in (authenticated). You generally want to confirm their email before logging them in. In the section below, we will modify the code to require new users have a confirmed email before they are logged in. Update the <code>[HttpPost] Login</code> action in the <em>AccountController.cs</em> file with the following highlighted changes.</p>
<pre sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="277" sourceendlinenumber="277"><code class="lang-csharp" name="Main" highlight-lines="11-21">//
// POST: /Account/Login
[HttpPost]
[AllowAnonymous]
[ValidateAntiForgeryToken]
public async Task&lt;IActionResult&gt; Login(LoginViewModel model, string returnUrl = null)
{
    ViewData[&quot;ReturnUrl&quot;] = returnUrl;
    if (ModelState.IsValid)
    {
        // Require the user to have a confirmed email before they can log on.
        var user = await _userManager.FindByEmailAsync(model.Email);
        if (user != null)
        {
            if (!await _userManager.IsEmailConfirmedAsync(user))
            {
                ModelState.AddModelError(string.Empty, 
                              &quot;You must have a confirmed email to log in.&quot;);
                return View(model);
            }
        }
        // This doesn&#39;t count login failures towards account lockout
        // To enable password failures to trigger account lockout, 
        // set lockoutOnFailure: true
        var result = await _signInManager.PasswordSignInAsync(model.Email,
            model.Password, model.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            _logger.LogInformation(1, &quot;User logged in.&quot;);
            return RedirectToLocal(returnUrl);
        }
        if (result.RequiresTwoFactor)
        {
            return RedirectToAction(nameof(SendCode),
                new { ReturnUrl = returnUrl, RememberMe = model.RememberMe });
        }
        if (result.IsLockedOut)
        {
            _logger.LogWarning(2, &quot;User account locked out.&quot;);
            return View(&quot;Lockout&quot;);
        }
        else
        {
            ModelState.AddModelError(string.Empty, &quot;Invalid login attempt.&quot;);
            return View(model);
        }
    }

    // If we got this far, something failed, redisplay form
    return View(model);
}
</code></pre><p sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="279" sourceendlinenumber="279"><strong>Note:</strong> A security best practice is to not use production secrets in test and development. If you publish the app to Azure, you can set the SendGrid secrets as application settings in the Azure Web App portal. The configuration system is setup to read keys from environment variables.</p>
<h2 id="combine-social-and-local-login-accounts" sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="282" sourceendlinenumber="282">Combine social and local login accounts</h2>
<p sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="284" sourceendlinenumber="284">Note: This section applies only to ASP.NET Core 1.x. For ASP.NET Core 2.x, see <a href="https://github.com/aspnet/Docs/issues/3753" data-raw-source="[this](https://github.com/aspnet/Docs/issues/3753)" sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="284" sourceendlinenumber="284">this</a> issue.</p>
<p sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="286" sourceendlinenumber="286">To complete this section, you must first enable an external authentication provider. See <a href="social/index.html" data-raw-source="[Enabling authentication using Facebook, Google and other external providers](social/index.md)" sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="286" sourceendlinenumber="286">Enabling authentication using Facebook, Google and other external providers</a>.</p>
<p sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="288" sourceendlinenumber="288">You can combine local and social accounts by clicking on your email link. In the following sequence, &quot;RickAndMSFT@gmail.com&quot; is first created as a local login; however, you can create the account as a social login first, then add a local login.</p>
<p sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="290" sourceendlinenumber="290"><img src="accconfirm/_static/rick.png" alt="Web application: RickAndMSFT@gmail.com user authenticated" sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="290" sourceendlinenumber="290"></p>
<p sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="292" sourceendlinenumber="292">Click on the <strong>Manage</strong> link. Note the 0 external (social logins) associated with this account.</p>
<p sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="294" sourceendlinenumber="294"><img src="accconfirm/_static/manage.png" alt="Manage view" sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="294" sourceendlinenumber="294"></p>
<p sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="296" sourceendlinenumber="296">Click the link to another login service and accept the app requests. In the image below, Facebook is the external authentication provider:</p>
<p sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="298" sourceendlinenumber="298"><img src="accconfirm/_static/fb.png" alt="Manage your external logins view listing Facebook" sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="298" sourceendlinenumber="298"></p>
<p sourcefile="security/authentication/accconfirm.md" sourcestartlinenumber="300" sourceendlinenumber="300">The two accounts have been combined. You will be able to log on with either account. You might want your users to add local accounts in case their social log in authentication service is down, or more likely they have lost access to their social account.</p>
</webappname-usersecretsid></article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                  <li>
                    <a href="https://github.com/aspnet/Docs/blob/w/riande/RP-EF/aspnetcore/security/authentication/accconfirm.md/#L1" class="contribution-link">Improve this Doc</a>
                  </li>
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Copyright © 2015-2017 Microsoft<br>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../../styles/docfx.js"></script>
    <script type="text/javascript" src="../../styles/main.js"></script>
  </body>
</html>
