<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Migrating HTTP handlers and modules to ASP.NET Core middleware </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Migrating HTTP handlers and modules to ASP.NET Core middleware ">
    <meta name="generator" content="docfx 2.24.0.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <meta property="docfx:navrel" content="/foo">
    <meta property="docfx:tocrel" content="../toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="migration/http-modules">
<h1 id="migrating-http-handlers-and-modules-to-aspnet-core-middleware" sourcefile="migration/http-modules.md" sourcestartlinenumber="15" sourceendlinenumber="15">Migrating HTTP handlers and modules to ASP.NET Core middleware</h1>

<p sourcefile="migration/http-modules.md" sourcestartlinenumber="17" sourceendlinenumber="17">By <a href="https://www.linkedin.com/in/mattperdeck" data-raw-source="[Matt Perdeck](https://www.linkedin.com/in/mattperdeck)" sourcefile="migration/http-modules.md" sourcestartlinenumber="17" sourceendlinenumber="17">Matt Perdeck</a></p>
<p sourcefile="migration/http-modules.md" sourcestartlinenumber="19" sourceendlinenumber="19">This article shows how to migrate existing ASP.NET <a href="https://docs.microsoft.com/iis/configuration/system.webserver/" data-raw-source="[HTTP modules and handlers from system.webserver](https://docs.microsoft.com/iis/configuration/system.webserver/)" sourcefile="migration/http-modules.md" sourcestartlinenumber="19" sourceendlinenumber="19">HTTP modules and handlers from system.webserver</a> to ASP.NET Core <a href="../fundamentals/middleware.html" data-raw-source="[middleware](../fundamentals/middleware.md)" sourcefile="migration/http-modules.md" sourcestartlinenumber="19" sourceendlinenumber="19">middleware</a>.</p>
<h2 id="modules-and-handlers-revisited" sourcefile="migration/http-modules.md" sourcestartlinenumber="21" sourceendlinenumber="21">Modules and handlers revisited</h2>
<p sourcefile="migration/http-modules.md" sourcestartlinenumber="23" sourceendlinenumber="23">Before proceeding to ASP.NET Core middleware, let&#39;s first recap how HTTP modules and handlers work:</p>
<p sourcefile="migration/http-modules.md" sourcestartlinenumber="25" sourceendlinenumber="25"><img src="http-modules/_static/moduleshandlers.png" alt="Modules Handler" sourcefile="migration/http-modules.md" sourcestartlinenumber="25" sourceendlinenumber="25"></p>
<p sourcefile="migration/http-modules.md" sourcestartlinenumber="27" sourceendlinenumber="27"><strong>Handlers are:</strong></p>
<ul sourcefile="migration/http-modules.md" sourcestartlinenumber="29" sourceendlinenumber="33">
<li sourcefile="migration/http-modules.md" sourcestartlinenumber="29" sourceendlinenumber="29"><p sourcefile="migration/http-modules.md" sourcestartlinenumber="29" sourceendlinenumber="29">Classes that implement <a href="https://docs.microsoft.com/dotnet/api/system.web.ihttphandler" data-raw-source="[IHttpHandler](https://docs.microsoft.com/dotnet/api/system.web.ihttphandler)" sourcefile="migration/http-modules.md" sourcestartlinenumber="29" sourceendlinenumber="29">IHttpHandler</a></p>
</li>
<li sourcefile="migration/http-modules.md" sourcestartlinenumber="31" sourceendlinenumber="31"><p sourcefile="migration/http-modules.md" sourcestartlinenumber="31" sourceendlinenumber="31">Used to handle requests with a given file name or extension, such as <em>.report</em></p>
</li>
<li sourcefile="migration/http-modules.md" sourcestartlinenumber="33" sourceendlinenumber="33"><p sourcefile="migration/http-modules.md" sourcestartlinenumber="33" sourceendlinenumber="33"><a href="https://docs.microsoft.com//iis/configuration/system.webserver/handlers/" data-raw-source="[Configured](https://docs.microsoft.com//iis/configuration/system.webserver/handlers/)" sourcefile="migration/http-modules.md" sourcestartlinenumber="33" sourceendlinenumber="33">Configured</a> in <em>Web.config</em></p>
</li>
</ul>
<p sourcefile="migration/http-modules.md" sourcestartlinenumber="35" sourceendlinenumber="35"><strong>Modules are:</strong></p>
<ul sourcefile="migration/http-modules.md" sourcestartlinenumber="37" sourceendlinenumber="45">
<li sourcefile="migration/http-modules.md" sourcestartlinenumber="37" sourceendlinenumber="37"><p sourcefile="migration/http-modules.md" sourcestartlinenumber="37" sourceendlinenumber="37">Classes that implement <a href="https://docs.microsoft.com/dotnet/api/system.web.ihttpmodule" data-raw-source="[IHttpModule](https://docs.microsoft.com/dotnet/api/system.web.ihttpmodule)" sourcefile="migration/http-modules.md" sourcestartlinenumber="37" sourceendlinenumber="37">IHttpModule</a></p>
</li>
<li sourcefile="migration/http-modules.md" sourcestartlinenumber="39" sourceendlinenumber="39"><p sourcefile="migration/http-modules.md" sourcestartlinenumber="39" sourceendlinenumber="39">Invoked for every request</p>
</li>
<li sourcefile="migration/http-modules.md" sourcestartlinenumber="41" sourceendlinenumber="41"><p sourcefile="migration/http-modules.md" sourcestartlinenumber="41" sourceendlinenumber="41">Able to short-circuit (stop further processing of a request)</p>
</li>
<li sourcefile="migration/http-modules.md" sourcestartlinenumber="43" sourceendlinenumber="43"><p sourcefile="migration/http-modules.md" sourcestartlinenumber="43" sourceendlinenumber="43">Able to add to the HTTP response, or create their own</p>
</li>
<li sourcefile="migration/http-modules.md" sourcestartlinenumber="45" sourceendlinenumber="45"><p sourcefile="migration/http-modules.md" sourcestartlinenumber="45" sourceendlinenumber="45"><a href="https://docs.microsoft.com//iis/configuration/system.webserver/modules/" data-raw-source="[Configured](https://docs.microsoft.com//iis/configuration/system.webserver/modules/)" sourcefile="migration/http-modules.md" sourcestartlinenumber="45" sourceendlinenumber="45">Configured</a> in <em>Web.config</em></p>
</li>
</ul>
<p sourcefile="migration/http-modules.md" sourcestartlinenumber="47" sourceendlinenumber="47"><strong>The order in which modules process incoming requests is determined by:</strong></p>
<ol sourcefile="migration/http-modules.md" sourcestartlinenumber="49" sourceendlinenumber="51">
<li sourcefile="migration/http-modules.md" sourcestartlinenumber="49" sourceendlinenumber="49"><p sourcefile="migration/http-modules.md" sourcestartlinenumber="49" sourceendlinenumber="49">The <a href="https://msdn.microsoft.com/library/ms227673.aspx" data-raw-source="[application life cycle](https://msdn.microsoft.com/library/ms227673.aspx)" sourcefile="migration/http-modules.md" sourcestartlinenumber="49" sourceendlinenumber="49">application life cycle</a>, which is a series events fired by ASP.NET: <a href="https://docs.microsoft.com/dotnet/api/system.web.httpapplication.beginrequest" data-raw-source="[BeginRequest](https://docs.microsoft.com/dotnet/api/system.web.httpapplication.beginrequest)" sourcefile="migration/http-modules.md" sourcestartlinenumber="49" sourceendlinenumber="49">BeginRequest</a>, <a href="https://docs.microsoft.com/dotnet/api/system.web.httpapplication.authenticaterequest" data-raw-source="[AuthenticateRequest](https://docs.microsoft.com/dotnet/api/system.web.httpapplication.authenticaterequest)" sourcefile="migration/http-modules.md" sourcestartlinenumber="49" sourceendlinenumber="49">AuthenticateRequest</a>, etc. Each module can create a handler for one or more events.</p>
</li>
<li sourcefile="migration/http-modules.md" sourcestartlinenumber="51" sourceendlinenumber="51"><p sourcefile="migration/http-modules.md" sourcestartlinenumber="51" sourceendlinenumber="51">For the same event, the order in which they are configured in <em>Web.config</em>.</p>
</li>
</ol>
<p sourcefile="migration/http-modules.md" sourcestartlinenumber="53" sourceendlinenumber="53">In addition to modules, you can add handlers for the life cycle events to your <em>Global.asax.cs</em> file. These handlers run after the handlers in the configured modules.</p>
<h2 id="from-handlers-and-modules-to-middleware" sourcefile="migration/http-modules.md" sourcestartlinenumber="55" sourceendlinenumber="55">From handlers and modules to middleware</h2>
<p sourcefile="migration/http-modules.md" sourcestartlinenumber="57" sourceendlinenumber="57"><strong>Middleware are simpler than HTTP modules and handlers:</strong></p>
<ul sourcefile="migration/http-modules.md" sourcestartlinenumber="59" sourceendlinenumber="65">
<li sourcefile="migration/http-modules.md" sourcestartlinenumber="59" sourceendlinenumber="59"><p sourcefile="migration/http-modules.md" sourcestartlinenumber="59" sourceendlinenumber="59">Modules, handlers, <em>Global.asax.cs</em>, <em>Web.config</em> (except for IIS configuration) and the application life cycle are gone</p>
</li>
<li sourcefile="migration/http-modules.md" sourcestartlinenumber="61" sourceendlinenumber="61"><p sourcefile="migration/http-modules.md" sourcestartlinenumber="61" sourceendlinenumber="61">The roles of both modules and handlers have been taken over by middleware</p>
</li>
<li sourcefile="migration/http-modules.md" sourcestartlinenumber="63" sourceendlinenumber="63"><p sourcefile="migration/http-modules.md" sourcestartlinenumber="63" sourceendlinenumber="63">Middleware are configured using code rather than in <em>Web.config</em></p>
</li>
<li sourcefile="migration/http-modules.md" sourcestartlinenumber="65" sourceendlinenumber="65"><p sourcefile="migration/http-modules.md" sourcestartlinenumber="65" sourceendlinenumber="65"><a href="../fundamentals/middleware.html#middleware-run-map-use" data-raw-source="[Pipeline branching](../fundamentals/middleware.md#middleware-run-map-use)" sourcefile="migration/http-modules.md" sourcestartlinenumber="65" sourceendlinenumber="65">Pipeline branching</a> lets you send requests to specific middleware, based on not only the URL but also on request headers, query strings, etc.</p>
</li>
</ul>
<p sourcefile="migration/http-modules.md" sourcestartlinenumber="67" sourceendlinenumber="67"><strong>Middleware are very similar to modules:</strong></p>
<ul sourcefile="migration/http-modules.md" sourcestartlinenumber="69" sourceendlinenumber="73">
<li sourcefile="migration/http-modules.md" sourcestartlinenumber="69" sourceendlinenumber="69"><p sourcefile="migration/http-modules.md" sourcestartlinenumber="69" sourceendlinenumber="69">Invoked in principle for every request</p>
</li>
<li sourcefile="migration/http-modules.md" sourcestartlinenumber="71" sourceendlinenumber="71"><p sourcefile="migration/http-modules.md" sourcestartlinenumber="71" sourceendlinenumber="71">Able to short-circuit a request, by <a href="#http-modules-shortcircuiting-middleware" data-raw-source="[not passing the request to the next middleware](#http-modules-shortcircuiting-middleware)" sourcefile="migration/http-modules.md" sourcestartlinenumber="71" sourceendlinenumber="71">not passing the request to the next middleware</a></p>
</li>
<li sourcefile="migration/http-modules.md" sourcestartlinenumber="73" sourceendlinenumber="73"><p sourcefile="migration/http-modules.md" sourcestartlinenumber="73" sourceendlinenumber="73">Able to create their own HTTP response</p>
</li>
</ul>
<p sourcefile="migration/http-modules.md" sourcestartlinenumber="75" sourceendlinenumber="75"><strong>Middleware and modules are processed in a different order:</strong></p>
<ul sourcefile="migration/http-modules.md" sourcestartlinenumber="77" sourceendlinenumber="81">
<li sourcefile="migration/http-modules.md" sourcestartlinenumber="77" sourceendlinenumber="77"><p sourcefile="migration/http-modules.md" sourcestartlinenumber="77" sourceendlinenumber="77">Order of middleware is based on the order in which they are inserted into the request pipeline, while order of modules is mainly based on <a href="https://msdn.microsoft.com/library/ms227673.aspx" data-raw-source="[application life cycle](https://msdn.microsoft.com/library/ms227673.aspx)" sourcefile="migration/http-modules.md" sourcestartlinenumber="77" sourceendlinenumber="77">application life cycle</a> events</p>
</li>
<li sourcefile="migration/http-modules.md" sourcestartlinenumber="79" sourceendlinenumber="79"><p sourcefile="migration/http-modules.md" sourcestartlinenumber="79" sourceendlinenumber="79">Order of middleware for responses is the reverse from that for requests, while order of modules is the same for requests and responses</p>
</li>
<li sourcefile="migration/http-modules.md" sourcestartlinenumber="81" sourceendlinenumber="81"><p sourcefile="migration/http-modules.md" sourcestartlinenumber="81" sourceendlinenumber="81">See <a href="../fundamentals/middleware.html#creating-a-middleware-pipeline-with-iapplicationbuilder" data-raw-source="[Creating a middleware pipeline with IApplicationBuilder](../fundamentals/middleware.md#creating-a-middleware-pipeline-with-iapplicationbuilder)" sourcefile="migration/http-modules.md" sourcestartlinenumber="81" sourceendlinenumber="81">Creating a middleware pipeline with IApplicationBuilder</a></p>
</li>
</ul>
<p sourcefile="migration/http-modules.md" sourcestartlinenumber="83" sourceendlinenumber="83"><img src="http-modules/_static/middleware.png" alt="Middleware" sourcefile="migration/http-modules.md" sourcestartlinenumber="83" sourceendlinenumber="83"></p>
<p sourcefile="migration/http-modules.md" sourcestartlinenumber="85" sourceendlinenumber="85">Note how in the image above, the authentication middleware short-circuited the request.</p>
<h2 id="migrating-module-code-to-middleware" sourcefile="migration/http-modules.md" sourcestartlinenumber="87" sourceendlinenumber="87">Migrating module code to middleware</h2>
<p sourcefile="migration/http-modules.md" sourcestartlinenumber="89" sourceendlinenumber="89">An existing HTTP module will look similar to this:</p>
<pre sourcefile="migration/http-modules.md" sourcestartlinenumber="91" sourceendlinenumber="91"><code class="lang-csharp" name="Main" highlight-lines="6,8,24,31">// ASP.NET 4 module

using System;
using System.Web;

namespace MyApp.Modules
{
    public class MyModule : IHttpModule
    {
        public void Dispose()
        {
        }

        public void Init(HttpApplication application)
        {
            application.BeginRequest += (new EventHandler(this.Application_BeginRequest));
            application.EndRequest += (new EventHandler(this.Application_EndRequest));
        }

        private void Application_BeginRequest(Object source, EventArgs e)
        {
            HttpContext context = ((HttpApplication)source).Context;

            // Do something with context near the beginning of request processing.
        }

        private void Application_EndRequest(Object source, EventArgs e)
        {
            HttpContext context = ((HttpApplication)source).Context;

            // Do something with context near the end of request processing.
        }
    }
}
</code></pre><p sourcefile="migration/http-modules.md" sourcestartlinenumber="93" sourceendlinenumber="93">As shown in the <a href="../fundamentals/middleware.html" data-raw-source="[Middleware](../fundamentals/middleware.md)" sourcefile="migration/http-modules.md" sourcestartlinenumber="93" sourceendlinenumber="93">Middleware</a> page, an ASP.NET Core middleware is a class that exposes an <code>Invoke</code> method taking an <code>HttpContext</code> and returning a <code>Task</code>. Your new middleware will look like this:</p>
<p sourcefile="migration/http-modules.md" sourcestartlinenumber="95" sourceendlinenumber="95"><a name="http-modules-usemiddleware"></a></p>
<pre sourcefile="migration/http-modules.md" sourcestartlinenumber="97" sourceendlinenumber="97"><code class="lang-csharp" name="Main" highlight-lines="9,13,20,24,28,30,32">// ASP.NET Core middleware

using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Http;
using System.Threading.Tasks;

namespace MyApp.Middleware
{
    public class MyMiddleware
    {
        private readonly RequestDelegate _next;

        public MyMiddleware(RequestDelegate next)
        {
            _next = next;
        }

        public async Task Invoke(HttpContext context)
        {
            // Do something with context near the beginning of request processing.

            await _next.Invoke(context);

            // Clean up.
        }
    }

    public static class MyMiddlewareExtensions
    {
        public static IApplicationBuilder UseMyMiddleware(this IApplicationBuilder builder)
        {
            return builder.UseMiddleware&lt;MyMiddleware&gt;();
        }
    }
}
</code></pre><p sourcefile="migration/http-modules.md" sourcestartlinenumber="99" sourceendlinenumber="99">The above middleware template was taken from the section on <a href="../fundamentals/middleware.html#middleware-writing-middleware" data-raw-source="[writing middleware](../fundamentals/middleware.md#middleware-writing-middleware)" sourcefile="migration/http-modules.md" sourcestartlinenumber="99" sourceendlinenumber="99">writing middleware</a>.</p>
<p sourcefile="migration/http-modules.md" sourcestartlinenumber="101" sourceendlinenumber="101">The <em>MyMiddlewareExtensions</em> helper class makes it easier to configure your middleware in your <code>Startup</code> class. The <code>UseMyMiddleware</code> method adds your middleware class to the request pipeline. Services required by the middleware get injected in the middleware&#39;s constructor.</p>
<p sourcefile="migration/http-modules.md" sourcestartlinenumber="103" sourceendlinenumber="103"><a name="http-modules-shortcircuiting-middleware"></a></p>
<p sourcefile="migration/http-modules.md" sourcestartlinenumber="105" sourceendlinenumber="105">Your module might terminate a request, for example if the user is not authorized:</p>
<pre sourcefile="migration/http-modules.md" sourcestartlinenumber="107" sourceendlinenumber="107"><code class="lang-csharp" name="Main" highlight-lines="9,10,11,12,13">// ASP.NET 4 module that may terminate the request

private void Application_BeginRequest(Object source, EventArgs e)
{
    HttpContext context = ((HttpApplication)source).Context;

    // Do something with context near the beginning of request processing.

    if (TerminateRequest())
    {
        context.Response.End();
        return;
    }
}
</code></pre><p sourcefile="migration/http-modules.md" sourcestartlinenumber="109" sourceendlinenumber="109">A middleware handles this by not calling <code>Invoke</code> on the next middleware in the pipeline. Keep in mind that this does not fully terminate the request, because previous middlewares will still be invoked when the response makes its way back through the pipeline.</p>
<pre sourcefile="migration/http-modules.md" sourcestartlinenumber="111" sourceendlinenumber="111"><code class="lang-csharp" name="Main" highlight-lines="7,8">// ASP.NET Core middleware that may terminate the request

public async Task Invoke(HttpContext context)
{
    // Do something with context near the beginning of request processing.

    if (!TerminateRequest())
        await _next.Invoke(context);

    // Clean up.
}
</code></pre><p sourcefile="migration/http-modules.md" sourcestartlinenumber="113" sourceendlinenumber="113">When you migrate your module&#39;s functionality to your new middleware, you may find that your code doesn&#39;t compile because the <code>HttpContext</code> class has significantly changed in ASP.NET Core. <a href="#migrating-to-the-new-httpcontext" data-raw-source="[Later on](#migrating-to-the-new-httpcontext)" sourcefile="migration/http-modules.md" sourcestartlinenumber="113" sourceendlinenumber="113">Later on</a>, you&#39;ll see how to migrate to the new ASP.NET Core HttpContext.</p>
<h2 id="migrating-module-insertion-into-the-request-pipeline" sourcefile="migration/http-modules.md" sourcestartlinenumber="115" sourceendlinenumber="115">Migrating module insertion into the request pipeline</h2>
<p sourcefile="migration/http-modules.md" sourcestartlinenumber="117" sourceendlinenumber="117">HTTP modules are typically added to the request pipeline using <em>Web.config</em>:</p>
<pre sourcefile="migration/http-modules.md" sourcestartlinenumber="119" sourceendlinenumber="119"><code class="lang-xml" name="Main" highlight-lines="6">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;!--ASP.NET 4 web.config--&gt;
&lt;configuration&gt;
  &lt;system.webServer&gt;
    &lt;modules&gt;
      &lt;add name=&quot;MyModule&quot; type=&quot;MyApp.Modules.MyModule&quot;/&gt;
    &lt;/modules&gt;
  &lt;/system.webServer&gt;
&lt;/configuration&gt;
</code></pre><p sourcefile="migration/http-modules.md" sourcestartlinenumber="121" sourceendlinenumber="121">Convert this by <a href="../fundamentals/middleware.html#creating-a-middleware-pipeline-with-iapplicationbuilder" data-raw-source="[adding your new middleware](../fundamentals/middleware.md#creating-a-middleware-pipeline-with-iapplicationbuilder)" sourcefile="migration/http-modules.md" sourcestartlinenumber="121" sourceendlinenumber="121">adding your new middleware</a> to the request pipeline in your <code>Startup</code> class:</p>
<pre sourcefile="migration/http-modules.md" sourcestartlinenumber="123" sourceendlinenumber="123"><code class="lang-csharp" name="Main" highlight-lines="16">public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)
{
    loggerFactory.AddConsole(Configuration.GetSection(&quot;Logging&quot;));
    loggerFactory.AddDebug();

    if (env.IsDevelopment())
    {
        app.UseDeveloperExceptionPage();
        app.UseBrowserLink();
    }
    else
    {
        app.UseExceptionHandler(&quot;/Home/Error&quot;);
    }

    app.UseMyMiddleware();

    app.UseMyMiddlewareWithParams();

    var myMiddlewareOptions = Configuration.GetSection(&quot;MyMiddlewareOptionsSection&quot;).Get&lt;MyMiddlewareOptions&gt;();
    var myMiddlewareOptions2 = Configuration.GetSection(&quot;MyMiddlewareOptionsSection2&quot;).Get&lt;MyMiddlewareOptions&gt;();
    app.UseMyMiddlewareWithParams(myMiddlewareOptions);
    app.UseMyMiddlewareWithParams(myMiddlewareOptions2);

    app.UseMyTerminatingMiddleware();

    // Create branch to the MyHandlerMiddleware. 
    // All requests ending in .report will follow this branch.
    app.MapWhen(
        context =&gt; context.Request.Path.ToString().EndsWith(&quot;.report&quot;),
        appBranch =&gt; {
            // ... optionally add more middleware to this branch
            appBranch.UseMyHandler();
        });

    app.MapWhen(
        context =&gt; context.Request.Path.ToString().EndsWith(&quot;.context&quot;),
        appBranch =&gt; {
            appBranch.UseHttpContextDemoMiddleware();
        });

    app.UseStaticFiles();

    app.UseMvc(routes =&gt;
    {
        routes.MapRoute(
            name: &quot;default&quot;,
            template: &quot;{controller=Home}/{action=Index}/{id?}&quot;);
    });
}
</code></pre><p sourcefile="migration/http-modules.md" sourcestartlinenumber="125" sourceendlinenumber="125">The exact spot in the pipeline where you insert your new middleware depends on the event that it handled as a module (<code>BeginRequest</code>, <code>EndRequest</code>, etc.) and its order in your list of modules in <em>Web.config</em>.</p>
<p sourcefile="migration/http-modules.md" sourcestartlinenumber="127" sourceendlinenumber="127">As previously stated, there is no application life cycle in ASP.NET Core and the order in which responses are processed by middleware differs from the order used by modules. This could make your ordering decision more challenging.</p>
<p sourcefile="migration/http-modules.md" sourcestartlinenumber="129" sourceendlinenumber="129">If ordering becomes a problem, you could split your module into multiple middleware components that can be ordered independently.</p>
<h2 id="migrating-handler-code-to-middleware" sourcefile="migration/http-modules.md" sourcestartlinenumber="131" sourceendlinenumber="131">Migrating handler code to middleware</h2>
<p sourcefile="migration/http-modules.md" sourcestartlinenumber="133" sourceendlinenumber="133">An HTTP handler looks something like this:</p>
<pre sourcefile="migration/http-modules.md" sourcestartlinenumber="135" sourceendlinenumber="135"><code class="lang-csharp" name="Main" highlight-lines="5,7,13,14,15,16">// ASP.NET 4 handler

using System.Web;

namespace MyApp.HttpHandlers
{
    public class MyHandler : IHttpHandler
    {
        public bool IsReusable { get { return true; } }

        public void ProcessRequest(HttpContext context)
        {
            string response = GenerateResponse(context);

            context.Response.ContentType = GetContentType();
            context.Response.Output.Write(response);
        }

        // ...

        private string GenerateResponse(HttpContext context)
        {
            string title = context.Request.QueryString[&quot;title&quot;];
            return string.Format(&quot;Title of the report: {0}&quot;, title);
        }

        private string GetContentType()
        {
            return &quot;text/plain&quot;;
        }
    }
}
</code></pre><p sourcefile="migration/http-modules.md" sourcestartlinenumber="137" sourceendlinenumber="137">In your ASP.NET Core project, you would translate this to a middleware similar to this:</p>
<pre sourcefile="migration/http-modules.md" sourcestartlinenumber="139" sourceendlinenumber="139"><code class="lang-csharp" name="Main" highlight-lines="7,9,13,20,21,22,23,40,42,44">// ASP.NET Core middleware migrated from a handler

using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Http;
using System.Threading.Tasks;

namespace MyApp.Middleware
{
    public class MyHandlerMiddleware
    {

        // Must have constructor with this signature, otherwise exception at run time
        public MyHandlerMiddleware(RequestDelegate next)
        {
            // This is an HTTP Handler, so no need to store next
        }

        public async Task Invoke(HttpContext context)
        {
            string response = GenerateResponse(context);

            context.Response.ContentType = GetContentType();
            await context.Response.WriteAsync(response);
        }

        // ...

        private string GenerateResponse(HttpContext context)
        {
            string title = context.Request.Query[&quot;title&quot;];
            return string.Format(&quot;Title of the report: {0}&quot;, title);
        }

        private string GetContentType()
        {
            return &quot;text/plain&quot;;
        }
    }

    public static class MyHandlerExtensions
    {
        public static IApplicationBuilder UseMyHandler(this IApplicationBuilder builder)
        {
            return builder.UseMiddleware&lt;MyHandlerMiddleware&gt;();
        }
    }
}

</code></pre><p sourcefile="migration/http-modules.md" sourcestartlinenumber="141" sourceendlinenumber="141">This middleware is very similar to the middleware corresponding to modules. The only real difference is that here there is no call to <code>_next.Invoke(context)</code>. That makes sense, because the handler is at the end of the request pipeline, so there will be no next middleware to invoke.</p>
<h2 id="migrating-handler-insertion-into-the-request-pipeline" sourcefile="migration/http-modules.md" sourcestartlinenumber="143" sourceendlinenumber="143">Migrating handler insertion into the request pipeline</h2>
<p sourcefile="migration/http-modules.md" sourcestartlinenumber="145" sourceendlinenumber="145">Configuring an HTTP handler is done in <em>Web.config</em> and looks something like this:</p>
<pre sourcefile="migration/http-modules.md" sourcestartlinenumber="147" sourceendlinenumber="147"><code class="lang-xml" name="Main" highlight-lines="6">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;!--ASP.NET 4 web.config--&gt;
&lt;configuration&gt;
  &lt;system.webServer&gt;
    &lt;handlers&gt;
      &lt;add name=&quot;MyHandler&quot; verb=&quot;*&quot; path=&quot;*.report&quot; type=&quot;MyApp.HttpHandlers.MyHandler&quot; resourceType=&quot;Unspecified&quot; preCondition=&quot;integratedMode&quot;/&gt;
    &lt;/handlers&gt;
  &lt;/system.webServer&gt;
&lt;/configuration&gt;
</code></pre><p sourcefile="migration/http-modules.md" sourcestartlinenumber="149" sourceendlinenumber="149">You could convert this by adding your new handler middleware to the request pipeline in your <code>Startup</code> class, similar to middleware converted from modules. The problem with that approach is that it would send all requests to your new handler middleware. However, you only want requests with a given extension to reach your middleware. That would give you the same functionality you had with your HTTP handler.</p>
<p sourcefile="migration/http-modules.md" sourcestartlinenumber="151" sourceendlinenumber="151">One solution is to branch the pipeline for requests with a given extension, using the <code>MapWhen</code> extension method. You do this in the same <code>Configure</code> method where you add the other middleware:</p>
<pre sourcefile="migration/http-modules.md" sourcestartlinenumber="153" sourceendlinenumber="153"><code class="lang-csharp" name="Main" highlight-lines="27-34">public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)
{
    loggerFactory.AddConsole(Configuration.GetSection(&quot;Logging&quot;));
    loggerFactory.AddDebug();

    if (env.IsDevelopment())
    {
        app.UseDeveloperExceptionPage();
        app.UseBrowserLink();
    }
    else
    {
        app.UseExceptionHandler(&quot;/Home/Error&quot;);
    }

    app.UseMyMiddleware();

    app.UseMyMiddlewareWithParams();

    var myMiddlewareOptions = Configuration.GetSection(&quot;MyMiddlewareOptionsSection&quot;).Get&lt;MyMiddlewareOptions&gt;();
    var myMiddlewareOptions2 = Configuration.GetSection(&quot;MyMiddlewareOptionsSection2&quot;).Get&lt;MyMiddlewareOptions&gt;();
    app.UseMyMiddlewareWithParams(myMiddlewareOptions);
    app.UseMyMiddlewareWithParams(myMiddlewareOptions2);

    app.UseMyTerminatingMiddleware();

    // Create branch to the MyHandlerMiddleware. 
    // All requests ending in .report will follow this branch.
    app.MapWhen(
        context =&gt; context.Request.Path.ToString().EndsWith(&quot;.report&quot;),
        appBranch =&gt; {
            // ... optionally add more middleware to this branch
            appBranch.UseMyHandler();
        });

    app.MapWhen(
        context =&gt; context.Request.Path.ToString().EndsWith(&quot;.context&quot;),
        appBranch =&gt; {
            appBranch.UseHttpContextDemoMiddleware();
        });

    app.UseStaticFiles();

    app.UseMvc(routes =&gt;
    {
        routes.MapRoute(
            name: &quot;default&quot;,
            template: &quot;{controller=Home}/{action=Index}/{id?}&quot;);
    });
}
</code></pre><p sourcefile="migration/http-modules.md" sourcestartlinenumber="155" sourceendlinenumber="155"><code>MapWhen</code> takes these parameters:</p>
<ol sourcefile="migration/http-modules.md" sourcestartlinenumber="157" sourceendlinenumber="159">
<li sourcefile="migration/http-modules.md" sourcestartlinenumber="157" sourceendlinenumber="157"><p sourcefile="migration/http-modules.md" sourcestartlinenumber="157" sourceendlinenumber="157">A lambda that takes the <code>HttpContext</code> and returns <code>true</code> if the request should go down the branch. This means you can branch requests not just based on their extension, but also on request headers, query string parameters, etc.</p>
</li>
<li sourcefile="migration/http-modules.md" sourcestartlinenumber="159" sourceendlinenumber="159"><p sourcefile="migration/http-modules.md" sourcestartlinenumber="159" sourceendlinenumber="159">A lambda that takes an <code>IApplicationBuilder</code> and adds all the middleware for the branch. This means you can add additional middleware to the branch in front of your handler middleware.</p>
</li>
</ol>
<p sourcefile="migration/http-modules.md" sourcestartlinenumber="161" sourceendlinenumber="161">Middleware added to the pipeline before the branch will be invoked on all requests; the branch will have no impact on them.</p>
<h2 id="loading-middleware-options-using-the-options-pattern" sourcefile="migration/http-modules.md" sourcestartlinenumber="163" sourceendlinenumber="163">Loading middleware options using the options pattern</h2>
<p sourcefile="migration/http-modules.md" sourcestartlinenumber="165" sourceendlinenumber="165">Some modules and handlers have configuration options that are stored in <em>Web.config</em>. However, in ASP.NET Core a new configuration model is used in place of <em>Web.config</em>.</p>
<p sourcefile="migration/http-modules.md" sourcestartlinenumber="167" sourceendlinenumber="167">The new <a href="../fundamentals/configuration.html" data-raw-source="[configuration system](../fundamentals/configuration.md)" sourcefile="migration/http-modules.md" sourcestartlinenumber="167" sourceendlinenumber="167">configuration system</a> gives you these options to solve this:</p>
<ul sourcefile="migration/http-modules.md" sourcestartlinenumber="169" sourceendlinenumber="171">
<li sourcefile="migration/http-modules.md" sourcestartlinenumber="169" sourceendlinenumber="169"><p sourcefile="migration/http-modules.md" sourcestartlinenumber="169" sourceendlinenumber="169">Directly inject the options into the middleware, as shown in the <a href="#loading-middleware-options-through-direct-injection" data-raw-source="[next section](#loading-middleware-options-through-direct-injection)" sourcefile="migration/http-modules.md" sourcestartlinenumber="169" sourceendlinenumber="169">next section</a>.</p>
</li>
<li sourcefile="migration/http-modules.md" sourcestartlinenumber="171" sourceendlinenumber="171"><p sourcefile="migration/http-modules.md" sourcestartlinenumber="171" sourceendlinenumber="171">Use the <a href="../fundamentals/configuration.html#options-config-objects" data-raw-source="[options pattern](../fundamentals/configuration.md#options-config-objects)" sourcefile="migration/http-modules.md" sourcestartlinenumber="171" sourceendlinenumber="171">options pattern</a>:</p>
</li>
</ul>
<ol sourcefile="migration/http-modules.md" sourcestartlinenumber="173" sourceendlinenumber="209">
<li sourcefile="migration/http-modules.md" sourcestartlinenumber="173" sourceendlinenumber="175"><p sourcefile="migration/http-modules.md" sourcestartlinenumber="173" sourceendlinenumber="173">Create a class to hold your middleware options, for example:</p>
<pre sourcefile="migration/http-modules.md" sourcestartlinenumber="175" sourceendlinenumber="175"><code class="lang-csharp" name="Main">public class MyMiddlewareOptions
{
    public string Param1 { get; set; }
    public string Param2 { get; set; }
}
</code></pre></li>
<li sourcefile="migration/http-modules.md" sourcestartlinenumber="177" sourceendlinenumber="183"><p sourcefile="migration/http-modules.md" sourcestartlinenumber="177" sourceendlinenumber="177">Store the option values</p>
<p sourcefile="migration/http-modules.md" sourcestartlinenumber="179" sourceendlinenumber="179">The configuration system allows you to store option values anywhere you want. However, most sites use <em>appsettings.json</em>, so we&#39;ll take that approach:</p>
<pre sourcefile="migration/http-modules.md" sourcestartlinenumber="181" sourceendlinenumber="181"><code class="lang-json" name="Main">{
  &quot;MyMiddlewareOptionsSection&quot;: {
    &quot;Param1&quot;: &quot;Param1Value&quot;,
    &quot;Param2&quot;: &quot;Param2Value&quot;
  }
}
</code></pre><p sourcefile="migration/http-modules.md" sourcestartlinenumber="183" sourceendlinenumber="183"><em>MyMiddlewareOptionsSection</em> here is a section name. It doesn&#39;t have to be the same as the name of your options class.</p>
</li>
<li sourcefile="migration/http-modules.md" sourcestartlinenumber="185" sourceendlinenumber="201"><p sourcefile="migration/http-modules.md" sourcestartlinenumber="185" sourceendlinenumber="185">Associate the option values with the options class</p>
<p sourcefile="migration/http-modules.md" sourcestartlinenumber="187" sourceendlinenumber="187"> The options pattern uses ASP.NET Core&#39;s dependency injection framework to associate the options type (such as <code>MyMiddlewareOptions</code>) with a <code>MyMiddlewareOptions</code> object that has the actual options.</p>
<p sourcefile="migration/http-modules.md" sourcestartlinenumber="189" sourceendlinenumber="189"> Update your <code>Startup</code> class:</p>
<ol sourcefile="migration/http-modules.md" sourcestartlinenumber="191" sourceendlinenumber="201">
<li sourcefile="migration/http-modules.md" sourcestartlinenumber="191" sourceendlinenumber="193"><p sourcefile="migration/http-modules.md" sourcestartlinenumber="191" sourceendlinenumber="191">If you&#39;re using <em>appsettings.json</em>, add it to the configuration builder in the <code>Startup</code> constructor:</p>
<pre sourcefile="migration/http-modules.md" sourcestartlinenumber="193" sourceendlinenumber="193"><code class="lang-csharp" name="Main" highlight-lines="5-6">public Startup(IHostingEnvironment env)
{
    var builder = new ConfigurationBuilder()
        .SetBasePath(env.ContentRootPath)
        .AddJsonFile(&quot;appsettings.json&quot;, optional: true, reloadOnChange: true)
        .AddJsonFile($&quot;appsettings.{env.EnvironmentName}.json&quot;, optional: true)
        .AddEnvironmentVariables();
    Configuration = builder.Build();
}
</code></pre></li>
<li sourcefile="migration/http-modules.md" sourcestartlinenumber="195" sourceendlinenumber="197"><p sourcefile="migration/http-modules.md" sourcestartlinenumber="195" sourceendlinenumber="195">Configure the options service:</p>
<pre sourcefile="migration/http-modules.md" sourcestartlinenumber="197" sourceendlinenumber="197"><code class="lang-csharp" name="Main" highlight-lines="4">public void ConfigureServices(IServiceCollection services)
{
    // Setup options service
    services.AddOptions();

    // Load options from section &quot;MyMiddlewareOptionsSection&quot;
    services.Configure&lt;MyMiddlewareOptions&gt;(
        Configuration.GetSection(&quot;MyMiddlewareOptionsSection&quot;));

    // Add framework services.
    services.AddMvc();
}
</code></pre></li>
<li sourcefile="migration/http-modules.md" sourcestartlinenumber="199" sourceendlinenumber="201"><p sourcefile="migration/http-modules.md" sourcestartlinenumber="199" sourceendlinenumber="199">Associate your options with your options class:</p>
<pre sourcefile="migration/http-modules.md" sourcestartlinenumber="201" sourceendlinenumber="201"><code class="lang-csharp" name="Main" highlight-lines="6-8">public void ConfigureServices(IServiceCollection services)
{
    // Setup options service
    services.AddOptions();

    // Load options from section &quot;MyMiddlewareOptionsSection&quot;
    services.Configure&lt;MyMiddlewareOptions&gt;(
        Configuration.GetSection(&quot;MyMiddlewareOptionsSection&quot;));

    // Add framework services.
    services.AddMvc();
}
</code></pre></li>
</ol>
</li>
<li sourcefile="migration/http-modules.md" sourcestartlinenumber="203" sourceendlinenumber="209"><p sourcefile="migration/http-modules.md" sourcestartlinenumber="203" sourceendlinenumber="203">Inject the options into your middleware constructor. This is similar to injecting options into a controller.</p>
<pre sourcefile="migration/http-modules.md" sourcestartlinenumber="205" sourceendlinenumber="205"><code class="lang-csharp" name="Main" highlight-lines="4,7,10,15-16">public class MyMiddlewareWithParams
{
    private readonly RequestDelegate _next;
    private readonly MyMiddlewareOptions _myMiddlewareOptions;

    public MyMiddlewareWithParams(RequestDelegate next,
        IOptions&lt;MyMiddlewareOptions&gt; optionsAccessor)
    {
        _next = next;
        _myMiddlewareOptions = optionsAccessor.Value;
    }

    public async Task Invoke(HttpContext context)
    {
        // Do something with context near the beginning of request processing
        // using configuration in _myMiddlewareOptions

        await _next.Invoke(context);

        // Do something with context near the end of request processing
        // using configuration in _myMiddlewareOptions
    }
}
</code></pre><p sourcefile="migration/http-modules.md" sourcestartlinenumber="207" sourceendlinenumber="207">The <a href="#http-modules-usemiddleware" data-raw-source="[UseMiddleware](#http-modules-usemiddleware)" sourcefile="migration/http-modules.md" sourcestartlinenumber="207" sourceendlinenumber="207">UseMiddleware</a> extension method that adds your middleware to the <code>IApplicationBuilder</code> takes care of dependency injection.</p>
<p sourcefile="migration/http-modules.md" sourcestartlinenumber="209" sourceendlinenumber="209">This is not limited to <code>IOptions</code> objects. Any other object that your middleware requires can be injected this way.</p>
</li>
</ol>
<h2 id="loading-middleware-options-through-direct-injection" sourcefile="migration/http-modules.md" sourcestartlinenumber="211" sourceendlinenumber="211">Loading middleware options through direct injection</h2>
<p sourcefile="migration/http-modules.md" sourcestartlinenumber="213" sourceendlinenumber="213">The options pattern has the advantage that it creates loose coupling between options values and their consumers. Once you&#39;ve associated an options class with the actual options values, any other class can get access to the options through the dependency injection framework. There is no need to pass around options values.</p>
<p sourcefile="migration/http-modules.md" sourcestartlinenumber="215" sourceendlinenumber="215">This breaks down though if you want to use the same middleware twice, with different options. For example an authorization middleware used in different branches allowing different roles. You can&#39;t associate two different options objects with the one options class.</p>
<p sourcefile="migration/http-modules.md" sourcestartlinenumber="217" sourceendlinenumber="217">The solution is to get the options objects with the actual options values in your <code>Startup</code> class and pass those directly to each instance of your middleware.</p>
<ol sourcefile="migration/http-modules.md" sourcestartlinenumber="219" sourceendlinenumber="233">
<li sourcefile="migration/http-modules.md" sourcestartlinenumber="219" sourceendlinenumber="223"><p sourcefile="migration/http-modules.md" sourcestartlinenumber="219" sourceendlinenumber="219">Add a second key to <em>appsettings.json</em></p>
<p sourcefile="migration/http-modules.md" sourcestartlinenumber="221" sourceendlinenumber="221">To add a second set of options to the <em>appsettings.json</em> file, use a new key to uniquely identify it:</p>
<pre sourcefile="migration/http-modules.md" sourcestartlinenumber="223" sourceendlinenumber="223"><code class="lang-json" name="Main" highlight-lines="2-5">{
  &quot;MyMiddlewareOptionsSection2&quot;: {
    &quot;Param1&quot;: &quot;Param1Value2&quot;,
    &quot;Param2&quot;: &quot;Param2Value2&quot;
  },
  &quot;MyMiddlewareOptionsSection&quot;: {
    &quot;Param1&quot;: &quot;Param1Value&quot;,
    &quot;Param2&quot;: &quot;Param2Value&quot;
  }
}
</code></pre></li>
<li sourcefile="migration/http-modules.md" sourcestartlinenumber="225" sourceendlinenumber="227"><p sourcefile="migration/http-modules.md" sourcestartlinenumber="225" sourceendlinenumber="225">Retrieve options values and pass them to middleware. The <code>Use...</code> extension method (which adds your middleware to the pipeline) is a logical place to pass in the option values: </p>
<pre sourcefile="migration/http-modules.md" sourcestartlinenumber="227" sourceendlinenumber="227"><code class="lang-csharp" name="Main" highlight-lines="20-23">public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)
{
    loggerFactory.AddConsole(Configuration.GetSection(&quot;Logging&quot;));
    loggerFactory.AddDebug();

    if (env.IsDevelopment())
    {
        app.UseDeveloperExceptionPage();
        app.UseBrowserLink();
    }
    else
    {
        app.UseExceptionHandler(&quot;/Home/Error&quot;);
    }

    app.UseMyMiddleware();

    app.UseMyMiddlewareWithParams();

    var myMiddlewareOptions = Configuration.GetSection(&quot;MyMiddlewareOptionsSection&quot;).Get&lt;MyMiddlewareOptions&gt;();
    var myMiddlewareOptions2 = Configuration.GetSection(&quot;MyMiddlewareOptionsSection2&quot;).Get&lt;MyMiddlewareOptions&gt;();
    app.UseMyMiddlewareWithParams(myMiddlewareOptions);
    app.UseMyMiddlewareWithParams(myMiddlewareOptions2);

    app.UseMyTerminatingMiddleware();

    // Create branch to the MyHandlerMiddleware. 
    // All requests ending in .report will follow this branch.
    app.MapWhen(
        context =&gt; context.Request.Path.ToString().EndsWith(&quot;.report&quot;),
        appBranch =&gt; {
            // ... optionally add more middleware to this branch
            appBranch.UseMyHandler();
        });

    app.MapWhen(
        context =&gt; context.Request.Path.ToString().EndsWith(&quot;.context&quot;),
        appBranch =&gt; {
            appBranch.UseHttpContextDemoMiddleware();
        });

    app.UseStaticFiles();

    app.UseMvc(routes =&gt;
    {
        routes.MapRoute(
            name: &quot;default&quot;,
            template: &quot;{controller=Home}/{action=Index}/{id?}&quot;);
    });
}
</code></pre></li>
<li sourcefile="migration/http-modules.md" sourcestartlinenumber="229" sourceendlinenumber="233"><p sourcefile="migration/http-modules.md" sourcestartlinenumber="229" sourceendlinenumber="229">Enable middleware to take an options parameter. Provide an overload of the <code>Use...</code> extension method (that takes the options parameter and passes it to <code>UseMiddleware</code>). When <code>UseMiddleware</code> is called with parameters, it passes the parameters to your middleware constructor when it instantiates the middleware object.</p>
<pre sourcefile="migration/http-modules.md" sourcestartlinenumber="231" sourceendlinenumber="231"><code class="lang-csharp" name="Main" highlight-lines="9-14">public static class MyMiddlewareWithParamsExtensions
{
    public static IApplicationBuilder UseMyMiddlewareWithParams(
        this IApplicationBuilder builder)
    {
        return builder.UseMiddleware&lt;MyMiddlewareWithParams&gt;();
    }

    public static IApplicationBuilder UseMyMiddlewareWithParams(
        this IApplicationBuilder builder, MyMiddlewareOptions myMiddlewareOptions)
    {
        return builder.UseMiddleware&lt;MyMiddlewareWithParams&gt;(
            new OptionsWrapper&lt;MyMiddlewareOptions&gt;(myMiddlewareOptions));
    }
}
</code></pre><p sourcefile="migration/http-modules.md" sourcestartlinenumber="233" sourceendlinenumber="233">Note how this wraps the options object in an <code>OptionsWrapper</code> object. This implements <code>IOptions</code>, as expected by the middleware constructor.</p>
</li>
</ol>
<h2 id="migrating-to-the-new-httpcontext" sourcefile="migration/http-modules.md" sourcestartlinenumber="235" sourceendlinenumber="235">Migrating to the new HttpContext</h2>
<p sourcefile="migration/http-modules.md" sourcestartlinenumber="237" sourceendlinenumber="237">You saw earlier that the <code>Invoke</code> method in your middleware takes a parameter of type <code>HttpContext</code>:</p>
<pre sourcefile="migration/http-modules.md" sourcestartlinenumber="239" sourceendlinenumber="241"><code class="lang-csharp">public async Task Invoke(HttpContext context)
</code></pre><p sourcefile="migration/http-modules.md" sourcestartlinenumber="243" sourceendlinenumber="243"><code>HttpContext</code> has significantly changed in ASP.NET Core. This section shows how to translate the most commonly used properties of <a href="https://docs.microsoft.com/dotnet/api/system.web.httpcontext" data-raw-source="[System.Web.HttpContext](https://docs.microsoft.com/dotnet/api/system.web.httpcontext)" sourcefile="migration/http-modules.md" sourcestartlinenumber="243" sourceendlinenumber="243">System.Web.HttpContext</a> to the new <code>Microsoft.AspNetCore.Http.HttpContext</code>.</p>
<h3 id="httpcontext" sourcefile="migration/http-modules.md" sourcestartlinenumber="245" sourceendlinenumber="245">HttpContext</h3>
<p sourcefile="migration/http-modules.md" sourcestartlinenumber="247" sourceendlinenumber="247"><strong>HttpContext.Items</strong> translates to:</p>
<pre sourcefile="migration/http-modules.md" sourcestartlinenumber="249" sourceendlinenumber="249"><code class="lang-csharp" name="Main">IDictionary&lt;object, object&gt; items = httpContext.Items;
</code></pre><p sourcefile="migration/http-modules.md" sourcestartlinenumber="251" sourceendlinenumber="251"><strong>Unique request ID (no System.Web.HttpContext counterpart)</strong></p>
<p sourcefile="migration/http-modules.md" sourcestartlinenumber="253" sourceendlinenumber="253">Gives you a unique id for each request. Very useful to include in your logs.</p>
<pre sourcefile="migration/http-modules.md" sourcestartlinenumber="255" sourceendlinenumber="255"><code class="lang-csharp" name="Main">string requestId = httpContext.TraceIdentifier;
</code></pre><h3 id="httpcontextrequest" sourcefile="migration/http-modules.md" sourcestartlinenumber="257" sourceendlinenumber="257">HttpContext.Request</h3>
<p sourcefile="migration/http-modules.md" sourcestartlinenumber="259" sourceendlinenumber="259"><strong>HttpContext.Request.HttpMethod</strong> translates to:</p>
<pre sourcefile="migration/http-modules.md" sourcestartlinenumber="261" sourceendlinenumber="261"><code class="lang-csharp" name="Main">string httpMethod = httpContext.Request.Method;
</code></pre><p sourcefile="migration/http-modules.md" sourcestartlinenumber="263" sourceendlinenumber="263"><strong>HttpContext.Request.QueryString</strong> translates to:</p>
<pre sourcefile="migration/http-modules.md" sourcestartlinenumber="265" sourceendlinenumber="265"><code class="lang-csharp" name="Main">IQueryCollection queryParameters = httpContext.Request.Query;

// If no query parameter &quot;key&quot; used, values will have 0 items
// If single value used for a key (...?key=v1), values will have 1 item (&quot;v1&quot;)
// If key has multiple values (...?key=v1&amp;key=v2), values will have 2 items (&quot;v1&quot; and &quot;v2&quot;)
IList&lt;string&gt; values = queryParameters[&quot;key&quot;];

// If no query parameter &quot;key&quot; used, value will be &quot;&quot;
// If single value used for a key (...?key=v1), value will be &quot;v1&quot;
// If key has multiple values (...?key=v1&amp;key=v2), value will be &quot;v1,v2&quot;
string value = queryParameters[&quot;key&quot;].ToString();
</code></pre><p sourcefile="migration/http-modules.md" sourcestartlinenumber="267" sourceendlinenumber="267"><strong>HttpContext.Request.Url</strong> and <strong>HttpContext.Request.RawUrl</strong> translate to:</p>
<pre sourcefile="migration/http-modules.md" sourcestartlinenumber="269" sourceendlinenumber="269"><code class="lang-csharp" name="Main">// using Microsoft.AspNetCore.Http.Extensions;
var url = httpContext.Request.GetDisplayUrl();
</code></pre><p sourcefile="migration/http-modules.md" sourcestartlinenumber="271" sourceendlinenumber="271"><strong>HttpContext.Request.IsSecureConnection</strong> translates to:</p>
<pre sourcefile="migration/http-modules.md" sourcestartlinenumber="273" sourceendlinenumber="273"><code class="lang-csharp" name="Main">var isSecureConnection = httpContext.Request.IsHttps;
</code></pre><p sourcefile="migration/http-modules.md" sourcestartlinenumber="275" sourceendlinenumber="275"><strong>HttpContext.Request.UserHostAddress</strong> translates to:</p>
<pre sourcefile="migration/http-modules.md" sourcestartlinenumber="277" sourceendlinenumber="277"><code class="lang-csharp" name="Main">var userHostAddress = httpContext.Connection.RemoteIpAddress?.ToString();
</code></pre><p sourcefile="migration/http-modules.md" sourcestartlinenumber="279" sourceendlinenumber="279"><strong>HttpContext.Request.Cookies</strong> translates to:</p>
<pre sourcefile="migration/http-modules.md" sourcestartlinenumber="281" sourceendlinenumber="281"><code class="lang-csharp" name="Main">IRequestCookieCollection cookies = httpContext.Request.Cookies;
string unknownCookieValue = cookies[&quot;unknownCookie&quot;]; // will be null (no exception)
string knownCookieValue = cookies[&quot;cookie1name&quot;];     // will be actual value
</code></pre><p sourcefile="migration/http-modules.md" sourcestartlinenumber="283" sourceendlinenumber="283"><strong>HttpContext.Request.RequestContext.RouteData</strong> translates to:</p>
<pre sourcefile="migration/http-modules.md" sourcestartlinenumber="285" sourceendlinenumber="285"><code class="lang-csharp" name="Main">var routeValue = httpContext.GetRouteValue(&quot;key&quot;);
</code></pre><p sourcefile="migration/http-modules.md" sourcestartlinenumber="287" sourceendlinenumber="287"><strong>HttpContext.Request.Headers</strong> translates to:</p>
<pre sourcefile="migration/http-modules.md" sourcestartlinenumber="289" sourceendlinenumber="289"><code class="lang-csharp" name="Main">// using Microsoft.AspNetCore.Http.Headers;
// using Microsoft.Net.Http.Headers;

IHeaderDictionary headersDictionary = httpContext.Request.Headers;

// GetTypedHeaders extension method provides strongly typed access to many headers
var requestHeaders = httpContext.Request.GetTypedHeaders();
CacheControlHeaderValue cacheControlHeaderValue = requestHeaders.CacheControl;

// For unknown header, unknownheaderValues has zero items and unknownheaderValue is &quot;&quot;
IList&lt;string&gt; unknownheaderValues = headersDictionary[&quot;unknownheader&quot;];
string unknownheaderValue = headersDictionary[&quot;unknownheader&quot;].ToString();

// For known header, knownheaderValues has 1 item and knownheaderValue is the value
IList&lt;string&gt; knownheaderValues = headersDictionary[HeaderNames.AcceptLanguage];
string knownheaderValue = headersDictionary[HeaderNames.AcceptLanguage].ToString();
</code></pre><p sourcefile="migration/http-modules.md" sourcestartlinenumber="291" sourceendlinenumber="291"><strong>HttpContext.Request.UserAgent</strong> translates to:</p>
<pre sourcefile="migration/http-modules.md" sourcestartlinenumber="293" sourceendlinenumber="293"><code class="lang-csharp" name="Main">string userAgent = headersDictionary[HeaderNames.UserAgent].ToString();
</code></pre><p sourcefile="migration/http-modules.md" sourcestartlinenumber="295" sourceendlinenumber="295"><strong>HttpContext.Request.UrlReferrer</strong> translates to:</p>
<pre sourcefile="migration/http-modules.md" sourcestartlinenumber="297" sourceendlinenumber="297"><code class="lang-csharp" name="Main">string urlReferrer = headersDictionary[HeaderNames.Referer].ToString();
</code></pre><p sourcefile="migration/http-modules.md" sourcestartlinenumber="299" sourceendlinenumber="299"><strong>HttpContext.Request.ContentType</strong> translates to:</p>
<pre sourcefile="migration/http-modules.md" sourcestartlinenumber="301" sourceendlinenumber="301"><code class="lang-csharp" name="Main">// using Microsoft.Net.Http.Headers;

MediaTypeHeaderValue mediaHeaderValue = requestHeaders.ContentType;
string contentType = mediaHeaderValue?.MediaType;   // ex. application/x-www-form-urlencoded
string contentMainType = mediaHeaderValue?.Type;    // ex. application
string contentSubType = mediaHeaderValue?.SubType;  // ex. x-www-form-urlencoded

System.Text.Encoding requestEncoding = mediaHeaderValue?.Encoding;
</code></pre><p sourcefile="migration/http-modules.md" sourcestartlinenumber="303" sourceendlinenumber="303"><strong>HttpContext.Request.Form</strong> translates to:</p>
<pre sourcefile="migration/http-modules.md" sourcestartlinenumber="305" sourceendlinenumber="305"><code class="lang-csharp" name="Main">if (httpContext.Request.HasFormContentType)
{
    IFormCollection form;

    form = httpContext.Request.Form; // sync
    // Or
    form = await httpContext.Request.ReadFormAsync(); // async

    string firstName = form[&quot;firstname&quot;];
    string lastName = form[&quot;lastname&quot;];
}
</code></pre><div class="WARNING" sourcefile="migration/http-modules.md" sourcestartlinenumber="307" sourceendlinenumber="307"><h5>Warning</h5><p sourcefile="migration/http-modules.md" sourcestartlinenumber="308" sourceendlinenumber="308">Read form values only if the content sub type is <em>x-www-form-urlencoded</em> or <em>form-data</em>.</p>
</div>
<p sourcefile="migration/http-modules.md" sourcestartlinenumber="310" sourceendlinenumber="310"><strong>HttpContext.Request.InputStream</strong> translates to:</p>
<pre sourcefile="migration/http-modules.md" sourcestartlinenumber="312" sourceendlinenumber="312"><code class="lang-csharp" name="Main">string inputBody;
using (var reader = new System.IO.StreamReader(
    httpContext.Request.Body, System.Text.Encoding.UTF8))
{
    inputBody = reader.ReadToEnd();
}
</code></pre><div class="WARNING" sourcefile="migration/http-modules.md" sourcestartlinenumber="314" sourceendlinenumber="314"><h5>Warning</h5><p sourcefile="migration/http-modules.md" sourcestartlinenumber="315" sourceendlinenumber="315">Use this code only in a handler type middleware, at the end of a pipeline.</p>
<p sourcefile="migration/http-modules.md" sourcestartlinenumber="317" sourceendlinenumber="317">You can read the raw body as shown above only once per request. Middleware trying to read the body after the first read will read an empty body.</p>
<p sourcefile="migration/http-modules.md" sourcestartlinenumber="319" sourceendlinenumber="319">This does not apply to reading a form as shown earlier, because that is done from a buffer.</p>
</div>
<h3 id="httpcontextresponse" sourcefile="migration/http-modules.md" sourcestartlinenumber="321" sourceendlinenumber="321">HttpContext.Response</h3>
<p sourcefile="migration/http-modules.md" sourcestartlinenumber="323" sourceendlinenumber="323"><strong>HttpContext.Response.Status</strong> and <strong>HttpContext.Response.StatusDescription</strong> translate to:</p>
<pre sourcefile="migration/http-modules.md" sourcestartlinenumber="325" sourceendlinenumber="325"><code class="lang-csharp" name="Main">// using Microsoft.AspNetCore.Http;
httpContext.Response.StatusCode = StatusCodes.Status200OK;
</code></pre><p sourcefile="migration/http-modules.md" sourcestartlinenumber="327" sourceendlinenumber="327"><strong>HttpContext.Response.ContentEncoding</strong> and <strong>HttpContext.Response.ContentType</strong> translate to:</p>
<pre sourcefile="migration/http-modules.md" sourcestartlinenumber="329" sourceendlinenumber="329"><code class="lang-csharp" name="Main">// using Microsoft.Net.Http.Headers;
var mediaType = new MediaTypeHeaderValue(&quot;application/json&quot;);
mediaType.Encoding = System.Text.Encoding.UTF8;
httpContext.Response.ContentType = mediaType.ToString();
</code></pre><p sourcefile="migration/http-modules.md" sourcestartlinenumber="331" sourceendlinenumber="331"><strong>HttpContext.Response.ContentType</strong> on its own also translates to:</p>
<pre sourcefile="migration/http-modules.md" sourcestartlinenumber="333" sourceendlinenumber="333"><code class="lang-csharp" name="Main">httpContext.Response.ContentType = &quot;text/html&quot;;
</code></pre><p sourcefile="migration/http-modules.md" sourcestartlinenumber="335" sourceendlinenumber="335"><strong>HttpContext.Response.Output</strong> translates to:</p>
<pre sourcefile="migration/http-modules.md" sourcestartlinenumber="337" sourceendlinenumber="337"><code class="lang-csharp" name="Main">string responseContent = GetResponseContent();
await httpContext.Response.WriteAsync(responseContent);
</code></pre><p sourcefile="migration/http-modules.md" sourcestartlinenumber="339" sourceendlinenumber="339"><strong>HttpContext.Response.TransmitFile</strong></p>
<p sourcefile="migration/http-modules.md" sourcestartlinenumber="341" sourceendlinenumber="341">Serving up a file is discussed <a href="../fundamentals/request-features.html#middleware-and-request-features" data-raw-source="[here](../fundamentals/request-features.md#middleware-and-request-features)" sourcefile="migration/http-modules.md" sourcestartlinenumber="341" sourceendlinenumber="341">here</a>.</p>
<p sourcefile="migration/http-modules.md" sourcestartlinenumber="343" sourceendlinenumber="343"><strong>HttpContext.Response.Headers</strong></p>
<p sourcefile="migration/http-modules.md" sourcestartlinenumber="345" sourceendlinenumber="345">Sending response headers is complicated by the fact that if you set them after anything has been written to the response body, they will not be sent.</p>
<p sourcefile="migration/http-modules.md" sourcestartlinenumber="347" sourceendlinenumber="347">The solution is to set a callback method that will be called right before writing to the response starts. This is best done at the start of the <code>Invoke</code> method in your middleware. It is this callback method that sets your response headers.</p>
<p sourcefile="migration/http-modules.md" sourcestartlinenumber="349" sourceendlinenumber="349">The following code sets a callback method called <code>SetHeaders</code>:</p>
<pre sourcefile="migration/http-modules.md" sourcestartlinenumber="351" sourceendlinenumber="356"><code class="lang-csharp">public async Task Invoke(HttpContext httpContext)
{
    // ...
    httpContext.Response.OnStarting(SetHeaders, state: httpContext);
</code></pre><p sourcefile="migration/http-modules.md" sourcestartlinenumber="358" sourceendlinenumber="358">The <code>SetHeaders</code> callback method would look like this:</p>
<pre sourcefile="migration/http-modules.md" sourcestartlinenumber="360" sourceendlinenumber="360"><code class="lang-csharp" name="Main">// using Microsoft.AspNet.Http.Headers;
// using Microsoft.Net.Http.Headers;

private Task SetHeaders(object context)
{
    var httpContext = (HttpContext)context;

    // Set header with single value
    httpContext.Response.Headers[&quot;ResponseHeaderName&quot;] = &quot;headerValue&quot;;

    // Set header with multiple values
    string[] responseHeaderValues = new string[] { &quot;headerValue1&quot;, &quot;headerValue1&quot; };
    httpContext.Response.Headers[&quot;ResponseHeaderName&quot;] = responseHeaderValues;

    // Translating ASP.NET 4&#39;s HttpContext.Response.RedirectLocation  
    httpContext.Response.Headers[HeaderNames.Location] = &quot;http://www.example.com&quot;;
    // Or
    httpContext.Response.Redirect(&quot;http://www.example.com&quot;);

    // GetTypedHeaders extension method provides strongly typed access to many headers
    var responseHeaders = httpContext.Response.GetTypedHeaders();

    // Translating ASP.NET 4&#39;s HttpContext.Response.CacheControl 
    responseHeaders.CacheControl = new CacheControlHeaderValue
    {
        MaxAge = new System.TimeSpan(365, 0, 0, 0)
        // Many more properties available 
    };

    // If you use .Net 4.6+, Task.CompletedTask will be a bit faster
    return Task.FromResult(0);
}
</code></pre><p sourcefile="migration/http-modules.md" sourcestartlinenumber="362" sourceendlinenumber="362"><strong>HttpContext.Response.Cookies</strong></p>
<p sourcefile="migration/http-modules.md" sourcestartlinenumber="364" sourceendlinenumber="364">Cookies travel to the browser in a <em>Set-Cookie</em> response header. As a result, sending cookies requires the same callback as used for sending response headers:</p>
<pre sourcefile="migration/http-modules.md" sourcestartlinenumber="366" sourceendlinenumber="372"><code class="lang-csharp">public async Task Invoke(HttpContext httpContext)
{
    // ...
    httpContext.Response.OnStarting(SetCookies, state: httpContext);
    httpContext.Response.OnStarting(SetHeaders, state: httpContext);
</code></pre><p sourcefile="migration/http-modules.md" sourcestartlinenumber="374" sourceendlinenumber="374">The <code>SetCookies</code> callback method would look like the following:</p>
<pre sourcefile="migration/http-modules.md" sourcestartlinenumber="376" sourceendlinenumber="376"><code class="lang-csharp" name="Main">private Task SetCookies(object context)
{
    var httpContext = (HttpContext)context;

    IResponseCookies responseCookies = httpContext.Response.Cookies;

    responseCookies.Append(&quot;cookie1name&quot;, &quot;cookie1value&quot;);
    responseCookies.Append(&quot;cookie2name&quot;, &quot;cookie2value&quot;,
        new CookieOptions { Expires = System.DateTime.Now.AddDays(5), HttpOnly = true });

    // If you use .Net 4.6+, Task.CompletedTask will be a bit faster
    return Task.FromResult(0); 
}
</code></pre><h2 id="additional-resources" sourcefile="migration/http-modules.md" sourcestartlinenumber="378" sourceendlinenumber="378">Additional Resources</h2>
<ul sourcefile="migration/http-modules.md" sourcestartlinenumber="380" sourceendlinenumber="386">
<li sourcefile="migration/http-modules.md" sourcestartlinenumber="380" sourceendlinenumber="380"><p sourcefile="migration/http-modules.md" sourcestartlinenumber="380" sourceendlinenumber="380"><a href="https://docs.microsoft.com/iis/configuration/system.webserver/" data-raw-source="[HTTP Handlers and HTTP Modules Overview](https://docs.microsoft.com/iis/configuration/system.webserver/)" sourcefile="migration/http-modules.md" sourcestartlinenumber="380" sourceendlinenumber="380">HTTP Handlers and HTTP Modules Overview</a></p>
</li>
<li sourcefile="migration/http-modules.md" sourcestartlinenumber="382" sourceendlinenumber="382"><p sourcefile="migration/http-modules.md" sourcestartlinenumber="382" sourceendlinenumber="382"><a href="../fundamentals/configuration.html" data-raw-source="[Configuration](../fundamentals/configuration.md)" sourcefile="migration/http-modules.md" sourcestartlinenumber="382" sourceendlinenumber="382">Configuration</a></p>
</li>
<li sourcefile="migration/http-modules.md" sourcestartlinenumber="384" sourceendlinenumber="384"><p sourcefile="migration/http-modules.md" sourcestartlinenumber="384" sourceendlinenumber="384"><a href="../fundamentals/startup.html" data-raw-source="[Application Startup](../fundamentals/startup.md)" sourcefile="migration/http-modules.md" sourcestartlinenumber="384" sourceendlinenumber="384">Application Startup</a></p>
</li>
<li sourcefile="migration/http-modules.md" sourcestartlinenumber="386" sourceendlinenumber="386"><p sourcefile="migration/http-modules.md" sourcestartlinenumber="386" sourceendlinenumber="386"><a href="../fundamentals/middleware.html" data-raw-source="[Middleware](../fundamentals/middleware.md)" sourcefile="migration/http-modules.md" sourcestartlinenumber="386" sourceendlinenumber="386">Middleware</a></p>
</li>
</ul>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                  <li>
                    <a href="https://github.com/aspnet/Docs/blob/w/riande/RP-EF/aspnetcore/migration/http-modules.md/#L1" class="contribution-link">Improve this Doc</a>
                  </li>
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Copyright © 2015-2017 Microsoft<br>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>
