<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Tag Helpers in ASP.NET Core </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Tag Helpers in ASP.NET Core ">
    <meta name="generator" content="docfx 2.24.0.0">
    
    <link rel="shortcut icon" href="../../../favicon.ico">
    <link rel="stylesheet" href="../../../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../../../styles/docfx.css">
    <link rel="stylesheet" href="../../../styles/main.css">
    <meta property="docfx:navrel" content="/foo">
    <meta property="docfx:tocrel" content="../../../toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../../../index.html">
                <img id="logo" class="svg" src="../../../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="mvc/views/tag-helpers/intro">
<h1 id="introduction-to-tag-helpers-in-aspnet-core" sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="15" sourceendlinenumber="15">Introduction to Tag Helpers in ASP.NET Core</h1>

<p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="17" sourceendlinenumber="17">By <a href="https://twitter.com/RickAndMSFT" data-raw-source="[Rick Anderson](https://twitter.com/RickAndMSFT)" sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="17" sourceendlinenumber="17">Rick Anderson</a></p>
<h2 id="what-are-tag-helpers" sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="19" sourceendlinenumber="19">What are Tag Helpers?</h2>
<p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="21" sourceendlinenumber="22">Tag Helpers enable server-side code to participate in creating and rendering HTML elements in Razor files. For example, the built-in <code>ImageTagHelper</code> can append a version number to the image name. Whenever the image changes, the server generates a new unique version for the image, so clients are guaranteed to get the current image (instead of a stale cached image). There are many built-in Tag Helpers for common tasks - such as creating forms, links, loading assets and more - and even more available in public GitHub repositories and as NuGet packages. Tag Helpers are authored in C#, and they target HTML elements based on element name, attribute name, or parent tag. For example, the built-in <code>LabelTagHelper</code> can target the HTML <code>&lt;label&gt;</code> element when the
<code>LabelTagHelper</code> attributes are applied. If you&#39;re familiar with <a href="http://stephenwalther.com/archive/2009/03/03/chapter-6-understanding-html-helpers" data-raw-source="[HTML Helpers](http://stephenwalther.com/archive/2009/03/03/chapter-6-understanding-html-helpers)" sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="22" sourceendlinenumber="22">HTML Helpers</a>, Tag Helpers reduce the explicit transitions between HTML and C# in Razor views. In many cases, HTML Helpers provide an alternative approach to a specific Tag Helper, but it&#39;s important to recognize that Tag Helpers do not replace HTML Helpers and there is not a Tag Helper for each HTML Helper. <a href="#tag-helpers-compared-to-html-helpers" data-raw-source="[Tag Helpers compared to HTML Helpers](#tag-helpers-compared-to-html-helpers)" sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="22" sourceendlinenumber="22">Tag Helpers compared to HTML Helpers</a> explains the differences in more detail.</p>
<h2 id="what-tag-helpers-provide" sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="24" sourceendlinenumber="24">What Tag Helpers provide</h2>
<p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="26" sourceendlinenumber="27"><strong>An HTML-friendly development experience</strong>
   For the most part, Razor markup using Tag Helpers looks like standard HTML. Front-end designers conversant with HTML/CSS/JavaScript can edit Razor without learning C# Razor syntax.</p>
<p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="29" sourceendlinenumber="30"><strong>A rich IntelliSense environment for creating HTML and Razor markup</strong>
   This is in sharp contrast to HTML Helpers, the previous approach to server-side creation of markup in Razor views. <a href="#tag-helpers-compared-to-html-helpers" data-raw-source="[Tag Helpers compared to HTML Helpers](#tag-helpers-compared-to-html-helpers)" sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="30" sourceendlinenumber="30">Tag Helpers compared to HTML Helpers</a> explains the differences in more detail. <a href="#intellisense-support-for-tag-helpers" data-raw-source="[IntelliSense support for Tag Helpers](#intellisense-support-for-tag-helpers)" sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="30" sourceendlinenumber="30">IntelliSense support for Tag Helpers</a> explains the IntelliSense environment. Even developers experienced with Razor C# syntax are more productive using Tag Helpers than writing C# Razor markup.</p>
<p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="32" sourceendlinenumber="34"><strong>A way to make you more productive and able to produce more robust, reliable, and maintainable code using information only available on the server</strong>
   For example, historically the mantra on updating images was to change the name of the image when you change the image. Images should be aggressively cached for performance reasons, and unless you change the name of an image, you risk clients getting a stale copy. Historically, after an image was edited, the name had to be changed and each reference to the image in the web app needed to be updated. Not only is this very labor intensive, it&#39;s also error prone (you could miss a reference, accidentally enter the wrong string, etc.) The built-in <code>ImageTagHelper</code> can do this for you automatically. The <code>ImageTagHelper</code> can append a version number to the image name, so whenever the image changes, the server automatically generates a new unique version for the image. Clients are guaranteed to get the current image. This robustness and labor savings comes essentially free by
   using the <code>ImageTagHelper</code>.</p>
<p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="36" sourceendlinenumber="36">Most of the built-in Tag Helpers target existing HTML elements and provide server-side attributes for the element. For example, the <code>&lt;input&gt;</code> element used in many of the views in the <em>Views/Account</em> folder contains the <code>asp-for</code> attribute, which extracts the name of the specified model property into the rendered HTML. The following Razor markup:</p>
<pre sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="38" sourceendlinenumber="40"><code class="lang-html">&lt;label asp-for=&quot;Email&quot;&gt;&lt;/label&gt;
</code></pre><p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="42" sourceendlinenumber="42">Generates the following HTML:</p>
<pre sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="44" sourceendlinenumber="46"><code class="lang-html">&lt;label for=&quot;Email&quot;&gt;Email&lt;/label&gt;
</code></pre><p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="48" sourceendlinenumber="48">The <code>asp-for</code> attribute is made available by the <code>For</code> property in the <code>LabelTagHelper</code>. See <a href="authoring.html" data-raw-source="[Authoring Tag Helpers](authoring.md)" sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="48" sourceendlinenumber="48">Authoring Tag Helpers</a> for more information.</p>
<h2 id="managing-tag-helper-scope" sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="50" sourceendlinenumber="50">Managing Tag Helper scope</h2>
<p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="52" sourceendlinenumber="52">Tag Helpers scope is controlled by a combination of <code>@addTagHelper</code>, <code>@removeTagHelper</code>, and the &quot;!&quot; opt-out character.</p>
<p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="54" sourceendlinenumber="54"><a name="add-helper-label"></a></p>
<h3 id="addtaghelper-makes-tag-helpers-available" sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="56" sourceendlinenumber="56"><code>@addTagHelper</code> makes Tag Helpers available</h3>
<p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="58" sourceendlinenumber="58">If you create a new ASP.NET Core web app named <em>AuthoringTagHelpers</em> (with no authentication), the following <em>Views/_ViewImports.cshtml</em> file will be added to your project:</p>
<pre sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="60" sourceendlinenumber="60"><code class="lang-html" name="Main" highlight-lines="2">@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@addTagHelper *, AuthoringTagHelpers
</code></pre><p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="62" sourceendlinenumber="62">The <code>@addTagHelper</code> directive makes Tag Helpers available to the view. In this case, the view file is <em>Views/_ViewImports.cshtml</em>, which by default is inherited by all view files in the <em>Views</em> folder and sub-directories; making Tag Helpers available. The code above uses the wildcard syntax (&quot;*&quot;) to specify that all Tag Helpers in the specified assembly (<em>Microsoft.AspNetCore.Mvc.TagHelpers</em>) will be available to every view file in the <em>Views</em> directory or sub-directory. The first parameter after <code>@addTagHelper</code> specifies the Tag Helpers to load (we are using &quot;*&quot; for all Tag Helpers), and the second parameter &quot;Microsoft.AspNetCore.Mvc.TagHelpers&quot; specifies the assembly containing the Tag Helpers. <em>Microsoft.AspNetCore.Mvc.TagHelpers</em> is the assembly for the built-in ASP.NET Core Tag Helpers.</p>
<p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="64" sourceendlinenumber="64">To expose all of the Tag Helpers in this project (which creates an assembly named <em>AuthoringTagHelpers</em>), you would use the following:</p>
<pre sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="66" sourceendlinenumber="66"><code class="lang-html" name="Main" highlight-lines="3">@using AuthoringTagHelpers
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@addTagHelper *, AuthoringTagHelpers
</code></pre><p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="68" sourceendlinenumber="68">If your project contains an <code>EmailTagHelper</code> with the default namespace (<code>AuthoringTagHelpers.TagHelpers.EmailTagHelper</code>), you can provide the fully qualified name (FQN) of the Tag Helper:</p>
<!-- literal_block {"ids": [], "linenos": false, "xml:space": "preserve", "language": "html", "highlight_args": {"hl_lines": [3]}} -->
<pre sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="72" sourceendlinenumber="76"><code class="lang-html">@using AuthoringTagHelpers
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@addTagHelper AuthoringTagHelpers.TagHelpers.EmailTagHelper, AuthoringTagHelpers
</code></pre><p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="78" sourceendlinenumber="78">To add a Tag Helper to a view using an FQN, you first add the FQN (<code>AuthoringTagHelpers.TagHelpers.EmailTagHelper</code>), and then the assembly name (<em>AuthoringTagHelpers</em>). Most developers prefer to use the  &quot;*&quot; wildcard syntax. The wildcard syntax allows you to insert the wildcard character &quot;*&quot; as the suffix in an FQN. For example, any of the following directives will bring in the <code>EmailTagHelper</code>:</p>
<pre sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="80" sourceendlinenumber="83"><code class="lang-csharp">@addTagHelper AuthoringTagHelpers.TagHelpers.E*, AuthoringTagHelpers
@addTagHelper AuthoringTagHelpers.TagHelpers.Email*, AuthoringTagHelpers
</code></pre><p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="85" sourceendlinenumber="85">As mentioned previously, adding the <code>@addTagHelper</code> directive to the <em>Views/_ViewImports.cshtml</em> file makes the Tag Helper available to all view files in the <em>Views</em> directory and sub-directories. You can use the <code>@addTagHelper</code> directive in specific view files if you want to opt-in to exposing the Tag Helper to only those views.</p>
<p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="87" sourceendlinenumber="87"><a name="remove-razor-directives-label"></a></p>
<h3 id="removetaghelper-removes-tag-helpers" sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="89" sourceendlinenumber="89"><code>@removeTagHelper</code> removes Tag Helpers</h3>
<p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="91" sourceendlinenumber="91">The <code>@removeTagHelper</code> has the same two parameters as <code>@addTagHelper</code>, and it removes a Tag Helper that was previously added. For example, <code>@removeTagHelper</code> applied to a specific view removes the specified Tag Helper from the view. Using <code>@removeTagHelper</code> in a <em>Views/Folder/_ViewImports.cshtml</em> file removes the specified Tag Helper from all of the views in <em>Folder</em>.</p>
<h3 id="controlling-tag-helper-scope-with-the-viewimportscshtml-file" sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="93" sourceendlinenumber="93">Controlling Tag Helper scope with the <em>_ViewImports.cshtml</em> file</h3>
<p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="95" sourceendlinenumber="95">You can add a <em>_ViewImports.cshtml</em> to any view folder, and the view engine applies the directives from both that file and the <em>Views/_ViewImports.cshtml</em> file. If you added an empty <em>Views/Home/_ViewImports.cshtml</em> file for the <em>Home</em> views, there would be no change because the <em>_ViewImports.cshtml</em> file is additive. Any <code>@addTagHelper</code> directives you add to the <em>Views/Home/_ViewImports.cshtml</em> file (that are not in the default <em>Views/_ViewImports.cshtml</em> file) would expose those Tag Helpers to views only in the <em>Home</em> folder.</p>
<p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="97" sourceendlinenumber="97"><a name="opt-out"></a></p>
<h3 id="opting-out-of-individual-elements" sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="99" sourceendlinenumber="99">Opting out of individual elements</h3>
<p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="101" sourceendlinenumber="101">You can disable a Tag Helper at the element level with the Tag Helper opt-out character (&quot;!&quot;). For example, <code>Email</code> validation is disabled in the <code>&lt;span&gt;</code> with the Tag Helper opt-out character:</p>
<pre sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="103" sourceendlinenumber="105"><code class="lang-csharp">&lt;!span asp-validation-for=&quot;Email&quot; class=&quot;text-danger&quot;&gt;&lt;/!span&gt;
</code></pre><p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="107" sourceendlinenumber="107">You must apply the Tag Helper opt-out character to the opening and closing tag. (The Visual Studio editor automatically adds the opt-out character to the closing tag when you add one to the opening tag). After you add the opt-out character, the element and Tag Helper attributes are no longer displayed in a distinctive font.</p>
<p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="109" sourceendlinenumber="109"><a name="prefix-razor-directives-label"></a></p>
<h3 id="using-taghelperprefix-to-make-tag-helper-usage-explicit" sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="111" sourceendlinenumber="111">Using <code>@tagHelperPrefix</code> to make Tag Helper usage explicit</h3>
<p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="113" sourceendlinenumber="113">The <code>@tagHelperPrefix</code> directive allows you to specify a tag prefix string to enable Tag Helper support and to make Tag Helper usage explicit. For example, you could add the following markup to the <em>Views/_ViewImports.cshtml</em> file:</p>
<pre sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="115" sourceendlinenumber="117"><code class="lang-html">@tagHelperPrefix th:
</code></pre><p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="118" sourceendlinenumber="118">In the code image below, the Tag Helper prefix is set to <code>th:</code>, so only those elements using the prefix <code>th:</code> support Tag Helpers (Tag Helper-enabled elements have a distinctive font). The <code>&lt;label&gt;</code> and <code>&lt;input&gt;</code> elements have the Tag Helper prefix and are Tag Helper-enabled, while the <code>&lt;span&gt;</code> element does not.</p>
<p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="120" sourceendlinenumber="120"><img src="intro/_static/thp.png" alt="image" sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="120" sourceendlinenumber="120"></p>
<p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="122" sourceendlinenumber="122">The same hierarchy rules that apply to <code>@addTagHelper</code> also apply to <code>@tagHelperPrefix</code>.</p>
<h2 id="intellisense-support-for-tag-helpers" sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="124" sourceendlinenumber="124">IntelliSense support for Tag Helpers</h2>
<p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="126" sourceendlinenumber="126">When you create a new ASP.NET web app in Visual Studio, it adds the NuGet package &quot;Microsoft.AspNetCore.Razor.Tools&quot;. This is the package that adds Tag Helper tooling.</p>
<p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="128" sourceendlinenumber="128">Consider writing an HTML <code>&lt;label&gt;</code> element. As soon as you enter <code>&lt;l</code> in the Visual Studio editor, IntelliSense displays matching elements:</p>
<p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="130" sourceendlinenumber="130"><img src="intro/_static/label.png" alt="image" sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="130" sourceendlinenumber="130"></p>
<p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="132" sourceendlinenumber="132">Not only do you get HTML help, but the icon (the &quot;@&quot; symbol with &quot;&lt;&gt;&quot; under it).</p>
<p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="134" sourceendlinenumber="134"><img src="intro/_static/tagSym.png" alt="image" sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="134" sourceendlinenumber="134"></p>
<p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="136" sourceendlinenumber="136">identifies the element as targeted by Tag Helpers. Pure HTML elements (such as the <code>fieldset</code>) display the &quot;&lt;&gt;&quot; icon.</p>
<p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="138" sourceendlinenumber="138">A pure HTML <code>&lt;label&gt;</code> tag displays the HTML tag (with the default Visual Studio color theme) in a brown font, the attributes in red, and the attribute values in blue.</p>
<p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="140" sourceendlinenumber="140"><img src="intro/_static/LableHtmlTag.png" alt="image" sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="140" sourceendlinenumber="140"></p>
<p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="142" sourceendlinenumber="142">After you enter <code>&lt;label</code>, IntelliSense lists the available HTML/CSS attributes and the Tag Helper-targeted attributes:</p>
<p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="144" sourceendlinenumber="144"><img src="intro/_static/labelattr.png" alt="image" sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="144" sourceendlinenumber="144"></p>
<p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="146" sourceendlinenumber="146">IntelliSense statement completion allows you to enter the tab key to complete the statement with the selected value:</p>
<p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="148" sourceendlinenumber="148"><img src="intro/_static/stmtcomplete.png" alt="image" sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="148" sourceendlinenumber="148"></p>
<p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="150" sourceendlinenumber="150">As soon as a Tag Helper attribute is entered, the tag and attribute fonts change. Using the default Visual Studio &quot;Blue&quot; or &quot;Light&quot; color theme, the font is bold purple. If you&#39;re using the &quot;Dark&quot; theme the font is bold teal. The images in this document were taken using the default theme.</p>
<p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="152" sourceendlinenumber="152"><img src="intro/_static/labelaspfor2.png" alt="image" sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="152" sourceendlinenumber="152"></p>
<p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="154" sourceendlinenumber="154">You can enter the Visual Studio <em>CompleteWord</em> shortcut (Ctrl +spacebar is the <a href="https://docs.microsoft.com/visualstudio/ide/default-keyboard-shortcuts-in-visual-studio" data-raw-source="[default](https://docs.microsoft.com/visualstudio/ide/default-keyboard-shortcuts-in-visual-studio)" sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="154" sourceendlinenumber="154">default</a> inside the double quotes (&quot;&quot;), and you are now in C#, just like you would be in a C# class. IntelliSense displays all the methods and properties on the page model. The methods and properties are available because the property type is <code>ModelExpression</code>. In the image below, I&#39;m editing the <code>Register</code> view, so the <code>RegisterViewModel</code> is available.</p>
<p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="156" sourceendlinenumber="156"><img src="intro/_static/intellemail.png" alt="image" sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="156" sourceendlinenumber="156"></p>
<p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="158" sourceendlinenumber="158">IntelliSense lists the properties and methods available to the model on the page. The rich IntelliSense environment helps you select the CSS class:</p>
<p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="160" sourceendlinenumber="160"><img src="intro/_static/iclass.png" alt="image" sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="160" sourceendlinenumber="160"></p>
<p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="162" sourceendlinenumber="162"><img src="intro/_static/intel3.png" alt="image" sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="162" sourceendlinenumber="162"></p>
<h2 id="tag-helpers-compared-to-html-helpers" sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="164" sourceendlinenumber="164">Tag Helpers compared to HTML Helpers</h2>
<p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="166" sourceendlinenumber="166">Tag Helpers attach to HTML elements in Razor views, while <a href="http://stephenwalther.com/archive/2009/03/03/chapter-6-understanding-html-helpers" data-raw-source="[HTML Helpers](http://stephenwalther.com/archive/2009/03/03/chapter-6-understanding-html-helpers)" sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="166" sourceendlinenumber="166">HTML Helpers</a> are invoked as methods interspersed with HTML in Razor views. Consider the following Razor markup, which creates an HTML label with the CSS class &quot;caption&quot;:</p>
<pre sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="168" sourceendlinenumber="170"><code class="lang-html">@Html.Label(&quot;FirstName&quot;, &quot;First Name:&quot;, new {@class=&quot;caption&quot;})
</code></pre><p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="172" sourceendlinenumber="172">The at (<code>@</code>) symbol tells Razor this is the start of code. The next two parameters (&quot;FirstName&quot; and &quot;First Name:&quot;) are strings, so <a href="https://docs.microsoft.com/visualstudio/ide/using-intellisense" data-raw-source="[IntelliSense](https://docs.microsoft.com/visualstudio/ide/using-intellisense)" sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="172" sourceendlinenumber="172">IntelliSense</a> can&#39;t help. The last argument:</p>
<pre sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="174" sourceendlinenumber="176"><code class="lang-html">new {@class=&quot;caption&quot;}
</code></pre><p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="178" sourceendlinenumber="178">Is an anonymous object used to represent attributes. Because <strong>class</strong> is a reserved keyword in C#, you use the <code>@</code> symbol to force C# to interpret &quot;@class=&quot; as a symbol (property name). To a front-end designer (someone familiar with HTML/CSS/JavaScript and other client technologies but not familiar with C# and Razor), most of the line is foreign. The entire line must be authored with no help from IntelliSense.</p>
<p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="180" sourceendlinenumber="180">Using the <code>LabelTagHelper</code>, the same markup can be written as:</p>
<p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="182" sourceendlinenumber="182"><img src="intro/_static/label2.png" alt="image" sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="182" sourceendlinenumber="182"></p>
<p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="184" sourceendlinenumber="184">With the Tag Helper version, as soon as you enter <code>&lt;l</code> in the Visual Studio editor, IntelliSense displays matching elements:</p>
<p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="186" sourceendlinenumber="186"><img src="intro/_static/label.png" alt="image" sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="186" sourceendlinenumber="186"></p>
<p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="188" sourceendlinenumber="188">IntelliSense helps you write the entire line. The <code>LabelTagHelper</code> also defaults to setting the content of the <code>asp-for</code> attribute value (&quot;FirstName&quot;) to &quot;First Name&quot;; It converts camel-cased properties to a sentence composed of the property name with a space where each new upper-case letter occurs. In the following markup:</p>
<p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="190" sourceendlinenumber="190"><img src="intro/_static/label2.png" alt="image" sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="190" sourceendlinenumber="190"></p>
<p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="192" sourceendlinenumber="192">generates:</p>
<pre sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="194" sourceendlinenumber="196"><code class="lang-html">&lt;label class=&quot;caption&quot; for=&quot;FirstName&quot;&gt;First Name&lt;/label&gt;
</code></pre><p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="198" sourceendlinenumber="198">The camel-cased to sentence-cased content is not used if you add content to the <code>&lt;label&gt;</code>. For example:</p>
<p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="200" sourceendlinenumber="200"><img src="intro/_static/1stName.png" alt="image" sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="200" sourceendlinenumber="200"></p>
<p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="202" sourceendlinenumber="202">generates:</p>
<pre sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="204" sourceendlinenumber="206"><code class="lang-html">&lt;label class=&quot;caption&quot; for=&quot;FirstName&quot;&gt;Name First&lt;/label&gt;
</code></pre><p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="208" sourceendlinenumber="208">The following code image shows the Form portion of the <em>Views/Account/Register.cshtml</em> Razor view generated from the legacy ASP.NET 4.5.x MVC template included with Visual Studio 2015.</p>
<p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="210" sourceendlinenumber="210"><img src="intro/_static/regCS.png" alt="image" sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="210" sourceendlinenumber="210"></p>
<p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="212" sourceendlinenumber="212">The Visual Studio editor displays C# code with a grey background. For example, the <code>AntiForgeryToken</code> HTML Helper:</p>
<pre sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="214" sourceendlinenumber="216"><code class="lang-html">@Html.AntiForgeryToken()
</code></pre><p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="218" sourceendlinenumber="218">is displayed with a grey background. Most of the markup in the Register view is C#. Compare that to the equivalent approach using Tag Helpers:</p>
<p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="220" sourceendlinenumber="220"><img src="intro/_static/regTH.png" alt="image" sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="220" sourceendlinenumber="220"></p>
<p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="222" sourceendlinenumber="222">The markup is much cleaner and easier to read, edit, and maintain than the HTML Helpers approach. The C# code is reduced to the minimum that the server needs to know about. The Visual Studio editor displays markup targeted by a Tag Helper in a distinctive font.</p>
<p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="224" sourceendlinenumber="224">Consider the <em>Email</em> group:</p>
<pre sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="226" sourceendlinenumber="226"><code class="lang-csharp" name="Main">&lt;div class=&quot;form-group&quot;&gt;
    &lt;label asp-for=&quot;Email&quot; class=&quot;col-md-2 control-label&quot;&gt;&lt;/label&gt;
    &lt;div class=&quot;col-md-10&quot;&gt;
        &lt;input asp-for=&quot;Email&quot; class=&quot;form-control&quot; /&gt;
        &lt;span asp-validation-for=&quot;Email&quot; class=&quot;text-danger&quot;&gt;&lt;/span&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre><p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="228" sourceendlinenumber="228">Each of the &quot;asp-&quot; attributes has a value of &quot;Email&quot;, but &quot;Email&quot; is not a string. In this context, &quot;Email&quot; is the C# model expression property for the <code>RegisterViewModel</code>.</p>
<p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="230" sourceendlinenumber="230">The Visual Studio editor helps you write <strong>all</strong> of the markup in the Tag Helper approach of the register form, while Visual Studio provides no help for most of the code in the HTML Helpers approach. <a href="#intellisense-support-for-tag-helpers" data-raw-source="[IntelliSense support for Tag Helpers](#intellisense-support-for-tag-helpers)" sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="230" sourceendlinenumber="230">IntelliSense support for Tag Helpers</a> goes into detail on working with Tag Helpers in the Visual Studio editor.</p>
<h2 id="tag-helpers-compared-to-web-server-controls" sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="232" sourceendlinenumber="232">Tag Helpers compared to Web Server Controls</h2>
<ul sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="234" sourceendlinenumber="248">
<li sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="234" sourceendlinenumber="234"><p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="234" sourceendlinenumber="234">Tag Helpers don&#39;t own the element they&#39;re associated with; they simply participate in the rendering of the element and content. ASP.NET <a href="https://msdn.microsoft.com/library/7698y1f0.aspx" data-raw-source="[Web Server controls](https://msdn.microsoft.com/library/7698y1f0.aspx)" sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="234" sourceendlinenumber="234">Web Server controls</a> are declared and invoked on a page.</p>
</li>
<li sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="236" sourceendlinenumber="236"><p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="236" sourceendlinenumber="236"><a href="https://msdn.microsoft.com/library/zsyt68f1.aspx" data-raw-source="[Web Server controls](https://msdn.microsoft.com/library/zsyt68f1.aspx)" sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="236" sourceendlinenumber="236">Web Server controls</a> have a non-trivial lifecycle that can make developing and debugging difficult.</p>
</li>
<li sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="238" sourceendlinenumber="238"><p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="238" sourceendlinenumber="238">Web Server controls allow you to add functionality to the client Document Object Model (DOM) elements by using a client control. Tag Helpers have no DOM.</p>
</li>
<li sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="240" sourceendlinenumber="240"><p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="240" sourceendlinenumber="240">Web Server controls include automatic browser detection. Tag Helpers have no knowledge of the browser.</p>
</li>
<li sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="242" sourceendlinenumber="242"><p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="242" sourceendlinenumber="242">Multiple Tag Helpers can act on the same element (see <a href="https://docs.microsoft.com/aspnet/core/mvc/views/tag-helpers/authoring#avoiding-tag-helper-conflicts" data-raw-source="[Avoiding Tag Helper conflicts](https://docs.microsoft.com/aspnet/core/mvc/views/tag-helpers/authoring#avoiding-tag-helper-conflicts)" sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="242" sourceendlinenumber="242">Avoiding Tag Helper conflicts</a> ) while you typically can&#39;t compose Web Server controls.</p>
</li>
<li sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="244" sourceendlinenumber="244"><p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="244" sourceendlinenumber="244">Tag Helpers can modify the tag and content of HTML elements that they&#39;re scoped to, but don&#39;t directly modify anything else on a page. Web Server controls have a less specific scope and can perform actions that affect other parts of your page; enabling unintended side effects.</p>
</li>
<li sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="246" sourceendlinenumber="246"><p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="246" sourceendlinenumber="246">Web Server controls use type converters to convert strings into objects. With Tag Helpers, you work natively in C#, so you don&#39;t need to do type conversion.</p>
</li>
<li sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="248" sourceendlinenumber="248"><p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="248" sourceendlinenumber="248">Web Server controls use <a href="https://docs.microsoft.com/dotnet/api/system.componentmodel" data-raw-source="[System.ComponentModel](https://docs.microsoft.com/dotnet/api/system.componentmodel)" sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="248" sourceendlinenumber="248">System.ComponentModel</a> to implement the run-time and design-time behavior of components and controls. <code>System.ComponentModel</code> includes the base classes and interfaces for implementing attributes and type converters, binding to data sources, and licensing components. Contrast that to Tag Helpers, which typically derive from <code>TagHelper</code>, and the <code>TagHelper</code> base class exposes only two methods, <code>Process</code> and <code>ProcessAsync</code>.</p>
</li>
</ul>
<h2 id="customizing-the-tag-helper-element-font" sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="250" sourceendlinenumber="250">Customizing the Tag Helper element font</h2>
<p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="252" sourceendlinenumber="252">You can customize the font and colorization from <strong>Tools</strong> &gt; <strong>Options</strong> &gt; <strong>Environment</strong> &gt; <strong>Fonts and Colors</strong>:</p>
<p sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="254" sourceendlinenumber="254"><img src="intro/_static/fontoptions2.png" alt="image" sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="254" sourceendlinenumber="254"></p>
<h2 id="additional-resources" sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="256" sourceendlinenumber="256">Additional Resources</h2>
<ul sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="258" sourceendlinenumber="260">
<li sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="258" sourceendlinenumber="258"><a href="authoring.html" data-raw-source="[Authoring Tag Helpers](authoring.md)" sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="258" sourceendlinenumber="258">Authoring Tag Helpers</a></li>
<li sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="259" sourceendlinenumber="259"><a href="../working-with-forms.html" data-raw-source="[Working with Forms ](../working-with-forms.md)" sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="259" sourceendlinenumber="259">Working with Forms </a></li>
<li sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="260" sourceendlinenumber="260"><a href="https://github.com/dpaquette/TagHelperSamples" data-raw-source="[TagHelperSamples on GitHub](https://github.com/dpaquette/TagHelperSamples)" sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="260" sourceendlinenumber="260">TagHelperSamples on GitHub</a> contains Tag Helper samples for working with <a href="http://getbootstrap.com/" data-raw-source="[Bootstrap](http://getbootstrap.com/)" sourcefile="mvc/views/tag-helpers/intro.md" sourcestartlinenumber="260" sourceendlinenumber="260">Bootstrap</a>.</li>
</ul>
<!--
* [Working with Forms ](xref:mvc/views/working-with-forms)
-->
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                  <li>
                    <a href="https://github.com/aspnet/Docs/blob/w/riande/RP-EF/aspnetcore/mvc/views/tag-helpers/intro.md/#L1" class="contribution-link">Improve this Doc</a>
                  </li>
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Copyright © 2015-2017 Microsoft<br>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../../../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../../../styles/docfx.js"></script>
    <script type="text/javascript" src="../../../styles/main.js"></script>
  </body>
</html>
