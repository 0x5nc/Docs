<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Razor Syntax Reference for ASP.NET Core </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Razor Syntax Reference for ASP.NET Core ">
    <meta name="generator" content="docfx 2.24.0.0">
    
    <link rel="shortcut icon" href="../../favicon.ico">
    <link rel="stylesheet" href="../../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../../styles/docfx.css">
    <link rel="stylesheet" href="../../styles/main.css">
    <meta property="docfx:navrel" content="/foo">
    <meta property="docfx:tocrel" content="../../toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../../index.html">
                <img id="logo" class="svg" src="../../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="mvc/views/razor">
<h1 id="razor-syntax-for-aspnet-core" sourcefile="mvc/views/razor.md" sourcestartlinenumber="14" sourceendlinenumber="14">Razor syntax for ASP.NET Core</h1>

<p sourcefile="mvc/views/razor.md" sourcestartlinenumber="16" sourceendlinenumber="16">By <a href="https://twitter.com/ntaylormullen" data-raw-source="[Taylor Mullen](https://twitter.com/ntaylormullen)" sourcefile="mvc/views/razor.md" sourcestartlinenumber="16" sourceendlinenumber="16">Taylor Mullen</a> and <a href="https://twitter.com/RickAndMSFT" data-raw-source="[Rick Anderson](https://twitter.com/RickAndMSFT)" sourcefile="mvc/views/razor.md" sourcestartlinenumber="16" sourceendlinenumber="16">Rick Anderson</a></p>
<h2 id="what-is-razor" sourcefile="mvc/views/razor.md" sourcestartlinenumber="18" sourceendlinenumber="18">What is Razor?</h2>
<p sourcefile="mvc/views/razor.md" sourcestartlinenumber="20" sourceendlinenumber="20">Razor is a markup syntax for embedding server based code into web pages. The Razor syntax consists of Razor markup, C# and HTML. Files containing Razor generally have a <em>.cshtml</em> file extension.</p>
<h2 id="rendering-html" sourcefile="mvc/views/razor.md" sourcestartlinenumber="22" sourceendlinenumber="22">Rendering HTML</h2>
<p sourcefile="mvc/views/razor.md" sourcestartlinenumber="24" sourceendlinenumber="24">The default Razor language is HTML. Rendering HTML from Razor is no different than in an HTML file. A Razor file with the following markup:</p>
<pre sourcefile="mvc/views/razor.md" sourcestartlinenumber="26" sourceendlinenumber="28"><code class="lang-html">&lt;p&gt;Hello World&lt;/p&gt;
</code></pre><p sourcefile="mvc/views/razor.md" sourcestartlinenumber="30" sourceendlinenumber="30">Is rendered unchanged as <code>&lt;p&gt;Hello World&lt;/p&gt;</code> by the server.</p>
<h2 id="razor-syntax" sourcefile="mvc/views/razor.md" sourcestartlinenumber="32" sourceendlinenumber="32">Razor syntax</h2>
<p sourcefile="mvc/views/razor.md" sourcestartlinenumber="34" sourceendlinenumber="34">Razor supports C# and uses the <code>@</code> symbol to transition from HTML to C#. Razor evaluates C# expressions and renders them in the HTML output. Razor can transition from HTML into C# or into Razor-specific markup. When an <code>@</code> symbol is followed by a <a href="#razor-reserved-keywords" data-raw-source="[Razor reserved keyword](#razor-reserved-keywords)" sourcefile="mvc/views/razor.md" sourcestartlinenumber="34" sourceendlinenumber="34">Razor reserved keyword</a> it transitions into Razor-specific markup, otherwise it transitions into plain C#.</p>
<p sourcefile="mvc/views/razor.md" sourcestartlinenumber="36" sourceendlinenumber="36"><a name="escape-at-label"></a></p>
<p sourcefile="mvc/views/razor.md" sourcestartlinenumber="38" sourceendlinenumber="38">HTML containing <code>@</code> symbols may need to be escaped with a second <code>@</code> symbol. For example:</p>
<pre sourcefile="mvc/views/razor.md" sourcestartlinenumber="40" sourceendlinenumber="42"><code class="lang-html">&lt;p&gt;@@Username&lt;/p&gt;
</code></pre><p sourcefile="mvc/views/razor.md" sourcestartlinenumber="44" sourceendlinenumber="44">would render the following HTML:</p>
<pre sourcefile="mvc/views/razor.md" sourcestartlinenumber="46" sourceendlinenumber="48"><code class="lang-html">&lt;p&gt;@Username&lt;/p&gt;
</code></pre><p sourcefile="mvc/views/razor.md" sourcestartlinenumber="50" sourceendlinenumber="50"><a name="razor-email-ref"></a></p>
<p sourcefile="mvc/views/razor.md" sourcestartlinenumber="52" sourceendlinenumber="52">HTML attributes and content containing email addresses donâ€™t treat the <code>@</code> symbol as a transition character.</p>
<p sourcefile="mvc/views/razor.md" sourcestartlinenumber="54" sourceendlinenumber="54">   <code>&lt;a href=&quot;mailto:Support@contoso.com&quot;&gt;Support@contoso.com&lt;/a&gt;</code></p>
<h2 id="implicit-razor-expressions" sourcefile="mvc/views/razor.md" sourcestartlinenumber="56" sourceendlinenumber="56">Implicit Razor expressions</h2>
<p sourcefile="mvc/views/razor.md" sourcestartlinenumber="58" sourceendlinenumber="58">Implicit Razor expressions start with <code>@</code> followed by C# code. For example:</p>
<pre sourcefile="mvc/views/razor.md" sourcestartlinenumber="60" sourceendlinenumber="63"><code class="lang-html">&lt;p&gt;@DateTime.Now&lt;/p&gt;
&lt;p&gt;@DateTime.IsLeapYear(2016)&lt;/p&gt;
</code></pre><p sourcefile="mvc/views/razor.md" sourcestartlinenumber="65" sourceendlinenumber="65">With the exception of the C# <code>await</code> keyword implicit expressions must not contain spaces. For example, you can intermingle spaces as long as the C# statement has a clear ending:</p>
<pre sourcefile="mvc/views/razor.md" sourcestartlinenumber="67" sourceendlinenumber="69"><code class="lang-html">&lt;p&gt;@await DoSomething(&quot;hello&quot;, &quot;world&quot;)&lt;/p&gt;
</code></pre><h2 id="explicit-razor-expressions" sourcefile="mvc/views/razor.md" sourcestartlinenumber="71" sourceendlinenumber="71">Explicit Razor expressions</h2>
<p sourcefile="mvc/views/razor.md" sourcestartlinenumber="73" sourceendlinenumber="73">Explicit Razor expressions consists of an @ symbol with balanced parenthesis. For example, to render last week&#39;s time:</p>
<pre sourcefile="mvc/views/razor.md" sourcestartlinenumber="75" sourceendlinenumber="77"><code class="lang-html">&lt;p&gt;Last week this time: @(DateTime.Now - TimeSpan.FromDays(7))&lt;/p&gt;
</code></pre><p sourcefile="mvc/views/razor.md" sourcestartlinenumber="79" sourceendlinenumber="79">Any content within the @() parenthesis is evaluated and rendered to the output.</p>
<p sourcefile="mvc/views/razor.md" sourcestartlinenumber="81" sourceendlinenumber="81">Implicit expressions generally cannot contain spaces. For example, in the code below, one week is not subtracted from the current time:</p>
<pre sourcefile="mvc/views/razor.md" sourcestartlinenumber="83" sourceendlinenumber="83"><code class="lang-html" name="Main">&lt;p&gt;Last week: @DateTime.Now - TimeSpan.FromDays(7)&lt;/p&gt;
</code></pre><p sourcefile="mvc/views/razor.md" sourcestartlinenumber="85" sourceendlinenumber="85">Which renders the following HTML:</p>
<pre sourcefile="mvc/views/razor.md" sourcestartlinenumber="87" sourceendlinenumber="89"><code class="lang-html">&lt;p&gt;Last week: 7/7/2016 4:39:52 PM - TimeSpan.FromDays(7)&lt;/p&gt;
</code></pre><p sourcefile="mvc/views/razor.md" sourcestartlinenumber="91" sourceendlinenumber="91">You can use an explicit expression to concatenate text with an expression result:</p>
<!-- literal_block {"ids": [], "linenos": false, "xml:space": "preserve", "language": "none", "highlight_args": {"hl_lines": [5]}} -->
<pre sourcefile="mvc/views/razor.md" sourcestartlinenumber="95" sourceendlinenumber="101"><code class="lang-none">@{
    var joe = new Person(&quot;Joe&quot;, 33);
 }

&lt;p&gt;Age@(joe.Age)&lt;/p&gt;
</code></pre><p sourcefile="mvc/views/razor.md" sourcestartlinenumber="103" sourceendlinenumber="103">Without the explicit expression, <code>&lt;p&gt;Age@joe.Age&lt;/p&gt;</code> would be treated as an email address and <code>&lt;p&gt;Age@joe.Age&lt;/p&gt;</code> would be rendered. When written as an explicit expression, <code>&lt;p&gt;Age33&lt;/p&gt;</code> is rendered.</p>
<p sourcefile="mvc/views/razor.md" sourcestartlinenumber="105" sourceendlinenumber="105"><a name="expression-encoding-label"></a></p>
<h2 id="expression-encoding" sourcefile="mvc/views/razor.md" sourcestartlinenumber="107" sourceendlinenumber="107">Expression encoding</h2>
<p sourcefile="mvc/views/razor.md" sourcestartlinenumber="109" sourceendlinenumber="109">C# expressions that evaluate to a string are HTML encoded. C# expressions that evaluate to <code>IHtmlContent</code> are rendered directly through <em>IHtmlContent.WriteTo</em>. C# expressions that don&#39;t evaluate to <em>IHtmlContent</em> are converted to a string (by <em>ToString</em>) and encoded before they are rendered. For example, the following Razor markup:</p>
<pre sourcefile="mvc/views/razor.md" sourcestartlinenumber="111" sourceendlinenumber="113"><code class="lang-html">@(&quot;&lt;span&gt;Hello World&lt;/span&gt;&quot;)
</code></pre><p sourcefile="mvc/views/razor.md" sourcestartlinenumber="115" sourceendlinenumber="115">Renders this HTML:</p>
<pre sourcefile="mvc/views/razor.md" sourcestartlinenumber="117" sourceendlinenumber="119"><code class="lang-html">&amp;lt;span&amp;gt;Hello World&amp;lt;/span&amp;gt;
</code></pre><p sourcefile="mvc/views/razor.md" sourcestartlinenumber="121" sourceendlinenumber="121">Which the browser renders as:</p>
<p sourcefile="mvc/views/razor.md" sourcestartlinenumber="123" sourceendlinenumber="123"><code>&lt;span&gt;Hello World&lt;/span&gt;</code></p>
<p sourcefile="mvc/views/razor.md" sourcestartlinenumber="125" sourceendlinenumber="125"><code>HtmlHelper</code> <code>Raw</code> output is not encoded but rendered as HTML markup.</p>
<div class="WARNING" sourcefile="mvc/views/razor.md" sourcestartlinenumber="127" sourceendlinenumber="127"><h5>Warning</h5><p sourcefile="mvc/views/razor.md" sourcestartlinenumber="128" sourceendlinenumber="128">Using <code>HtmlHelper.Raw</code> on unsanitized user input is a security risk. User input might contain malicious JavaScript or other exploits. Sanitizing user input is difficult, avoid using <code>HtmlHelper.Raw</code> on user input.</p>
</div>
<p sourcefile="mvc/views/razor.md" sourcestartlinenumber="130" sourceendlinenumber="130">The following Razor markup:</p>
<pre sourcefile="mvc/views/razor.md" sourcestartlinenumber="132" sourceendlinenumber="134"><code class="lang-html">@Html.Raw(&quot;&lt;span&gt;Hello World&lt;/span&gt;&quot;)
</code></pre><p sourcefile="mvc/views/razor.md" sourcestartlinenumber="136" sourceendlinenumber="136">Renders this HTML:</p>
<pre sourcefile="mvc/views/razor.md" sourcestartlinenumber="138" sourceendlinenumber="140"><code class="lang-html">&lt;span&gt;Hello World&lt;/span&gt;
</code></pre><p sourcefile="mvc/views/razor.md" sourcestartlinenumber="142" sourceendlinenumber="142"><a name="razor-code-blocks-label"></a></p>
<h2 id="razor-code-blocks" sourcefile="mvc/views/razor.md" sourcestartlinenumber="144" sourceendlinenumber="144">Razor code blocks</h2>
<p sourcefile="mvc/views/razor.md" sourcestartlinenumber="146" sourceendlinenumber="146">Razor code blocks start with <code>@</code> and are enclosed by <code>{}</code>. Unlike expressions, C# code inside code blocks is not rendered. Code blocks and expressions in a Razor page share the same scope and are defined in order (that is, declarations in a code block will be in scope for later code blocks and expressions).</p>
<pre sourcefile="mvc/views/razor.md" sourcestartlinenumber="148" sourceendlinenumber="154"><code class="lang-none">@{
    var output = &quot;Hello World&quot;;
}

&lt;p&gt;The rendered result: @output&lt;/p&gt;
</code></pre><p sourcefile="mvc/views/razor.md" sourcestartlinenumber="156" sourceendlinenumber="156">Would render:</p>
<pre sourcefile="mvc/views/razor.md" sourcestartlinenumber="158" sourceendlinenumber="160"><code class="lang-html">&lt;p&gt;The rendered result: Hello World&lt;/p&gt;
</code></pre><p sourcefile="mvc/views/razor.md" sourcestartlinenumber="162" sourceendlinenumber="162"><a name="implicit-transitions-label"></a></p>
<h3 id="implicit-transitions" sourcefile="mvc/views/razor.md" sourcestartlinenumber="164" sourceendlinenumber="164">Implicit transitions</h3>
<p sourcefile="mvc/views/razor.md" sourcestartlinenumber="166" sourceendlinenumber="166">The default language in a code block is C#, but you can transition back to HTML. HTML within a code block will transition back into rendering HTML:</p>
<pre sourcefile="mvc/views/razor.md" sourcestartlinenumber="168" sourceendlinenumber="173"><code class="lang-none">@{
    var inCSharp = true;
    &lt;p&gt;Now in HTML, was in C# @inCSharp&lt;/p&gt;
}
</code></pre><p sourcefile="mvc/views/razor.md" sourcestartlinenumber="175" sourceendlinenumber="175"><a name="explicit-delimited-transition-label"></a></p>
<h3 id="explicit-delimited-transition" sourcefile="mvc/views/razor.md" sourcestartlinenumber="177" sourceendlinenumber="177">Explicit delimited transition</h3>
<p sourcefile="mvc/views/razor.md" sourcestartlinenumber="179" sourceendlinenumber="179">To define a sub-section of a code block that should render HTML, surround the characters to be rendered with the Razor <code>&lt;text&gt;</code> tag:</p>
<!-- literal_block {"ids": [], "linenos": false, "xml:space": "preserve", "language": "none", "highlight_args": {"hl_lines": [4]}} -->
<pre sourcefile="mvc/views/razor.md" sourcestartlinenumber="183" sourceendlinenumber="189"><code class="lang-none">@for (var i = 0; i &lt; people.Length; i++)
{
    var person = people[i];
    &lt;text&gt;Name: @person.Name&lt;/text&gt;
}
</code></pre><p sourcefile="mvc/views/razor.md" sourcestartlinenumber="191" sourceendlinenumber="191">You generally use this approach when you want to render HTML that is not surrounded by an HTML tag. Without an HTML or Razor tag, you get a Razor runtime error.</p>
<p sourcefile="mvc/views/razor.md" sourcestartlinenumber="193" sourceendlinenumber="193"><a name="explicit-line-transition-with-label"></a></p>
<h3 id="explicit-line-transition-with-" sourcefile="mvc/views/razor.md" sourcestartlinenumber="195" sourceendlinenumber="195">Explicit Line Transition with <code>@:</code></h3>
<p sourcefile="mvc/views/razor.md" sourcestartlinenumber="197" sourceendlinenumber="197">To render the rest of an entire line as HTML inside a code block, use the <code>@:</code> syntax:</p>
<!-- literal_block {"ids": [], "linenos": false, "xml:space": "preserve", "language": "none", "highlight_args": {"hl_lines": [4]}} -->
<pre sourcefile="mvc/views/razor.md" sourcestartlinenumber="201" sourceendlinenumber="207"><code class="lang-none">@for (var i = 0; i &lt; people.Length; i++)
{
    var person = people[i];
    @:Name: @person.Name
}
</code></pre><p sourcefile="mvc/views/razor.md" sourcestartlinenumber="209" sourceendlinenumber="209">Without the <code>@:</code> in the code above, you&#39;d get a Razor run time error.</p>
<p sourcefile="mvc/views/razor.md" sourcestartlinenumber="211" sourceendlinenumber="211"><a name="control-structures-razor-label"></a></p>
<h2 id="control-structures" sourcefile="mvc/views/razor.md" sourcestartlinenumber="213" sourceendlinenumber="213">Control Structures</h2>
<p sourcefile="mvc/views/razor.md" sourcestartlinenumber="215" sourceendlinenumber="215">Control structures are an extension of code blocks. All aspects of code blocks (transitioning to markup, inline C#) also apply to the following structures.</p>
<h3 id="conditionals-if-else-if-else-and-switch" sourcefile="mvc/views/razor.md" sourcestartlinenumber="217" sourceendlinenumber="217">Conditionals <code>@if</code>, <code>else if</code>, <code>else</code> and <code>@switch</code></h3>
<p sourcefile="mvc/views/razor.md" sourcestartlinenumber="219" sourceendlinenumber="219">The <code>@if</code> family controls when code runs:</p>
<pre sourcefile="mvc/views/razor.md" sourcestartlinenumber="221" sourceendlinenumber="226"><code class="lang-none">@if (value % 2 == 0)
{
    &lt;p&gt;The value was even&lt;/p&gt;
}
</code></pre><p sourcefile="mvc/views/razor.md" sourcestartlinenumber="228" sourceendlinenumber="228"><code>else</code> and <code>else if</code> don&#39;t require the <code>@</code> symbol:</p>
<pre sourcefile="mvc/views/razor.md" sourcestartlinenumber="230" sourceendlinenumber="243"><code class="lang-none">@if (value % 2 == 0)
{
    &lt;p&gt;The value was even&lt;/p&gt;
}
else if (value &gt;= 1337)
{
    &lt;p&gt;The value is large.&lt;/p&gt;
}
else
{
    &lt;p&gt;The value was not large and is odd.&lt;/p&gt;
}
</code></pre><p sourcefile="mvc/views/razor.md" sourcestartlinenumber="245" sourceendlinenumber="245">You can use a switch statement like this:</p>
<pre sourcefile="mvc/views/razor.md" sourcestartlinenumber="247" sourceendlinenumber="260"><code class="lang-none">@switch (value)
{
    case 1:
        &lt;p&gt;The value is 1!&lt;/p&gt;
        break;
    case 1337:
        &lt;p&gt;Your number is 1337!&lt;/p&gt;
        break;
    default:
        &lt;p&gt;Your number was not 1 or 1337.&lt;/p&gt;
        break;
}
</code></pre><h3 id="looping-for-foreach-while-and-do-while" sourcefile="mvc/views/razor.md" sourcestartlinenumber="262" sourceendlinenumber="262">Looping <code>@for</code>, <code>@foreach</code>, <code>@while</code>, and <code>@do while</code></h3>
<p sourcefile="mvc/views/razor.md" sourcestartlinenumber="264" sourceendlinenumber="264">You can render templated HTML with looping control statements. For example, to render a list of people:</p>
<pre sourcefile="mvc/views/razor.md" sourcestartlinenumber="266" sourceendlinenumber="274"><code class="lang-none">@{
    var people = new Person[]
    {
          new Person(&quot;John&quot;, 33),
          new Person(&quot;Doe&quot;, 41),
    };
}
</code></pre><p sourcefile="mvc/views/razor.md" sourcestartlinenumber="276" sourceendlinenumber="276">You can use any of the following looping statements:</p>
<p sourcefile="mvc/views/razor.md" sourcestartlinenumber="278" sourceendlinenumber="278"><code>@for</code></p>
<pre sourcefile="mvc/views/razor.md" sourcestartlinenumber="280" sourceendlinenumber="287"><code class="lang-none">@for (var i = 0; i &lt; people.Length; i++)
{
    var person = people[i];
    &lt;p&gt;Name: @person.Name&lt;/p&gt;
    &lt;p&gt;Age: @person.Age&lt;/p&gt;
}
</code></pre><p sourcefile="mvc/views/razor.md" sourcestartlinenumber="289" sourceendlinenumber="289"><code>@foreach</code></p>
<pre sourcefile="mvc/views/razor.md" sourcestartlinenumber="291" sourceendlinenumber="297"><code class="lang-none">@foreach (var person in people)
{
    &lt;p&gt;Name: @person.Name&lt;/p&gt;
    &lt;p&gt;Age: @person.Age&lt;/p&gt;
}
</code></pre><p sourcefile="mvc/views/razor.md" sourcestartlinenumber="299" sourceendlinenumber="299"><code>@while</code></p>
<pre sourcefile="mvc/views/razor.md" sourcestartlinenumber="301" sourceendlinenumber="311"><code class="lang-none">@{ var i = 0; }
@while (i &lt; people.Length)
{
    var person = people[i];
    &lt;p&gt;Name: @person.Name&lt;/p&gt;
    &lt;p&gt;Age: @person.Age&lt;/p&gt;

    i++;
}
</code></pre><p sourcefile="mvc/views/razor.md" sourcestartlinenumber="313" sourceendlinenumber="313"><code>@do while</code></p>
<pre sourcefile="mvc/views/razor.md" sourcestartlinenumber="315" sourceendlinenumber="325"><code class="lang-none">@{ var i = 0; }
@do
{
    var person = people[i];
    &lt;p&gt;Name: @person.Name&lt;/p&gt;
    &lt;p&gt;Age: @person.Age&lt;/p&gt;

    i++;
} while (i &lt; people.Length);
</code></pre><h3 id="compound-using" sourcefile="mvc/views/razor.md" sourcestartlinenumber="327" sourceendlinenumber="327">Compound <code>@using</code></h3>
<p sourcefile="mvc/views/razor.md" sourcestartlinenumber="329" sourceendlinenumber="329">In C# a using statement is used to ensure an object is disposed. In Razor this same mechanism can be used to create HTML helpers that contain additional content. For instance, we can utilize HTML Helpers to render a form tag with the <code>@using</code> statement:</p>
<pre sourcefile="mvc/views/razor.md" sourcestartlinenumber="331" sourceendlinenumber="340"><code class="lang-none">@using (Html.BeginForm())
{
    &lt;div&gt;
        email:
        &lt;input type=&quot;email&quot; id=&quot;Email&quot; name=&quot;Email&quot; value=&quot;&quot; /&gt;
        &lt;button type=&quot;submit&quot;&gt; Register &lt;/button&gt;
    &lt;/div&gt;
}
</code></pre><p sourcefile="mvc/views/razor.md" sourcestartlinenumber="342" sourceendlinenumber="342">You can also perform scope level actions like the above with <a href="tag-helpers/index.html" data-raw-source="[Tag Helpers](tag-helpers/index.md)" sourcefile="mvc/views/razor.md" sourcestartlinenumber="342" sourceendlinenumber="342">Tag Helpers</a>.</p>
<h3 id="try-catch-finally" sourcefile="mvc/views/razor.md" sourcestartlinenumber="344" sourceendlinenumber="344"><code>@try</code>, <code>catch</code>, <code>finally</code></h3>
<p sourcefile="mvc/views/razor.md" sourcestartlinenumber="346" sourceendlinenumber="346">Exception handling is similar to  C#:</p>
<pre sourcefile="mvc/views/razor.md" sourcestartlinenumber="348" sourceendlinenumber="348"><code class="lang-html" name="Main">@try
{
    throw new InvalidOperationException(&quot;You did something invalid.&quot;);
}
catch (Exception ex)
{
    &lt;p&gt;The exception message: @ex.Message&lt;/p&gt;
}
finally
{
    &lt;p&gt;The finally statement.&lt;/p&gt;
}
</code></pre><h3 id="lock" sourcefile="mvc/views/razor.md" sourcestartlinenumber="350" sourceendlinenumber="350"><code>@lock</code></h3>
<p sourcefile="mvc/views/razor.md" sourcestartlinenumber="352" sourceendlinenumber="352">Razor has the capability to protect critical sections with lock statements:</p>
<pre sourcefile="mvc/views/razor.md" sourcestartlinenumber="354" sourceendlinenumber="359"><code class="lang-none">@lock (SomeLock)
{
    // Do critical section work
}
</code></pre><h3 id="comments" sourcefile="mvc/views/razor.md" sourcestartlinenumber="361" sourceendlinenumber="361">Comments</h3>
<p sourcefile="mvc/views/razor.md" sourcestartlinenumber="363" sourceendlinenumber="363">Razor supports C# and HTML comments. The following markup:</p>
<pre sourcefile="mvc/views/razor.md" sourcestartlinenumber="365" sourceendlinenumber="371"><code class="lang-none">@{
    /* C# comment. */
    // Another C# comment.
}
&lt;!-- HTML comment --&gt;
</code></pre><p sourcefile="mvc/views/razor.md" sourcestartlinenumber="373" sourceendlinenumber="373">Is rendered by the server as:</p>
<pre sourcefile="mvc/views/razor.md" sourcestartlinenumber="375" sourceendlinenumber="377"><code class="lang-none">&lt;!-- HTML comment --&gt;
</code></pre><p sourcefile="mvc/views/razor.md" sourcestartlinenumber="379" sourceendlinenumber="379">Razor comments are removed by the server before the page is rendered. Razor uses <code>@*  *@</code> to delimit comments. The following code is commented out, so the server will not render any markup:</p>
<pre sourcefile="mvc/views/razor.md" sourcestartlinenumber="381" sourceendlinenumber="389"><code class="lang-none"> @*
 @{
     /* C# comment. */
     // Another C# comment.
 }
 &lt;!-- HTML comment --&gt;
*@
</code></pre><p sourcefile="mvc/views/razor.md" sourcestartlinenumber="391" sourceendlinenumber="391"><a name="razor-directives-label"></a></p>
<h2 id="directives" sourcefile="mvc/views/razor.md" sourcestartlinenumber="393" sourceendlinenumber="393">Directives</h2>
<p sourcefile="mvc/views/razor.md" sourcestartlinenumber="395" sourceendlinenumber="395">Razor directives are represented by implicit expressions with reserved keywords following the <code>@</code> symbol. A directive will typically change the way a page is parsed or enable different functionality within your Razor page.</p>
<p sourcefile="mvc/views/razor.md" sourcestartlinenumber="397" sourceendlinenumber="397">Understanding how Razor generates code for a view will make it easier to understand how directives work. A Razor page is used to generate a C# file. For example, this Razor page:</p>
<pre sourcefile="mvc/views/razor.md" sourcestartlinenumber="399" sourceendlinenumber="399"><code class="lang-html" name="Main">@{
    var output = &quot;Hello World&quot;;
}

&lt;div&gt;Output: @output&lt;/div&gt;
</code></pre><p sourcefile="mvc/views/razor.md" sourcestartlinenumber="401" sourceendlinenumber="401">Generates a class similar to the following:</p>
<pre sourcefile="mvc/views/razor.md" sourcestartlinenumber="403" sourceendlinenumber="415"><code class="lang-csharp">public class _Views_Something_cshtml : RazorPage&lt;dynamic&gt;
{
    public override async Task ExecuteAsync()
    {
        var output = &quot;Hello World&quot;;

        WriteLiteral(&quot;/r/n&lt;div&gt;Output: &quot;);
        Write(output);
        WriteLiteral(&quot;&lt;/div&gt;&quot;);
    }
}
</code></pre><p sourcefile="mvc/views/razor.md" sourcestartlinenumber="417" sourceendlinenumber="417"><a href="#razor-customcompilationservice-label" data-raw-source="[Viewing the Razor C# class generated for a view](#razor-customcompilationservice-label)" sourcefile="mvc/views/razor.md" sourcestartlinenumber="417" sourceendlinenumber="417">Viewing the Razor C# class generated for a view</a> explains how to view this generated class.</p>
<h3 id="using" sourcefile="mvc/views/razor.md" sourcestartlinenumber="419" sourceendlinenumber="419"><code>@using</code></h3>
<p sourcefile="mvc/views/razor.md" sourcestartlinenumber="421" sourceendlinenumber="421">The <code>@using</code> directive will add the c# <code>using</code> directive to the generated razor page:</p>
<pre sourcefile="mvc/views/razor.md" sourcestartlinenumber="423" sourceendlinenumber="423"><code class="lang-html" name="Main">@using System.IO
@{
    var dir = Directory.GetCurrentDirectory();
}
&lt;p&gt;@dir&lt;/p&gt;
</code></pre><h3 id="model" sourcefile="mvc/views/razor.md" sourcestartlinenumber="425" sourceendlinenumber="425"><code>@model</code></h3>
<p sourcefile="mvc/views/razor.md" sourcestartlinenumber="427" sourceendlinenumber="427">The <code>@model</code> directive specifies the type of the model passed to the Razor page. It uses the following syntax:</p>
<pre sourcefile="mvc/views/razor.md" sourcestartlinenumber="429" sourceendlinenumber="431"><code class="lang-none">@model TypeNameOfModel
</code></pre><p sourcefile="mvc/views/razor.md" sourcestartlinenumber="433" sourceendlinenumber="433">For example, if you create an ASP.NET Core MVC app with individual user accounts, the <em>Views/Account/Login.cshtml</em> Razor view contains the following model declaration:</p>
<pre sourcefile="mvc/views/razor.md" sourcestartlinenumber="435" sourceendlinenumber="437"><code class="lang-csharp">@model LoginViewModel
</code></pre><p sourcefile="mvc/views/razor.md" sourcestartlinenumber="439" sourceendlinenumber="439">In the preceding class example, the class generated inherits from <code>RazorPage&lt;dynamic&gt;</code>. By adding an <code>@model</code> you control whatâ€™s inherited. For example</p>
<pre sourcefile="mvc/views/razor.md" sourcestartlinenumber="441" sourceendlinenumber="443"><code class="lang-csharp">@model LoginViewModel
</code></pre><p sourcefile="mvc/views/razor.md" sourcestartlinenumber="445" sourceendlinenumber="445">Generates the following class</p>
<pre sourcefile="mvc/views/razor.md" sourcestartlinenumber="447" sourceendlinenumber="449"><code class="lang-csharp">public class _Views_Account_Login_cshtml : RazorPage&lt;LoginViewModel&gt;
</code></pre><p sourcefile="mvc/views/razor.md" sourcestartlinenumber="451" sourceendlinenumber="451">Razor pages expose a <code>Model</code> property for accessing the model passed to the page.</p>
<pre sourcefile="mvc/views/razor.md" sourcestartlinenumber="453" sourceendlinenumber="455"><code class="lang-html">&lt;div&gt;The Login Email: @Model.Email&lt;/div&gt;
</code></pre><p sourcefile="mvc/views/razor.md" sourcestartlinenumber="457" sourceendlinenumber="457">The <code>@model</code> directive specified the type of this property (by specifying the <code>T</code> in <code>RazorPage&lt;T&gt;</code> that the generated class for your page derives from). If you don&#39;t specify the <code>@model</code> directive the <code>Model</code> property will be of type <code>dynamic</code>. The value of the model is passed from the controller to the view. See <a href="../../tutorials/first-mvc-app/adding-model.html#strongly-typed-models-keyword-label" data-raw-source="[Strongly typed models and the @model keyword](../../tutorials/first-mvc-app/adding-model.md#strongly-typed-models-keyword-label)" sourcefile="mvc/views/razor.md" sourcestartlinenumber="457" sourceendlinenumber="457">Strongly typed models and the @model keyword</a> for more information.</p>
<h3 id="inherits" sourcefile="mvc/views/razor.md" sourcestartlinenumber="459" sourceendlinenumber="459"><code>@inherits</code></h3>
<p sourcefile="mvc/views/razor.md" sourcestartlinenumber="461" sourceendlinenumber="461">The <code>@inherits</code> directive gives you full control of the class your Razor page inherits:</p>
<pre sourcefile="mvc/views/razor.md" sourcestartlinenumber="463" sourceendlinenumber="465"><code class="lang-none">@inherits TypeNameOfClassToInheritFrom
</code></pre><p sourcefile="mvc/views/razor.md" sourcestartlinenumber="467" sourceendlinenumber="467">For instance, letâ€™s say we had the following custom Razor page type:</p>
<pre sourcefile="mvc/views/razor.md" sourcestartlinenumber="469" sourceendlinenumber="469"><code class="lang-csharp" name="Main">using Microsoft.AspNetCore.Mvc.Razor;

public abstract class CustomRazorPage&lt;TModel&gt; : RazorPage&lt;TModel&gt;
{
    public string CustomText { get; } = &quot;Hello World.&quot;;
}
</code></pre><p sourcefile="mvc/views/razor.md" sourcestartlinenumber="471" sourceendlinenumber="471">The following Razor would generate <code>&lt;div&gt;Custom text: Hello World&lt;/div&gt;</code>.</p>
<pre sourcefile="mvc/views/razor.md" sourcestartlinenumber="473" sourceendlinenumber="473"><code class="lang-html" name="Main">@inherits CustomRazorPage&lt;TModel&gt;

&lt;div&gt;Custom text: @CustomText&lt;/div&gt;
</code></pre><p sourcefile="mvc/views/razor.md" sourcestartlinenumber="475" sourceendlinenumber="475">You can&#39;t use <code>@model</code> and <code>@inherits</code> on the same page. You can have <code>@inherits</code> in a <em>_ViewImports.cshtml</em> file that the Razor page imports. For example, if your Razor view imported the following <em>_ViewImports.cshtml</em> file:</p>
<pre sourcefile="mvc/views/razor.md" sourcestartlinenumber="477" sourceendlinenumber="477"><code class="lang-html" name="Main">@inherits CustomRazorPage&lt;TModel&gt;
</code></pre><p sourcefile="mvc/views/razor.md" sourcestartlinenumber="479" sourceendlinenumber="479">The following strongly typed Razor page</p>
<pre sourcefile="mvc/views/razor.md" sourcestartlinenumber="481" sourceendlinenumber="481"><code class="lang-html" name="Main">@inherits CustomRazorPage&lt;TModel&gt;

&lt;div&gt;The Login Email: @Model.Email&lt;/div&gt;
&lt;div&gt;Custom text: @CustomText&lt;/div&gt;
</code></pre><p sourcefile="mvc/views/razor.md" sourcestartlinenumber="483" sourceendlinenumber="483">Generates this HTML markup:</p>
<pre sourcefile="mvc/views/razor.md" sourcestartlinenumber="485" sourceendlinenumber="488"><code class="lang-none">&lt;div&gt;The Login Email: Rick@contoso.com&lt;/div&gt;
&lt;div&gt;Custom text: Hello World&lt;/div&gt;
</code></pre><p sourcefile="mvc/views/razor.md" sourcestartlinenumber="490" sourceendlinenumber="490">When passed &quot;<a href="mailto:Rick@contoso.com" data-raw-source="[Rick@contoso.com](mailto:Rick@contoso.com)" sourcefile="mvc/views/razor.md" sourcestartlinenumber="490" sourceendlinenumber="490">Rick@contoso.com</a>&quot; in the model:</p>
<p sourcefile="mvc/views/razor.md" sourcestartlinenumber="492" sourceendlinenumber="492">   See <a href="layout.html" data-raw-source="[Layout](layout.md)" sourcefile="mvc/views/razor.md" sourcestartlinenumber="492" sourceendlinenumber="492">Layout</a> for more information.</p>
<h3 id="inject" sourcefile="mvc/views/razor.md" sourcestartlinenumber="494" sourceendlinenumber="494"><code>@inject</code></h3>
<p sourcefile="mvc/views/razor.md" sourcestartlinenumber="496" sourceendlinenumber="496">The <code>@inject</code> directive enables you to inject a service from your <a href="../../fundamentals/dependency-injection.html" data-raw-source="[service container](../../fundamentals/dependency-injection.md)" sourcefile="mvc/views/razor.md" sourcestartlinenumber="496" sourceendlinenumber="496">service container</a>  into your Razor page for use. See <a href="dependency-injection.html" data-raw-source="[Dependency injection into views](dependency-injection.md)" sourcefile="mvc/views/razor.md" sourcestartlinenumber="496" sourceendlinenumber="496">Dependency injection into views</a>.</p>
<p sourcefile="mvc/views/razor.md" sourcestartlinenumber="498" sourceendlinenumber="498"><a name="functions"></a></p>
<h3 id="functions" sourcefile="mvc/views/razor.md" sourcestartlinenumber="500" sourceendlinenumber="500"><code>@functions</code></h3>
<p sourcefile="mvc/views/razor.md" sourcestartlinenumber="502" sourceendlinenumber="502">The <code>@functions</code> directive enables you to add function level content to your Razor page. The syntax is:</p>
<pre sourcefile="mvc/views/razor.md" sourcestartlinenumber="504" sourceendlinenumber="506"><code class="lang-none">@functions { // C# Code }
</code></pre><p sourcefile="mvc/views/razor.md" sourcestartlinenumber="508" sourceendlinenumber="508">For example:</p>
<pre sourcefile="mvc/views/razor.md" sourcestartlinenumber="510" sourceendlinenumber="510"><code class="lang-html" name="Main">@functions {
    public string GetHello()
    {
        return &quot;Hello&quot;;
    }
}

&lt;div&gt;From method: @GetHello()&lt;/div&gt; 
</code></pre><p sourcefile="mvc/views/razor.md" sourcestartlinenumber="512" sourceendlinenumber="512">Generates the following HTML markup:</p>
<pre sourcefile="mvc/views/razor.md" sourcestartlinenumber="514" sourceendlinenumber="516"><code class="lang-none">&lt;div&gt;From method: Hello&lt;/div&gt;
</code></pre><p sourcefile="mvc/views/razor.md" sourcestartlinenumber="518" sourceendlinenumber="518">The generated Razor C# looks like:</p>
<pre sourcefile="mvc/views/razor.md" sourcestartlinenumber="520" sourceendlinenumber="520"><code class="lang-csharp" name="Main">using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc.Razor;

public class _Views_Home_Test_cshtml : RazorPage&lt;dynamic&gt;
{
    // Functions placed between here 
    public string GetHello()
    {
        return &quot;Hello&quot;;
    }
    // And here.
#pragma warning disable 1998
    public override async Task ExecuteAsync()
    {
        WriteLiteral(&quot;\r\n&lt;div&gt;From method: &quot;);
        Write(GetHello());
        WriteLiteral(&quot;&lt;/div&gt;\r\n&quot;);
    }
#pragma warning restore 1998
</code></pre><h3 id="section" sourcefile="mvc/views/razor.md" sourcestartlinenumber="522" sourceendlinenumber="522"><code>@section</code></h3>
<p sourcefile="mvc/views/razor.md" sourcestartlinenumber="524" sourceendlinenumber="524">The <code>@section</code> directive is used in conjunction with the <a href="layout.html" data-raw-source="[layout page](layout.md)" sourcefile="mvc/views/razor.md" sourcestartlinenumber="524" sourceendlinenumber="524">layout page</a> to enable views to render content in different parts of the rendered HTML page. See <a href="layout.html#layout-sections-label" data-raw-source="[Sections](layout.md#layout-sections-label)" sourcefile="mvc/views/razor.md" sourcestartlinenumber="524" sourceendlinenumber="524">Sections</a> for more information.</p>
<h2 id="tag-helpers" sourcefile="mvc/views/razor.md" sourcestartlinenumber="526" sourceendlinenumber="526">Tag Helpers</h2>
<p sourcefile="mvc/views/razor.md" sourcestartlinenumber="528" sourceendlinenumber="528">The following <a href="tag-helpers/index.html" data-raw-source="[Tag Helpers](tag-helpers/index.md)" sourcefile="mvc/views/razor.md" sourcestartlinenumber="528" sourceendlinenumber="528">Tag Helpers</a> directives are detailed in the links provided.</p>
<ul sourcefile="mvc/views/razor.md" sourcestartlinenumber="530" sourceendlinenumber="532">
<li sourcefile="mvc/views/razor.md" sourcestartlinenumber="530" sourceendlinenumber="530"><a href="tag-helpers/intro.html#add-helper-label" data-raw-source="[@addTagHelper](tag-helpers/intro.md#add-helper-label)" sourcefile="mvc/views/razor.md" sourcestartlinenumber="530" sourceendlinenumber="530">@addTagHelper</a></li>
<li sourcefile="mvc/views/razor.md" sourcestartlinenumber="531" sourceendlinenumber="531"><a href="tag-helpers/intro.html#remove-razor-directives-label" data-raw-source="[@removeTagHelper](tag-helpers/intro.md#remove-razor-directives-label)" sourcefile="mvc/views/razor.md" sourcestartlinenumber="531" sourceendlinenumber="531">@removeTagHelper</a></li>
<li sourcefile="mvc/views/razor.md" sourcestartlinenumber="532" sourceendlinenumber="532"><a href="tag-helpers/intro.html#prefix-razor-directives-label" data-raw-source="[@tagHelperPrefix](tag-helpers/intro.md#prefix-razor-directives-label)" sourcefile="mvc/views/razor.md" sourcestartlinenumber="532" sourceendlinenumber="532">@tagHelperPrefix</a></li>
</ul>
<p sourcefile="mvc/views/razor.md" sourcestartlinenumber="534" sourceendlinenumber="534"><a name="razor-reserved-keywords-label"></a></p>
<h2 id="razor-reserved-keywords" sourcefile="mvc/views/razor.md" sourcestartlinenumber="536" sourceendlinenumber="536">Razor reserved keywords</h2>
<h3 id="razor-keywords" sourcefile="mvc/views/razor.md" sourcestartlinenumber="538" sourceendlinenumber="538">Razor keywords</h3>
<ul sourcefile="mvc/views/razor.md" sourcestartlinenumber="540" sourceendlinenumber="545">
<li sourcefile="mvc/views/razor.md" sourcestartlinenumber="540" sourceendlinenumber="540">page (Requires ASP.NET Core 2.0 and later)</li>
<li sourcefile="mvc/views/razor.md" sourcestartlinenumber="541" sourceendlinenumber="541">functions</li>
<li sourcefile="mvc/views/razor.md" sourcestartlinenumber="542" sourceendlinenumber="542">inherits</li>
<li sourcefile="mvc/views/razor.md" sourcestartlinenumber="543" sourceendlinenumber="543">model</li>
<li sourcefile="mvc/views/razor.md" sourcestartlinenumber="544" sourceendlinenumber="544">section</li>
<li sourcefile="mvc/views/razor.md" sourcestartlinenumber="545" sourceendlinenumber="545">helper   (Not supported by ASP.NET Core.)</li>
</ul>
<p sourcefile="mvc/views/razor.md" sourcestartlinenumber="547" sourceendlinenumber="547">Razor keywords can be escaped with <code>@(Razor Keyword)</code>, for example <code>@(functions)</code>. See the complete sample below.</p>
<h3 id="c-razor-keywords" sourcefile="mvc/views/razor.md" sourcestartlinenumber="549" sourceendlinenumber="549">C# Razor keywords</h3>
<ul sourcefile="mvc/views/razor.md" sourcestartlinenumber="551" sourceendlinenumber="564">
<li sourcefile="mvc/views/razor.md" sourcestartlinenumber="551" sourceendlinenumber="551">case</li>
<li sourcefile="mvc/views/razor.md" sourcestartlinenumber="552" sourceendlinenumber="552">do</li>
<li sourcefile="mvc/views/razor.md" sourcestartlinenumber="553" sourceendlinenumber="553">default</li>
<li sourcefile="mvc/views/razor.md" sourcestartlinenumber="554" sourceendlinenumber="554">for</li>
<li sourcefile="mvc/views/razor.md" sourcestartlinenumber="555" sourceendlinenumber="555">foreach</li>
<li sourcefile="mvc/views/razor.md" sourcestartlinenumber="556" sourceendlinenumber="556">if</li>
<li sourcefile="mvc/views/razor.md" sourcestartlinenumber="557" sourceendlinenumber="557">else</li>
<li sourcefile="mvc/views/razor.md" sourcestartlinenumber="558" sourceendlinenumber="558">lock</li>
<li sourcefile="mvc/views/razor.md" sourcestartlinenumber="559" sourceendlinenumber="559">switch</li>
<li sourcefile="mvc/views/razor.md" sourcestartlinenumber="560" sourceendlinenumber="560">try</li>
<li sourcefile="mvc/views/razor.md" sourcestartlinenumber="561" sourceendlinenumber="561">catch</li>
<li sourcefile="mvc/views/razor.md" sourcestartlinenumber="562" sourceendlinenumber="562">finally</li>
<li sourcefile="mvc/views/razor.md" sourcestartlinenumber="563" sourceendlinenumber="563">using</li>
<li sourcefile="mvc/views/razor.md" sourcestartlinenumber="564" sourceendlinenumber="564">while</li>
</ul>
<p sourcefile="mvc/views/razor.md" sourcestartlinenumber="566" sourceendlinenumber="566">C# Razor keywords need to be double escaped with <code>@(@C# Razor Keyword)</code>, for example <code>@(@case)</code>. The first <code>@</code> escapes the Razor parser, the second <code>@</code> escapes the C# parser. See the complete sample below.</p>
<h3 id="reserved-keywords-not-used-by-razor" sourcefile="mvc/views/razor.md" sourcestartlinenumber="568" sourceendlinenumber="568">Reserved keywords not used by Razor</h3>
<ul sourcefile="mvc/views/razor.md" sourcestartlinenumber="570" sourceendlinenumber="571">
<li sourcefile="mvc/views/razor.md" sourcestartlinenumber="570" sourceendlinenumber="570">namespace</li>
<li sourcefile="mvc/views/razor.md" sourcestartlinenumber="571" sourceendlinenumber="571">class</li>
</ul>
<p sourcefile="mvc/views/razor.md" sourcestartlinenumber="573" sourceendlinenumber="573"><a name="razor-customcompilationservice-label"></a></p>
<h2 id="viewing-the-razor-c-class-generated-for-a-view" sourcefile="mvc/views/razor.md" sourcestartlinenumber="575" sourceendlinenumber="575">Viewing the Razor C# class generated for a view</h2>
<p sourcefile="mvc/views/razor.md" sourcestartlinenumber="577" sourceendlinenumber="577">Add the following class to your ASP.NET Core MVC project:</p>
<pre sourcefile="mvc/views/razor.md" sourcestartlinenumber="579" sourceendlinenumber="579"><code class="lang-csharp" name="Main">using Microsoft.AspNetCore.Mvc.ApplicationParts;
using Microsoft.AspNetCore.Mvc.Razor;
using Microsoft.AspNetCore.Mvc.Razor.Compilation;
using Microsoft.AspNetCore.Mvc.Razor.Internal;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;

public class CustomCompilationService : DefaultRoslynCompilationService, ICompilationService
{
    public CustomCompilationService(ApplicationPartManager partManager, 
        IOptions&lt;RazorViewEngineOptions&gt; optionsAccessor, 
        IRazorViewEngineFileProviderAccessor fileProviderAccessor, 
        ILoggerFactory loggerFactory) 
        : base(partManager, optionsAccessor, fileProviderAccessor, loggerFactory)
    {
    }

    CompilationResult ICompilationService.Compile(RelativeFileInfo fileInfo, 
        string compilationContent)
    {
        return base.Compile(fileInfo, compilationContent);
    }
}

</code></pre><p sourcefile="mvc/views/razor.md" sourcestartlinenumber="581" sourceendlinenumber="581">Override the <code>ICompilationService</code> added by MVC with the above class;</p>
<pre sourcefile="mvc/views/razor.md" sourcestartlinenumber="583" sourceendlinenumber="583"><code class="lang-csharp" name="Main" highlight-lines="4">public void ConfigureServices(IServiceCollection services)
{
    services.AddMvc();
    services.AddSingleton&lt;ICompilationService, CustomCompilationService&gt;();
}
</code></pre><p sourcefile="mvc/views/razor.md" sourcestartlinenumber="585" sourceendlinenumber="585">Set a break point on the <code>Compile</code> method of <code>CustomCompilationService</code> and view <code>compilationContent</code>.</p>
<p sourcefile="mvc/views/razor.md" sourcestartlinenumber="587" sourceendlinenumber="587"><img src="razor/_static/tvr.png" alt="Text Visualizer view of compilationContent" sourcefile="mvc/views/razor.md" sourcestartlinenumber="587" sourceendlinenumber="587"></p>
<p sourcefile="mvc/views/razor.md" sourcestartlinenumber="589" sourceendlinenumber="589"><a name="case"></a></p>
<h2 id="view-lookups-and-case-sensitivity" sourcefile="mvc/views/razor.md" sourcestartlinenumber="590" sourceendlinenumber="590">View lookups and case sensitivity</h2>
<p sourcefile="mvc/views/razor.md" sourcestartlinenumber="592" sourceendlinenumber="592">The Razor view engine performs case-sensitive lookups for views. However, the actual lookup is determined by the underlying source:</p>
<ul sourcefile="mvc/views/razor.md" sourcestartlinenumber="594" sourceendlinenumber="602">
<li sourcefile="mvc/views/razor.md" sourcestartlinenumber="594" sourceendlinenumber="597"><p sourcefile="mvc/views/razor.md" sourcestartlinenumber="594" sourceendlinenumber="594">File based source: </p>
<ul sourcefile="mvc/views/razor.md" sourcestartlinenumber="596" sourceendlinenumber="597">
<li sourcefile="mvc/views/razor.md" sourcestartlinenumber="596" sourceendlinenumber="596">On operating systems with case insensitive file systems (like Windows), physical file provider lookups are case insensitive. For example <code>return View(&quot;Test&quot;)</code> would result in <code>/Views/Home/Test.cshtml</code>, <code>/Views/home/test.cshtml</code> and all other casing variants would be discovered.</li>
<li sourcefile="mvc/views/razor.md" sourcestartlinenumber="597" sourceendlinenumber="597">On case sensitive file systems, which includes Linux, OSX and <code>EmbeddedFileProvider</code>, lookups are case sensitive. For example, <code>return View(&quot;Test&quot;)</code> would specifically look for <code>/Views/Home/Test.cshtml</code>.</li>
</ul>
</li>
<li sourcefile="mvc/views/razor.md" sourcestartlinenumber="599" sourceendlinenumber="602"><p sourcefile="mvc/views/razor.md" sourcestartlinenumber="599" sourceendlinenumber="599">Precompiled views:</p>
<ul sourcefile="mvc/views/razor.md" sourcestartlinenumber="601" sourceendlinenumber="602">
<li sourcefile="mvc/views/razor.md" sourcestartlinenumber="601" sourceendlinenumber="602">With ASP.Net Core 2.0 and later, looking up precompiled views is case insensitive on all operating systems. The behavior is identical to physical file provider&#39;s behavior on Windows. 
Note: If two precompiled views differ only in case, the result of lookup is non-deterministic.</li>
</ul>
</li>
</ul>
<p sourcefile="mvc/views/razor.md" sourcestartlinenumber="604" sourceendlinenumber="604">Developers are encouraged to match the casing of file and directory names to the casing of area, controller and action names. This would ensure your deployments remain agnostic of the underlying file system.</p>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                  <li>
                    <a href="https://github.com/aspnet/Docs/blob/w/riande/RP-EF/aspnetcore/mvc/views/razor.md/#L1" class="contribution-link">Improve this Doc</a>
                  </li>
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Copyright Â© 2015-2017 Microsoft<br>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../../styles/docfx.js"></script>
    <script type="text/javascript" src="../../styles/main.js"></script>
  </body>
</html>
